name: Unit, functional, integration tests and code coverage

on:
  push:

jobs:
  backend-functional-tests:
    env:
      COVERAGE_FILE: .coverage.backend-functional-tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    services:
      postgis:
        image: postgis/postgis
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: password
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - run: pip install ".[test]"
      - run: coverage run --source=velour_api --omit velour_api/main.py -m pytest -v tests/functional-tests
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_HOST: localhost
      - run: coverage report
      - name: upload coverage report as artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.COVERAGE_FILE }}
          path: backend/${{ env.COVERAGE_FILE }}

  integration-tests:
    env:
      COVERAGE_FILE: .coverage.integration-tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - uses: actions/checkout@v3
      - name: setup backend test env
        run: make test-env
        working-directory: ./backend
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: install api
        run: pip install -e ".[test]"
        working-directory: ./backend
      - name: install client
        run: pip install -e ".[test]"
        working-directory: ./client
      - run: coverage run --source="backend/velour_api,client/velour" --omit backend/velour_api/main.py -m pytest -v integration_tests/test_client.py
        working-directory: ./
      - run: coverage report
        working-directory: ./
      - name: upload coverage report as artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.COVERAGE_FILE }}
          path: ${{ env.COVERAGE_FILE }}
      - run: make stop-env
      - run: docker compose -p velour up
        env:
          AUTH0_DOMAIN: ${{ env.AUTH0_DOMAIN }}
          AUTH0_AUDIENCE: ${{ env.AUTH0_AUDIENCE }}
          AUTH0_ALGORITHMS: ${{ env.AUTH0_ALGORITHMS }}
          AUTH0_CLIENT_ID: ${{ env.AUTH0_CLIENT_ID }}
          AUTH0_CLIENT_SECRET: ${{ env.AUTH0_CLIENT_SECRET }}
        working-directory: ./
      - run: pytest -v integration_tests/test_client_auth.py

  backend-unit-tests:
    env:
      COVERAGE_FILE: .coverage.backend-unit-tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - run: pip install ".[test]"
      - run: coverage run --source=velour_api --omit velour_api/main.py -m pytest -v tests/unit-tests
      - run: coverage report
      - name: upload coverage report as artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.COVERAGE_FILE }}
          path: backend/${{ env.COVERAGE_FILE }}

  client-unit-tests:
    env:
      COVERAGE_FILE: .coverage.client-unit-tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: ["3.7", "3.8", "3.9", "3.10", "3.11"]
    defaults:
      run:
        working-directory: ./client
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}
      - run: pip install tox
      - run: tox -e py
      - name: upload coverage report as artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.COVERAGE_FILE }}
          path: client/${{ env.COVERAGE_FILE }}

  combine-coverage-report:
    needs:
      [
        backend-functional-tests,
        integration-tests,
        backend-unit-tests,
        client-unit-tests,
      ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - run: pip install coverage
      - uses: actions/download-artifact@v3
        with:
          name: .coverage.backend-unit-tests
      - uses: actions/download-artifact@v3
        with:
          name: .coverage.client-unit-tests
      - uses: actions/download-artifact@v3
        with:
          name: .coverage.integration-tests
      - uses: actions/download-artifact@v3
        with:
          name: .coverage.backend-functional-tests
      - run: coverage combine
      - run: coverage report
      # https://nedbatchelder.com/blog/202209/making_a_coverage_badge.html
      - run: |
          coverage json
          export TOTAL=$(python -c "import json;print(json.load(open('coverage.json'))['totals']['percent_covered_display'])")
          echo "total=$TOTAL" >> $GITHUB_ENV
      - name: "Make badge"
        if: github.ref == 'refs/heads/main'
        uses: schneegans/dynamic-badges-action@v1.4.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: 501428c92df8d0de6805f40fb78b1363
          filename: velour-coverage.json
          label: Coverage
          message: ${{ env.total }}%
          minColorRange: 50
          maxColorRange: 90
          valColorRange: ${{ env.total }}
