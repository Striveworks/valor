-- Enable the PostGIS extension for geometric data types
CREATE EXTENSION IF NOT EXISTS postgis;

-- Table: label
create table label
(
    id         serial primary key,
    value      varchar   not null,
    created_at timestamp not null,
    unique (value)
);

-- Table: meta_linker
CREATE TABLE meta_linker (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    created_at TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Table: meta_integer
CREATE TABLE meta_integer (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    metadata_id INTEGER NOT NULL,
    key TEXT NOT NULL,
    value INTEGER NOT NULL,
    FOREIGN KEY (metadata_id) REFERENCES meta_linker (id)
);
CREATE INDEX idx_meta_integer_metadata_id ON meta_integer (metadata_id);

-- Table: meta_float
CREATE TABLE meta_float (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    metadata_id INTEGER NOT NULL,
    key TEXT NOT NULL,
    value DOUBLE PRECISION NOT NULL,
    FOREIGN KEY (metadata_id) REFERENCES meta_linker (id)
);
CREATE INDEX idx_meta_float_metadata_id ON meta_float (metadata_id);

-- Table: meta_string
CREATE TABLE meta_string (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    metadata_id INTEGER NOT NULL,
    key TEXT NOT NULL,
    value TEXT NOT NULL,
    FOREIGN KEY (metadata_id) REFERENCES meta_linker (id)
);
CREATE INDEX idx_meta_string_metadata_id ON meta_string (metadata_id);

-- Table: meta_datetime
CREATE TABLE meta_datetime (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    metadata_id INTEGER NOT NULL,
    key TEXT NOT NULL,
    value TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    FOREIGN KEY (metadata_id) REFERENCES meta_linker (id)
);
CREATE INDEX idx_meta_datetime_metadata_id ON meta_datetime (metadata_id);

-- Table: meta_date
CREATE TABLE meta_date (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    metadata_id INTEGER NOT NULL,
    key TEXT NOT NULL,
    value DATE NOT NULL,
    FOREIGN KEY (metadata_id) REFERENCES meta_linker (id)
);
CREATE INDEX idx_meta_date_metadata_id ON meta_date (metadata_id);

-- Table: meta_time
CREATE TABLE meta_time (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    metadata_id INTEGER NOT NULL,
    key TEXT NOT NULL,
    value TIME WITHOUT TIME ZONE NOT NULL,
    FOREIGN KEY (metadata_id) REFERENCES meta_linker (id)
);
CREATE INDEX idx_meta_time_metadata_id ON meta_time (metadata_id);

-- Table: meta_geospatial
CREATE TABLE meta_geospatial (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    metadata_id INTEGER NOT NULL,
    key TEXT NOT NULL,
    value GEOMETRY NOT NULL,
    FOREIGN KEY (metadata_id) REFERENCES meta_linker (id)
);
CREATE INDEX idx_meta_geospatial_metadata_id ON meta_geospatial (metadata_id);
-- Create a spatial index on the geometry column
CREATE INDEX idx_meta_geospatial_value ON meta_geospatial USING GIST (value);

-- Table: dataset
CREATE TABLE dataset (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name TEXT NOT NULL UNIQUE,
    metadata_id INTEGER,
    finalized BOOLEAN NOT NULL,
    created_at TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (metadata_id) REFERENCES meta_linker (id)
);

-- Table: model
CREATE TABLE model (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name TEXT NOT NULL UNIQUE,
    metadata_id INTEGER,
    status TEXT NOT NULL,
    created_at TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (metadata_id) REFERENCES meta_linker (id)
);

-- Table: datum
CREATE TABLE datum (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    dataset_id INTEGER NOT NULL,
    uid TEXT NOT NULL,
    metadata_id INTEGER,
    created_at TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (dataset_id) REFERENCES dataset (id),
    FOREIGN KEY (metadata_id) REFERENCES meta_linker (id),
    UNIQUE (dataset_id, uid)
);
CREATE INDEX idx_datum_dataset_id ON datum (dataset_id);

-- Table: classification
CREATE TABLE classification (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    dataset_id INTEGER NOT NULL,
    model_id INTEGER NOT NULL,
    datum_id INTEGER NOT NULL,
    groundtruth_id INTEGER NOT NULL,
    prediction_id INTEGER NOT NULL,
    score DOUBLE PRECISION NOT NULL,
    hardmax BOOLEAN NOT NULL,
    created_at TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (dataset_id) REFERENCES dataset (id),
    FOREIGN KEY (model_id) REFERENCES model (id),
    FOREIGN KEY (datum_id) REFERENCES datum (id),
    FOREIGN KEY (groundtruth_id) REFERENCES label (id),
    FOREIGN KEY (prediction_id) REFERENCES label (id),
    UNIQUE (datum_id, groundtruth_id, prediction_id)
);
CREATE INDEX idx_classification_dataset_id ON classification (dataset_id);
CREATE INDEX idx_classification_model_id ON classification (model_id);
CREATE INDEX idx_classification_datum_id ON classification (datum_id);

-- Table: object_detection_annotation
CREATE TABLE object_detection_annotation (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    iou DOUBLE PRECISION NOT NULL,
    area DOUBLE PRECISION NOT NULL,
    x_min DOUBLE PRECISION NOT NULL,
    x_max DOUBLE PRECISION NOT NULL,
    y_min DOUBLE PRECISION NOT NULL,
    y_max DOUBLE PRECISION NOT NULL
);

-- Table: object_detection
CREATE TABLE object_detection (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    dataset_id INTEGER NOT NULL,
    model_id INTEGER NOT NULL,
    datum_id INTEGER NOT NULL,
    groundtruth_id INTEGER NOT NULL,
    prediction_id INTEGER NOT NULL,
    score DOUBLE PRECISION NOT NULL,
    detection INTEGER NOT NULL,
    created_at TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (dataset_id) REFERENCES dataset (id),
    FOREIGN KEY (model_id) REFERENCES model (id),
    FOREIGN KEY (datum_id) REFERENCES datum (id),
    FOREIGN KEY (groundtruth_id) REFERENCES label (id),
    FOREIGN KEY (prediction_id) REFERENCES label (id),
    FOREIGN KEY (detection) REFERENCES object_detection_annotation (id),
    UNIQUE (datum_id, groundtruth_id, prediction_id)
);

-- Table: semantic_segmentation
CREATE TABLE semantic_segmentation (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    dataset_id INTEGER NOT NULL,
    model_id INTEGER NOT NULL,
    datum_id INTEGER NOT NULL,
    groundtruth_id INTEGER,
    prediction_id INTEGER,
    count INTEGER NOT NULL,
    created_at TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (dataset_id) REFERENCES dataset (id),
    FOREIGN KEY (model_id) REFERENCES model (id),
    FOREIGN KEY (datum_id) REFERENCES datum (id),
    FOREIGN KEY (groundtruth_id) REFERENCES label (id),
    FOREIGN KEY (prediction_id) REFERENCES label (id),
    UNIQUE (datum_id, groundtruth_id, prediction_id)
);

-- Table: evaluation
CREATE TABLE evaluation (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    dataset_names JSONB NOT NULL,
    model_name TEXT NOT NULL,
    filters JSONB NOT NULL,
    parameters JSONB NOT NULL,
    status TEXT NOT NULL,
    created_at TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    meta JSONB,
    -- Since UNIQUE constraints on JSONB columns are not directly supported,
    -- we use expression indexes with hash functions
    UNIQUE (dataset_names, model_name, filters, parameters)
);

-- Table: metric
CREATE TABLE metric (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    evaluation_id INTEGER,
    type TEXT NOT NULL,
    value JSONB NOT NULL,
    created_at TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (evaluation_id) REFERENCES evaluation (id)
);
