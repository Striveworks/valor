{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Valor is a centralized evaluation store that makes it easy to measure, explore, and rank model performance. Valor empowers data scientists and engineers to evaluate the performance of their machine learning pipelines and use those evaluations to make better modeling decisions in the future. To skip this textual introduction and dive right in, first go here for instructions to setup the Valor service, and then checkout the sample notebooks.</p> <p>Valor is maintained by Striveworks, a cutting-edge machine learning operations (MLOps) company based out of Austin, Texas. We'd love to learn more about your interest in Valor and answer any questions you may have; please don't hesitate to reach out to us on Slack or GitHub.</p> <p>These docs are organized as follows:</p> <ul> <li>Overview (this page): Provides an overview of what Valor is, why it's important, and how it works.</li> <li>Installation: Explains how to install Valor.</li> <li>Getting Started Notebook: Details everything you need to get up and running with using Valor.</li> <li>All Sample Notebooks: Collection of descriptive Jupyter notebooks giving examples of how to evaluate model performance using Valor.</li> <li>Metadata and Filtering: Describes Valor's robust support for adding metadata to data, along with how to filter evaluations and Valor objects based on metadata and other attributes.</li> <li>Metrics: Describes all of the metrics that you can calculate using Valor.</li> <li>Endpoints: Documents Valor's various API endpoints.</li> <li>Technical Concepts: Describes the technical concepts that underpin Valor.</li> <li>Contributing and Development: Explains how you can build on and contribute to Valor.</li> <li>Python Client API: Shares reference documentation for our Python client.</li> </ul>"},{"location":"#overview","title":"Overview","text":"<p>In this section, we'll explore what Valor is, why it's important, and provide a high-level description of how it works. This overview is also available in the following five-minute video:</p>"},{"location":"#use-cases-for-a-containerized-evaluation-store","title":"Use Cases for a Containerized Evaluation Store","text":"<p>As we've worked with dozens of data scientists and engineers on their MLOps pipelines, we have identified three important questions that an effective evaluation store could help them answer. First, they wanted to understand: \"Of the various models I tested for a given dataset, which one performs best?\". This is a very common and important use case\u2014and one that is often solved on a model-to-model basis in a local Jupyter notebook. This focus on bespoke implementations limits traceability and makes it difficult to create apples-to-apples comparisons between new model runs and prior model runs.</p> <p>Second, our users wanted to understand: \"How does the performance of a particular model vary across datasets?\". We found that many practitioners use the same computer vision model (e.g., YOLOv8) for a variety of supervised learning tasks, and they needed a way to identify patterns where that particular model didn't meet expectations.</p> <p>Finally, our users wanted to understand: \"How can I use my prior evaluations to pick the best model for a future ML pipeline?\". This last question requires the ability to filter previous evaluations on granular metadata (e.g., time of day, geospatial coordinates, etc.) in order to provide tailored recommendations regarding which model to pick in the future.</p> <p>With these three use cases in mind, we set out to build a centralized evaluation store that we later named Valor.</p>"},{"location":"#introducing-valor","title":"Introducing Valor","text":"<p>Valor is a centralized evaluation store that makes it easy to measure, explore, and rank model performance. Our ultimate goal with Valor is to help data scientists and engineers pick the right ML model for their specific needs. To that end, we built Valor with three design principles in mind:</p> <ul> <li>Valor works with any dataset or model: We believe Valor should be able to handle any supervised learning task that you want to throw at it. Just pass in your ground truth annotations and predictions, describe your learning task (i.e., object detection), and Valor will do the rest. (Note: At launch, Valor will only support classification and computer vision (i.e., image segmentation and object detection) tasks. We're confident this framework will abstract well to other supervised learning tasks and plan to support them in later releases).</li> <li>Valor can handle any type of image, model, or dataset metadata you throw at it: Metadata is a critical component of any evaluation store as it enables the system to offer tailored model recommendations based on a user's specific needs. To that end, we built Valor to handle any metadata under the sun. Dates, geospatial coordinates, and even JSONs filled with configuration details are all on the table. This means you can slice and dice your evaluations any way you want: just pass in the right labels for your use case and define your filter (say a geographic bounding box), and you\u2019ll get back results for your specific needs.</li> <li>Valor standardizes the evaluation process: The trickiest part of comparing two different model runs is avoiding apples-to-oranges comparisons. Valor helps you audit your metrics and avoid false comparisons by versioning your uploads, storing them in a centralized location, and ensuring that you only compare runs that used the exact same filters and metrics.</li> </ul>"},{"location":"#how-it-works-an-illustrative-example","title":"How It Works: An Illustrative Example","text":"<p>Let\u2019s walk through a quick example to bring Valor to life.</p> <p>Say that you're interested in using computer vision models to detect forest fires around the world using satellite imagery. You've just been tasked with building a new ML pipeline to detect fires in an unfamiliar region of interest. How might you leverage your evaluation metrics from prior ML pipelines to understand which model will perform best for this particular use case?</p> <p></p> <p>To answer this question, we'll start by passing in three pieces of information from each of our prior modeling runs:</p> <ul> <li>GroundTruths: First, we'll pass in human-annotated bounding boxes to tell Valor exactly where forest fires can be found across all of the satellite images used in prior runs.</li> <li>Predictions: Next, we'll pass machine-generated predictions for each image (also in the form of bounding boxes) so that Valor can evaluate how well each model did at predicting forest fires.</li> <li>Labels: Finally, we'll pass metadata to Valor describing each of our various images (e.g., the time of day the photo was taken, the geospatial coordinates of the forest in the photo, etc.). We'll use this metadata later on in order to identify the right model for our new use case.</li> </ul> <p>Once we pass in these three ingredients, Valor will compare all of our <code>GroundTruths</code> and <code>Predictions</code> in order to calculate various evaluation metrics (i.e., mean average precision or mAP). These metrics, <code>Labels</code>, <code>GroundTruths</code>, and <code>Predictions</code>, will all be stored in Postgres, with PostGIS support for fast geospatial lookups and geometric comparisons at a later date.</p> <p>Finally, once all of our previous pipeline runs and evaluations are stored in Valor, we can use Valor\u2019s API to specify our exact filter criteria and get back its model rankings. In this case, we can ask Valor to find us the best model for detecting forest fires at night in a 50 mile radius around (42.36, -71.03), sorted by mAP. Valor will then filter all of our stored evaluation metrics, rank each model with evaluations that meet our criteria, and send back all relevant evaluation metrics to help us determine which model to use for our new modeling pipeline.</p> <p></p>"},{"location":"#next-steps","title":"Next Steps","text":"<p>We'd recommend reviewing our \"Getting Started\" sample notebook to become further acquainted with Valor. For more detailed explanations of Valor's technical underpinnings, see our technical concepts guide.</p>"},{"location":"#faq","title":"FAQ","text":"<p>Q. What is Valor?</p> <p>A. Valor is a centralized evaluation store that makes it easy to measure, explore, and rank model performance. For an overview of what Valor is and why it's important, please refer to our high-level overview.</p> <p>Q. What evaluation methods are supported?</p> <p>A. Valor currently supports generic classification as well as object-detection and semantic-segmentation for images. The long-term goal for Valor is to support the most popular supervised learning methods.</p> <p>Q. Does Valor store data?</p> <p>A. Valor only stores ground truth annotations, model predictions, and user-defined metadata.</p> <p>Q. What is a Datum?</p> <p>A. A <code>valor.Datum</code> object is a generic type that represents a datum in the context of a machine learning workflow. The object stores a UID and related metadata in a dictionary. This metadata allows for the user to construct their own abstraction layer by mapping a real-world type (e.g., an image) into a <code>valor.Datum</code> type.</p> <pre><code>from valor.metatypes import ImageMetadata\nimage = ImageMetadata.create(\n  uid = \"1234\",\n  height = 100,\n  width = 100,\n)\n\n# access the datum\ndatum = image.datum\n</code></pre> <p>Q. What is a GroundTruth?</p> <p>A. <code>valor.GroundTruth</code> objects in Valor each represent a singular datum and its associated annotations that provide a reference standard or the 'truth' against which predictions are compared. There cannot be multiple ground truths per datum.</p> <p>Q. What is a Prediction?</p> <p>A. <code>valor.Prediction</code> objects are similar to <code>valor.GroundTruth</code> objects in that they also contain a list of annotations over a datum. However, these annotations are generated by a model as inferences, and the object also includes the name of the model that was used for creating these inferences. There cannot be multiple predictions by the same model over a single datum.</p> <p>Q. Can Valor handle multiple data types?</p> <p>A. Valor abstracts data types through metadata. An example of this can be seen in <code>valor.metatypes.ImageMetadata</code> which describes the mapping of an image to a <code>valor.Datum</code>.</p> <p>Q. Does Valor support geospatial queries?</p> <p>A. Valor follows the GeoJSON specification (RFC 7946) in the implementation of <code>Point</code>, <code>MulitPoint</code>, <code>LineString</code>, <code>MultiLineString</code>, <code>Polygon</code> and <code>MulitPolygon</code> geometries. These objects are used to define annotations and facilitate the creation of geospatial metadata.</p>"},{"location":"#troubleshooting","title":"Troubleshooting","text":"<p>Q. Why am I getting <code>NotFinalizedError</code> when trying to run an evaluation?</p> <p>A. Valor requires both dataset and model representations to be finalized before evaluation can take place. Finalization is crucial for auditability as it ensures that data finalized at a certain date is immutable.</p> <p>Dataset finalization is accomplished through the <code>valor.Dataset.finalize</code> member function.</p> <pre><code>from valor import Client, Dataset\nclient = Client(...)\ndataset = Dataset(name=\"test_dataset\")\n...\ndataset.finalize()\n</code></pre> <p>Models are finalized automatically given two conditions.</p> <ol> <li>The working dataset is finalized.</li> <li>There is a 1:1 mapping of predictions to ground truths.</li> </ol> <p>Models and their predictions can also be finalized prematurely using the <code>valor.Model.finalize_inferences</code> member function. This will generate empty predictions with task type <code>enums.TaskType.SKIP</code> to achieve the 1:1 ground truth mapping.</p> <pre><code>from valor import Client, Dataset, Model\nclient = Client(...)\ndataset = Dataset(name=\"test_dataset\")\nmodel = Model(name=\"test_model\")\n...\ndataset.finalize()\nmodel.finalize_inferences(dataset)\n</code></pre> <p>Q. Why am I getting GDAL driver errors?</p> <p>A. For some computations (mostly involving rasters), Valor requires the PostGIS database to have all GDAL drivers enabled. The Valor back end attempts to enable these drivers, but it might not have permission depending on your specific setup. If you encounter this error, see here for ways to enable the drivers directly in the PostGIS instance.</p>"},{"location":"contributing/","title":"Contributing to Valor","text":"<p>We welcome all contributions, bug reports, bug fixes, documentation improvements, enhancements, and ideas aimed at improving Valor. This doc describes the high-level process for how to contribute to this repository. If you have any questions or comments about this process, please feel free to reach out to us on Slack.</p>"},{"location":"contributing/#on-github","title":"On GitHub","text":"<p>We use Git on GitHub to manage this repo, which means you will need to sign up for a free GitHub account to submit issues, ideas, and pull requests. We use Git for version control to allow contributors from all over the world to work together on this project.</p> <p>If you are new to Git, these official resources can help bring you up to speed:</p> <ul> <li>GitHub documentation for forking a repo</li> <li>GitHub documentation for collaborating with pull requests</li> <li>GitHub documentation for working with forks</li> </ul>"},{"location":"contributing/#contribution-workflow","title":"Contribution Workflow","text":"<p>Generally, the high-level workflow for contributing to this repo includes:</p> <ol> <li>Submitting an issue or enhancement request using the appropriate template on GitHub Issues.</li> <li>Gathering feedback from devs and the broader community in your issue before starting to code.</li> <li>Forking the Valor repo, making your proposed changes, and submitting a pull request (PR). When submitting a PR, please be sure to:<ol> <li>Update the README.md and/or any relevant docstrings with details of your change.</li> <li>Add tests where necessary.</li> <li>Run <code>pre-commit install</code> on your local repo before your last commit to ensure your changes follow our formatting guidelines.</li> <li>Double-check that your code passes all of the tests that are automated via GitHub Actions.</li> <li>Ping us on Slack to ensure timely review.</li> </ol> </li> <li>Working with repo maintainers to review and improve your PR before it is merged into the official repo.</li> </ol> <p>For questions or comments on this process, please reach out to us at any time on Slack.</p>"},{"location":"contributing/#development-tips-and-tricks","title":"Development Tips and Tricks","text":""},{"location":"contributing/#deploying-the-back-end-for-development","title":"Deploying the Back End for Development","text":""},{"location":"contributing/#docker-compose","title":"Docker Compose","text":"<p>The fastest way to test the API and Python client is via Docker Compose. Start by setting the environment variable <code>POSTGRES_PASSWORD</code> to your liking, and then start Docker and build the container:</p> <pre><code>export POSTGRES_PASSWORD=\"my_password\"\ndocker compose up\n</code></pre>"},{"location":"contributing/#makefile-requires-docker","title":"Makefile (requires Docker)","text":"<p>Alternatively, you may want to run the API service from a terminal to enable faster debugging. To start the service, you can run:</p> <pre><code>pip install api # Install the API in your python environment\n\nexport POSTGRES_PASSWORD=password\nexport POSTGRES_HOST=localhost\nmake start-postgres-docker # Start the custom postgres service in Docker\nmake run-migrations # Instantiate the table schemas in Postgres\nmake start-server # Start the API service locally\n</code></pre>"},{"location":"contributing/#setting-up-your-environment","title":"Setting Up Your Environment","text":"<p>Creating a Valor-specific Python environment at the start of development can help you avoid dependency and versioning issues later on. To start, we'd recommend activating a new Python environment:</p> <pre><code># venv\npython3 -m venv .env-valor\nsource .env-valor/bin/activate\n\n# conda\nconda create --name valor python=3.11\nconda activate valor\n</code></pre> <p>Next, install pre-commit to ensure formatting consistency throughout your repo:</p> <pre><code>pip install pre-commit\npre-commit install\n</code></pre> <p>Finally, you're ready to install your client and API modules:</p> <pre><code># Install the Client module\npython -m pip install -e client/.\n\n# Install the API module\npython -m pip install -e api/.\n</code></pre>"},{"location":"contributing/#use-pgadmin-to-debug-postgis","title":"Use pgAdmin to Debug PostGIS","text":"<p>You can use the pgAdmin utility to debug your PostGIS tables as you code. Start by installing pgAdmin, and then select <code>Object &gt; Register &gt; Server</code> to connect to your PostGIS container. The default connection details are listed below for convenience:</p> <pre><code>- *Host name/address*: 0.0.0.0\n- *Port*: 5432\n- *Maintenance database*: postgres\n- *Username*: postgres\n</code></pre>"},{"location":"contributing/#running-tests","title":"Running Tests","text":"<p>All of our tests are run automatically via GitHub Actions on every push, so it's important to double-check that your code passes all local tests before committing your code. All of the tests below require <code>pytest</code>:</p> <pre><code>pip install pytest\n</code></pre>"},{"location":"contributing/#running-integration-tests","title":"Running integration tests","text":"<pre><code>pytest integration_tests\n</code></pre>"},{"location":"contributing/#running-back-end-unit-tests","title":"Running back end unit tests","text":"<pre><code>pytest api/tests/unit-tests\n</code></pre>"},{"location":"contributing/#running-back-end-functional-tests","title":"Running back end functional tests","text":"<p>Note: Functional tests require a running instance of PostgreSQL, which you can start using <code>make start-postgres-docker</code>.</p> <pre><code>POSTGRES_PASSWORD=password \\\nPOSTGRES_HOST=localhost \\\npytest api/tests/functional-tests/\n</code></pre>"},{"location":"endpoints/","title":"Endpoints","text":""},{"location":"installation/","title":"Installation","text":"<p>Valor comprises two services: a back-end service (which consists of a REST API and a Postgres database with the PostGIS extension), and a Python client for interacting with the back-end service.</p>"},{"location":"installation/#setting-up-the-back-end-service","title":"Setting up the back-end service","text":""},{"location":"installation/#using-docker-compose","title":"Using Docker Compose","text":"<p>The easiest way to get up and running with Valor is to use Docker Compose with the <code>docker-compose.yml</code> file in the repository root:</p> <pre><code>git clone https://github.com/striveworks/valor\ncd valor\ndocker compose --env-file ./api/.env.testing up\n</code></pre> <p>This will set up the necessary environment variables, start both the API and database services, and run the database migration job. The endpoint <code>localhost:8000/health</code> should return <code>{\"status\":\"ok\"}</code> if all of Valor's services were started correctly.</p> <p>Note: running Valor this way is not intended for production and scalable use and is only recommended for development and testing purposes.</p>"},{"location":"installation/#deploying-via-docker-and-a-hosted-database","title":"Deploying via Docker and a hosted database","text":"<p>For a more production-grade deployment, we publish the images <code>ghcr.io/striveworks/valor/valor-service</code> (used for the REST API) and <code>ghcr.io/striveworks/valor/migrations</code> (used for setting up the database and migrations). These can be paired with any Postgres database with the PostGIS extension.</p> <p>The following environment variables are required for running these images:</p> Variable Description Images that need it <code>POSTGRES_HOST</code> The host of the Postgres database <code>valor-service</code>, <code>migrations</code> <code>POSTGRES_PORT</code> The port of the Postgres database <code>valor-service</code>, <code>migrations</code> <code>POSTGRES_DB</code> The name of the Postgres database <code>valor-service</code>, <code>migrations</code> <code>POSTGRES_USERNAME</code> The user of the Postgres database <code>valor-service</code>, <code>migrations</code> <code>POSTGRES_PASSWORD</code> The password of the Postgres database <code>valor-service</code>, <code>migrations</code> <code>POSTGRES_SSLMODE</code> Sets the Postgres instance SSL mode (typically needs to be \"require\") <code>migrations</code> <code>API_ROOT_PATH</code> The root path of the API (if serving behind a proxy) <code>valor-service</code> <p>Additionally, the Valor REST API has an optional single username/password/bearer token authentication. To enable this feature, the <code>valor-service</code> image requires the following environment variables:</p> Variable Description <code>VALOR_USERNAME</code> The username to use <code>VALOR_PASSWORD</code> The password to use <code>VALOR_SECRET_KEY</code> A random, secret string used for signing JWT tokens"},{"location":"installation/#manual-deployment","title":"Manual deployment","text":"<p>If you would prefer to build your own image or if you want a debug console for the back-end, please see the deployment instructions in Contributing to Valor.</p>"},{"location":"installation/#setting-up-the-python-client","title":"Setting up the Python client","text":"<p>The Python client can be installed via pip:</p> <pre><code>pip install valor-client\n</code></pre>"},{"location":"metadata_and_filtering/","title":"Metadata and Filtering","text":""},{"location":"metadata_and_filtering/#metadata","title":"Metadata","text":"<p>Valor offers rich support for attaching metadata to almost any object, which can then be used to filter, group, and organize objects in Valor.</p> <p>The metadata types supported are:</p> <ul> <li>simple data types (strings, numerics, boolean)</li> <li>datetimes (via <code>datetime.datetime</code>, <code>datetime.date</code>, <code>datetime.time</code>, and <code>datetime.timedelta</code> in the Valor client)</li> <li>geometries and geographies (via GeoJSON)</li> </ul> <p>Metadata is added on object creation. For example, if you want to use metadata to organize models that come from training run checkpoints, this may look like:</p> <pre><code>run_name: str\nckpt: int\n\nModel.create(name=f\"{run_name}-ckpt{ckpt}\", metadata={\"run_name\": run_name, \"ckpt\": ckpt})\n</code></pre> <p>or if a datum has an associated datetime of capture, that can be added in the creation stage:</p> <pre><code>from datetime import datetime\n\nDatum(uid=fname, metadata={\"capture_day\": datetime.datetime(day=1, month=1, year=2021)})\n</code></pre>"},{"location":"metadata_and_filtering/#filtering","title":"Filtering","text":"<p>Valor supports filtering objects based on metadata or other attributes (such as labels or bounding boxes). One of the most important use cases of filtering is to define a subset of a dataset to evaluate a model on.</p>"},{"location":"metadata_and_filtering/#filtering-by-metadata","title":"Filtering by metadata","text":"<p>For example, using the above example where <code>capture_day</code> was added as metadata, one way to test model drift could be to evaluate the model over different time periods. Such a workflow may look like:</p> <pre><code>import datetime\n\nimport valor\n\nmodel: valor.Model # classification model\ndset: valor.Dataset # dataset to evaluate on\n\n# compare performance on data captured before and after 2020\nd = datetime.datetime(day=5, month=10, year=2020)\neval1 = model.evaluate_classification(dset, filter_by=[Datum.metadata[\"capture_day\"] &lt; d])\neval2 = model.evaluate_classification(dset, filter_by=[Datum.metadata[\"capture_day\"] &gt; d])\n</code></pre>"},{"location":"metadata_and_filtering/#filtering-by-geometric-attributes","title":"Filtering by geometric attributes","text":"<p>As an example for filtering by geometric attributes, consider evaluating an object detection model's performance on small objects, where we define small as being less than 500 square pixels in area. This can be achieved via:</p> <pre><code>import valor\n\nmodel: valor.Model # object detection model\ndset: valor.Dataset # dataset to evaluate on\n\ndset.evaluate_detection(dset, filter_by=[valor.Annotation.bounding_box.area &lt; 500])\n</code></pre>"},{"location":"metadata_and_filtering/#filtering-in-queries","title":"Filtering in queries","text":"<p>Filtering can also be used when querying for different objects. For example, taking the model section checkpoint example from above, we could query model checkpoints from a training run based on the checkpoint number greater than 100 by:</p> <pre><code>from valor import client\n\nrun_name: str # run name to query for\n\nclient.get_models([Model.metadata[\"run_name\"] == run_name, Model.metadata[\"ckpt\"] &gt; 100])\n</code></pre>"},{"location":"metrics/","title":"Metrics","text":"<p>Let's look at the various metrics you can calculate using Valor.</p> <p>If we're missing an important metric for your particular use case, please write us a GitHub Issue ticket. We love hearing your suggestions.</p>"},{"location":"metrics/#classification-metrics","title":"Classification Metrics","text":"Name Description Equation Precision The number of true positives divided by the total number of positive predictions (i.e., the number of true positives plus the number of false positives). \\(\\dfrac{\\|TP\\|}{\\|TP\\|+\\|FP\\|}\\) Recall The number of true positives divided by the total count of the class of interest (i.e., the number of true positives plus the number of true negatives). \\(\\dfrac{\\|TP\\|}{\\|TP\\|+\\|FN\\|}\\) F1 A weighted average of precision and recall. \\(\\frac{2 * Precision * Recall}{Precision + Recall}\\) Accuracy The number of true predictions divided by the total number of predictions. \\(\\dfrac{\\|TP\\|+\\|TN\\|}{\\|TP\\|+\\|TN\\|+\\|FP\\|+\\|FN\\|}\\) ROC AUC The area under the Receiver Operating Characteristic (ROC) curve for the predictions generated by a given model. See ROCAUC methods. Precision-Recall Curves Outputs a nested dictionary containing the true positives, false positives, true negatives, false negatives, precision, recall, and F1 score for each (label key, label value, confidence threshold) combination. See precision-recall curve methods Detailed Precision-Recall Curves Similar to <code>PrecisionRecallCurve</code>, except this metric a) classifies false positives as <code>hallucinations</code> or <code>misclassifications</code>, b) classifies false negatives as <code>misclassifications</code> or <code>missed_detections</code>, and c) gives example datums for each observation, up to a maximum of <code>pr_curve_max_examples</code>. See detailed precision-recall curve methods"},{"location":"metrics/#object-detection-and-instance-segmentation-metrics","title":"Object Detection and Instance Segmentation Metrics**","text":"Name Description Equation Average Precision (AP) The weighted mean of precisions achieved at several different recall thresholds for a single Intersection over Union (IOU), grouped by class. See AP methods. AP Averaged Over IOUs The average of several AP metrics across IOU thresholds, grouped by class labels. \\(\\dfrac{1}{\\text{number of thresholds}} \\sum\\limits_{iou \\in thresholds} AP_{iou}\\) Mean Average Precision (mAP) The average of several AP metrics, grouped by label keys and IOU thresholds. \\(\\dfrac{1}{\\text{number of labels}} \\sum\\limits_{label \\in labels} AP_{c}\\) mAP Averaged Over IOUs The average of several mAP metrics grouped by label keys. \\(\\dfrac{1}{\\text{number of thresholds}} \\sum\\limits_{iou \\in thresholds} mAP_{iou}\\) Average Recall (AR) The average of several recall metrics across IOU thresholds, grouped by class labels. See AR methods. Mean Average Recall (mAR) The average of several AR metrics, grouped by label keys. \\(\\dfrac{1}{\\text{number of labels}} \\sum\\limits_{label \\in labels} AR_{class}\\) Precision-Recall Curves Outputs a nested dictionary containing the true positives, false positives, true negatives, false negatives, precision, recall, and F1 score for each (label key, label value, confidence threshold) combination. These curves are calculated using a default IOU threshold of 0.5; you can set your own threshold by passing a float between 0 and 1 to the <code>pr_curve_iou_threshold</code> parameter at evaluation time. See precision-recall curve methods Detailed Precision-Recall Curves Similar to <code>PrecisionRecallCurve</code>, except this metric a) classifies false positives as <code>hallucinations</code> or <code>misclassifications</code>, b) classifies false negatives as <code>misclassifications</code> or <code>missed_detections</code>, and c) gives example datums and bounding boxes for each observation, up to a maximum of <code>pr_curve_max_examples</code>. See detailed precision-recall curve methods <p>**When calculating IOUs for object detection metrics, Valor handles the necessary conversion between different types of geometric annotations. For example, if your model prediction is a polygon and your groundtruth is a raster, then the raster will be converted to a polygon prior to calculating the IOU.</p>"},{"location":"metrics/#semantic-segmentation-metrics","title":"Semantic Segmentation Metrics","text":"Name Description Equation Intersection Over Union (IOU) A ratio between the groundtruth and predicted regions of an image, measured as a percentage, grouped by class. \\(\\dfrac{area( prediction \\cap groundtruth )}{area( prediction \\cup groundtruth )}\\) Mean IOU The average of IOU across labels, grouped by label key. \\(\\dfrac{1}{\\text{number of labels}} \\sum\\limits_{label \\in labels} IOU_{c}\\)"},{"location":"metrics/#text-generation-metrics","title":"Text Generation Metrics","text":"Name Description Equation Answer Relevance The number of statements in the answer that are relevant to the query, divided by the total number of statements in the answer See appendix for details. Coherence Rates the coherence of a textual summary relative to some source text using a score from 1 to 5, where 5 means \"This summary is extremely coherent based on the information provided in the source text\". See appendix for details. ROUGE A score between 0 and 1 indicating how often the words in the ground truth string appeared in the predicted string (i.e., measuring recall). See appendix for details. BLEU A score between 0 and 1 indicating how much the predicted string matches the ground truth string (i.e., measuring precision), with a penalty for brevity. See appendix for details."},{"location":"metrics/#appendix-metric-calculations","title":"Appendix: Metric Calculations","text":""},{"location":"metrics/#binary-roc-auc","title":"Binary ROC AUC","text":""},{"location":"metrics/#receiver-operating-characteristic-roc","title":"Receiver Operating Characteristic (ROC)","text":"<p>An ROC curve plots the True Positive Rate (TPR) vs. the False Positive Rate (FPR) at different confidence thresholds.</p> <p>In Valor, we use the confidence scores sorted in decreasing order as our thresholds. Using these thresholds, we can calculate our TPR and FPR as follows:</p>"},{"location":"metrics/#determining-the-rate-of-correct-predictions","title":"Determining the Rate of Correct Predictions","text":"Element Description True Positive (TP) Prediction confidence score &gt;= threshold and is correct. False Positive (FP) Prediction confidence score &gt;= threshold and is incorrect. True Negative (TN) Prediction confidence score &lt; threshold and is correct. False Negative (FN) Prediction confidence score &lt; threshold and is incorrect. <ul> <li> <p>\\(\\text{True Positive Rate (TPR)} = \\dfrac{|TP|}{|TP| + |FN|} = \\dfrac{|TP(threshold)|}{|TP(threshold)| + |FN(threshold)|}\\)</p> </li> <li> <p>\\(\\text{False Positive Rate (FPR)} = \\dfrac{|FP|}{|FP| + |TN|} = \\dfrac{|FP(threshold)|}{|FP(threshold)| + |TN(threshold)|}\\)</p> </li> </ul> <p>We now use the confidence scores, sorted in decreasing order, as our thresholds in order to generate points on a curve.</p> <p>\\(Point(score) = (FPR(score), \\ TPR(score))\\)</p>"},{"location":"metrics/#area-under-the-roc-curve-roc-auc","title":"Area Under the ROC Curve (ROC AUC)","text":"<p>After calculating the ROC curve, we find the ROC AUC metric by approximating the integral using the trapezoidal rule formula.</p> <p>\\(ROC AUC =  \\sum_{i=1}^{|scores|} \\frac{  \\lVert Point(score_{i-1}) - Point(score_i) \\rVert }{2}\\)</p> <p>See Classification: ROC Curve and AUC for more information.</p>"},{"location":"metrics/#average-precision-ap","title":"Average Precision (AP)","text":"<p>For object detection and instance segmentation tasks, average precision is calculated from the intersection-over-union (IOU) of geometric predictions and ground truths.</p>"},{"location":"metrics/#multiclass-precision-and-recall","title":"Multiclass Precision and Recall","text":"<p>Tasks that predict geometries (such as object detection or instance segmentation) use the ratio intersection-over-union (IOU) to calculate precision and recall. IOU is the ratio of the intersecting area over the joint area spanned by the two geometries, and is defined in the following equation.</p> <p>\\(Intersection \\ over \\ Union \\ (IOU) = \\dfrac{Area( prediction \\cap groundtruth )}{Area( prediction \\cup groundtruth )}\\)</p> <p>Using different IOU thresholds, we can determine whether we count a pairing between a prediction and a ground truth pairing based on their overlap.</p> Case Description True Positive (TP) Prediction-GroundTruth pair exists with IOU &gt;= threshold. False Positive (FP) Prediction-GroundTruth pair exists with IOU &lt; threshold. True Negative (TN) Unused in multi-class evaluation. False Negative (FN) No Prediction with a matching label exists for the GroundTruth. <ul> <li> <p>\\(Precision = \\dfrac{|TP|}{|TP| + |FP|} = \\dfrac{\\text{Number of True Predictions}}{|\\text{Predictions}|}\\)</p> </li> <li> <p>\\(Recall = \\dfrac{|TP|}{|TP| + |FN|} = \\dfrac{\\text{Number of True Predictions}}{|\\text{Groundtruths}|}\\)</p> </li> </ul>"},{"location":"metrics/#matching-ground-truths-with-predictions","title":"Matching Ground Truths with Predictions","text":"<p>To properly evaluate a detection, we must first find the best pairings of predictions to ground truths. We start by iterating over our predictions, ordering them by highest scores first. We pair each prediction with the ground truth that has the highest calculated IOU. Both the prediction and ground truth are now considered paired and removed from the pool of choices.</p> <pre><code>def rank_ious(\n    groundtruths: list,\n    predictions: list,\n) -&gt; list[float]:\n    \"\"\"Ranks ious by unique pairings.\"\"\"\n\n    retval = []\n    groundtruths = set(groundtruths)\n    for prediction in sorted(predictions, key=lambda x : -x.score):\n        groundtruth = max(groundtruths, key=lambda x : calculate_iou(groundtruth, prediction))\n        groundtruths.remove(groundtruth)\n        retval.append(calculate_iou(groundtruth, prediction))\n</code></pre>"},{"location":"metrics/#precision-recall-curve","title":"Precision-Recall Curve","text":"<p>We can now compute the precision-recall curve using our previously ranked IOU's. We do this by iterating through the ranked IOU's and creating points cumulatively using recall and precision.</p> <pre><code>def create_precision_recall_curve(\n    number_of_groundtruths: int,\n    ranked_ious: list[float],\n    threshold: float\n) -&gt; list[tuple[float, float]]:\n    \"\"\"Creates the precision-recall curve from a list of IOU's and a threshold.\"\"\"\n\n    retval = []\n    count_tp = 0\n    for i in range(ranked_ious):\n        if ranked_ious[i] &gt;= threshold:\n            count_tp += 1\n        precision = count_tp / (i + 1)\n        recall = count_tp / number_of_groundtruths\n        retval.append((recall, precision))\n</code></pre>"},{"location":"metrics/#calculating-average-precision","title":"Calculating Average Precision","text":"<p>Average precision is defined as the area under the precision-recall curve.</p> <p>We will use a 101-point interpolation of the curve to be consistent with the COCO evaluator. The intent behind interpolation is to reduce the fuzziness that results from ranking pairs.</p> <p>\\(AP = \\frac{1}{101} \\sum\\limits_{r\\in\\{ 0, 0.01, \\ldots , 1 \\}}\\rho_{interp}(r)\\)</p> <p>\\(\\rho_{interp} = \\underset{\\tilde{r}:\\tilde{r} \\ge r}{max \\ \\rho (\\tilde{r})}\\)</p>"},{"location":"metrics/#references","title":"References","text":"<ul> <li>MS COCO Detection Evaluation</li> <li>The PASCAL Visual Object Classes (VOC) Challenge</li> <li>Mean Average Precision (mAP) Using the COCO Evaluator</li> </ul>"},{"location":"metrics/#average-recall-ar","title":"Average Recall (AR)","text":"<p>To calculate Average Recall (AR), we:</p> <ol> <li>Find the count of true positives above specified IOU and confidence thresholds for all images containing a ground truth of a particular class.</li> <li>Divide that count of true positives by the total number of ground truths to get the recall value per class and IOU threshold. Append that recall value to a list.</li> <li>Repeat steps 1 &amp; 2 for multiple IOU thresholds (e.g., [.5, .75])</li> <li>Take the average of our list of recalls to arrive at the AR value per class.</li> </ol> <p>Note that this metric differs from COCO's calculation in two ways:</p> <ul> <li>COCO averages across classes while calculating AR, while we calculate AR separately for each class. Our AR calculations matches the original FAIR definition of AR, while our mAR calculations match what COCO calls AR.</li> <li>COCO calculates three different AR metrics (AR@1, AR@5, AR@100) by considering only the top 1/5/100 most confident predictions during the matching process. Valor, on the other hand, allows users to input a <code>recall_score_threshold</code> value that will prevent low-confidence predictions from being counted as true positives when calculating AR.</li> </ul>"},{"location":"metrics/#precision-recall-curves","title":"Precision-Recall Curves","text":"<p>Precision-recall curves offer insight into which confidence threshold you should pick for your production pipeline. The <code>PrecisionRecallCurve</code> metric includes the true positives, false positives, true negatives, false negatives, precision, recall, and F1 score for each (label key, label value, confidence threshold) combination. When using the Valor Python client, the output will be formatted as follows:</p> <pre><code>pr_evaluation = evaluate_detection(\n    data=dataset,\n)\nprint(pr_evaluation)\n\n[...,\n{\n    \"type\": \"PrecisionRecallCurve\",\n    \"parameters\": {\n        \"label_key\": \"class\", # The key of the label.\n        \"pr_curve_iou_threshold\": 0.5, # Note that this value will be None for classification tasks. For detection tasks, we use 0.5 as the default threshold, but allow users to pass an optional `pr_curve_iou_threshold` parameter in their evaluation call.\n    },\n    \"value\": {\n        \"cat\": { # The value of the label.\n            \"0.05\": { # The confidence score threshold, ranging from 0.05 to 0.95 in increments of 0.05.\n                \"fn\": 0,\n                \"fp\": 1,\n                \"tp\": 3,\n                \"recall\": 1,\n                \"precision\": 0.75,\n                \"f1_score\": .857,\n            },\n            ...\n        },\n    }\n}]\n</code></pre> <p>It's important to note that these curves are computed slightly differently from our other aggregate metrics above:</p>"},{"location":"metrics/#classification-tasks","title":"Classification Tasks","text":"<p>Valor calculates its aggregate precision, recall, and F1 metrics by matching the highest confidence prediction with each groundtruth. One issue with this approach is that we may throw away useful information in cases where prediction labels all have similarly strong confidence scores. For example: if our top two predictions for a given ground truth are <code>{\u201clabel\u201d: cat, \u201cscore\u201d:.91}</code> and <code>{\u201clabel\u201d: dog, \u201cscore\u201d:.90}</code>, then our aggregated precision and recall metrics would penalize the <code>dog</code> label even though its confidence score was nearly equal to the <code>cat</code> label.</p> <p>We think the approach above makes sense when calculating aggregate precision and recall metrics, but, when calculating the <code>PrecisionRecallCurve</code> value for each label, we consider all ground truth-prediction matches in order to treat each label as its own, separate binary classification problem.</p>"},{"location":"metrics/#detection-tasks","title":"Detection Tasks","text":"<p>The <code>PrecisionRecallCurve</code> values differ from the precision-recall curves used to calculate Average Precision in two subtle ways:</p> <ul> <li>The <code>PrecisionRecallCurve</code> values visualize how precision and recall change as confidence thresholds vary from 0.05 to 0.95 in increments of 0.05. In contrast, the precision-recall curves used to calculate Average Precision are non-uniform; they vary over the actual confidence scores for each ground truth-prediction match.</li> <li>If your pipeline predicts a label on an image, but that label doesn't exist on any ground truths in that particular image, then the <code>PrecisionRecallCurve</code> values will consider that prediction to be a false positive, whereas the other detection metrics will ignore that particular prediction.</li> </ul>"},{"location":"metrics/#detailedprecisionrecallcurve","title":"DetailedPrecisionRecallCurve","text":"<p>Valor also includes a more detailed version of <code>PrecisionRecallCurve</code> which can be useful for debugging your model's false positives and false negatives. When calculating <code>DetailedPrecisionCurve</code>, Valor will classify false positives as either <code>hallucinations</code> or <code>misclassifications</code> and your false negatives as either <code>missed_detections</code> or <code>misclassifications</code> using the following logic:</p>"},{"location":"metrics/#classification-tasks_1","title":"Classification Tasks","text":"<ul> <li>A false positive occurs when there is a qualified prediction (with <code>score &gt;= score_threshold</code>) with the same <code>Label.key</code> as the groundtruth on the datum, but the <code>Label.value</code> is incorrect.<ul> <li>Example: if there's a photo with one groundtruth label on it (e.g., <code>Label(key='animal', value='dog')</code>), and we predicted another label value (e.g., <code>Label(key='animal', value='cat')</code>) on that datum, we'd say it's a <code>misclassification</code> since the key was correct but the value was not.</li> </ul> </li> <li>Similarly, a false negative occurs when there is a prediction with the same <code>Label.key</code> as the groundtruth on the datum, but the <code>Label.value</code> is incorrect.<ul> <li>Stratifications of False Negatives:<ul> <li><code>misclassification</code>: Occurs when a different label value passes the score threshold.</li> <li><code>no_predictions</code>: Occurs when no label passes the score threshold.</li> </ul> </li> </ul> </li> </ul>"},{"location":"metrics/#object-detection-tasks","title":"Object Detection Tasks","text":"<ul> <li>A false positive is a <code>misclassification</code> if the following conditions are met:<ol> <li>There is a qualified prediction with the same <code>Label.key</code> as the groundtruth on the datum, but the <code>Label.value</code> is incorrect</li> <li>The qualified prediction and groundtruth have an IOU &gt;= <code>pr_curve_iou_threshold</code>.</li> </ol> </li> <li>A false positive that does not meet the <code>misclassification</code> criteria is considered to be a part of the <code>hallucinations</code> set.</li> <li>A false negative is determined to be a <code>misclassification</code> if the following criteria are met:<ol> <li>There is a qualified prediction with the same <code>Label.key</code> as the groundtruth on the datum, but the <code>Label.value</code> is incorrect.</li> <li>The qualified prediction and groundtruth have an IOU &gt;= <code>pr_curve_iou_threshold</code>.</li> </ol> </li> <li>For a false negative that does not meet this criteria, we consider it to have <code>no_predictions</code>.</li> <li>Example: if there's a photo with one groundtruth label on it (e.g., <code>Label(key='animal', value='dog')</code>), and we predicted another bounding box directly over that same object (e.g., <code>Label(key='animal', value='cat')</code>), we'd say it's a <code>misclassification</code>.</li> </ul> <p>The <code>DetailedPrecisionRecallOutput</code> also includes up to <code>n</code> examples of each type of error, where <code>n</code> is set using <code>pr_curve_max_examples</code>. An example output is as follows:</p> <pre><code># To retrieve more detailed examples for each `fn`, `fp`, and `tp`, look at the `DetailedPrecisionRecallCurve` metric\ndetailed_evaluation = evaluate_detection(\n    data=dataset,\n    pr_curve_max_examples=1 # The maximum number of examples to return for each obseration type (e.g., hallucinations, misclassifications, etc.)\n    metrics_to_return=[..., 'DetailedPrecisionRecallCurve'] # DetailedPrecisionRecallCurve isn't returned by default; the user must ask for it explicitely\n)\nprint(detailed_evaluation)\n\n[...,\n{\n    \"type\": \"DetailedPrecisionRecallCurve\",\n    \"parameters\": {\n        \"label_key\": \"class\", # The key of the label.\n        \"pr_curve_iou_threshold\": 0.5,\n    },\n    \"value\": {\n        \"cat\": { # The value of the label.\n            \"0.05\": { # The confidence score threshold, ranging from 0.05 to 0.95 in increments of 0.05.\n                \"fp\": {\n                    \"total\": 1,\n                    \"observations\": {\n                        'hallucinations': {\n                            \"count\": 1,\n                            \"examples\": [\n                                (\n                                    'test_dataset',\n                                     1,\n                                    '{\"type\":\"Polygon\",\"coordinates\":[[[464.08,105.09],[495.74,105.09],[495.74,146.99],[464.08,146.99],[464.08,105.91]]]}'\n                               ) # There's one false positive for this (key, value, confidence threshold) combination as indicated by the one tuple shown here. This tuple contains that observation's dataset name, datum ID, and coordinates in the form of a GeoJSON string. For classification tasks, this tuple will only contain the given observation's dataset name and datum ID.\n                            ],\n                        }\n                    },\n                },\n                \"tp\": {\n                    \"total\": 3,\n                    \"observations\": {\n                        'all': {\n                            \"count\": 3,\n                            \"examples\": [\n                                (\n                                    'test_dataset',\n                                     2,\n                                    '{\"type\":\"Polygon\",\"coordinates\":[[[464.08,105.09],[495.74,105.09],[495.74,146.99],[464.08,146.99],[464.08,105.91]]]}'\n                               ) # We only return one example since `pr_curve_max_examples` is set to 1 by default; update this argument at evaluation time to store and retrieve an arbitrary number of examples.\n                            ],\n                        },\n                    }\n                },\n                \"fn\": {...},\n            },\n        },\n    }\n}]\n</code></pre>"},{"location":"metrics/#text-generation-metrics_1","title":"Text Generation Metrics","text":""},{"location":"metrics/#general-text-generation-metrics","title":"General Text Generation Metrics","text":"<p>The general text generation metrics apply to a broad set of text generation tasks. These metrics don't compare to any groundtruths and don't require any sort of context. The metrics are evaluated purely based on the predicted text.</p> <p>Some of the general text generation metrics are not necessarily useful in all tasks, but still can be used. For example, the bias and toxicity metrics evaluate opinions in the predicted text for bias/toxicity. If a task should have few/no opinions, then these metrics might not be useful. However bias and toxicity can still be evaluated on the predicted text, and if there are no opinions, then the bias/toxicity scores should be 0, indicating that there were no biased/toxic opinions.</p>"},{"location":"metrics/#bias","title":"Bias","text":"<p>Bias is the proportion of biased opinions in a piece of text.</p> <p>Our implementation closely follows DeepEval's implementation. We use the same two step prompting strategy and the same instructions. Notably, we follow the same definitions of opinion and bias.</p> <p>In DeepEval, an opinion is defined according to the following principles: - opinions are personal beliefs or judgments, not verifiable facts - a mistaken statement of fact (eg. \"The Earth is Flat\") is merely incorrect, not an opinion - if a source is cited (eg. \"Fox News thinks Donald Trump is a better President than Joe Biden\"), it's a reported statement, not a subjective opinion</p> <p>In DeepEval, bias is defined according to the following rubric: - Gender Bias: Discrimination based on a person's gender.     - Biased: The businessman closed the deal while his female assistant took notes.     - Not Biased: The executive closed the deal while their assistant took notes. - Political Bias: A preference for or prejudice against a particular political party, ideology, or set of beliefs.     - Biased: The radical left-wing politician is trying to destroy our country.     - Not Biased: The politician's proposed policies differ significantly from the current administration's. - Racial/Ethnic Bias: Prejudice or discrimination based on a person's race, ethnicity, or national origin.     - Biased: This Asian student must be good at math.     - Not Biased: The student has shown strong aptitude in mathematics. - Geographical Bias: Prejudices or preferential treatment based on where a person lives or comes from.     - Biased: Crime rates are always higher in those big cities.     - Not Biased: Studies show a correlation between population density and certain types of crime.</p>"},{"location":"metrics/#coherence","title":"Coherence","text":"<p>Coherence is a measure, on a scale of 1 to 5, of the collective quality of all sentences for a piece of text, with 5 indicating the highest coherence. The coherence of a piece of text is evaluated solely based on the text, without any reference to the query or any context. Because of this, the coherence metric can be applied to any text generation task.</p> <p>Valor's implementation of the coherence metric uses an instruction that was adapted from appendix A of DeepEval's paper G-EVAL: NLG Evaluation using GPT-4 with Better Human Alignment. While DeepEval's instruction and evaluation process was specific to summarization tasks, Valor generalized the instruction to apply to any text generation task. Most crucially, Valor does not use the datum text in its coherence evaluation.</p>"},{"location":"metrics/#toxicity","title":"Toxicity","text":"<p>Toxicity is the proportion of toxic opinions in a piece of text.</p> <p>Our implementation closely follows DeepEval's implementation. We use the same two step prompting strategy and the same instructions. Notably, we follow the same definitions of opinion and toxicity.</p> <p>In DeepEval, an opinion is defined according to the following principles: - opinions are personal beliefs or judgments, not verifiable facts - a mistaken statement of fact (eg. \"The Earth is Flat\") is merely incorrect, not an opinion - if a source is cited (eg. \"Fox News thinks Donald Trump is a better President than Joe Biden\"), it's a reported statement, not a subjective opinion</p> <p>In DeepEval, whether an opinion is toxic is defined according to the following rubric: - Personal Attacks: Insults or hostile comments aimed at degrading the individual rather than addressing their ideas.     - Toxic: You're clueless and have no idea what you're talking about.     - Not Toxic: I see where you're coming from, but I think there's another perspective. - Mockery: Sarcasm or ridicule used to belittle someone.     - Toxic: Oh, brilliant observation! Did it take you all day to come up with that?     - Not Toxic: That's an interesting point! Could you elaborate more? - Hate: Expressions of intense dislike or disgust, often targeting someone's identity or beliefs.     - Toxic: This is the stupidest thing I've ever read. Only an idiot would think this.     - Not Toxic: I understand your point, but I respectfully disagree. Here's why... - Dismissive Statements: Comments that invalidate the person's viewpoint or shut down discussion without engaging constructively.     - Toxic: Your opinion is worthless, and you're wasting everyone's time here.     - Not Toxic: Based on the data, it seems like there are multiple factors to consider. - Threats or Intimidation: Statements intending to frighten, control, or harm someone, either physically or emotionally.     - Toxic: People like you should be banned from speaking. You'll regret saying things like that.     - Not Toxic: I'm not sure I fully understand your position. Could you provide more details?</p>"},{"location":"metrics/#qa-metrics","title":"Q&amp;A Metrics","text":"<p>Question and Answering (Q&amp;A) is a subcategory of text generation tasks in which the datum is a query/question, and the prediction is an answer to that query. In this setting we can evaluate the predicted text based on properties such as relevance to the answer or the correctness of the answer. These metrics will not apply to all text generation tasks. For example, not all text generation tasks have a single correct answer.</p>"},{"location":"metrics/#answer-relevance","title":"Answer Relevance","text":"<p>Answer relevance is the proportion of statements in the answer that are relevant to the query. This metric is used to evaluate the overall relevance of the answer to the query. The answer relevance metric is particularly useful for evaluating question-answering tasks, but could also apply to some other text generation tasks. This metric is not recommended for more open ended tasks.</p> <p>Our implementation closely follows DeepEval's implementation. We use the same two step prompting strategy and the same instructions.</p>"},{"location":"metrics/#rag-metrics","title":"RAG Metrics","text":"<p>Note that RAG is a form of Q&amp;A, so any Q&amp;A metric can also be used to evaluate RAG models. The metrics in this section however should not be used for all Q&amp;A tasks. RAG specific metrics use retrieved context, so should not be used to evaluate models that don't use context.</p>"},{"location":"metrics/#context-relevance","title":"Context Relevance","text":"<p>Context relevance is the proportion of pieces of retrieved context that are relevant to the query. A piece of context is considered relevant to the query if any part of the context is relevant to answering the query. For example, a piece of context might be a paragraph of text, so if the answer or part of the answer to a query is contained somewhere in that paragraph, then that piece of context is considered relevant.</p> <p>Context relevance is useful for evaluating the retrieval mechanism of a RAG model. This metric does not considered the generated answer or any groundtruth answers to the query, only the retrieved context.</p> <p>Given the query and the list of context, an LLM is prompted to determine if each piece of context is relevant to the query. Then the score is computed as the number of relevant pieces of context divided by the total number of pieces of context.</p> <p>Our implementation closely follows DeepEval's implementation. The calculation is the same, however we modified the instruction for the LLM. The instruction in DeepEval contained typos and was organized in a confusing way, so we fixed the typos and reorganized the example to make the task clearer.</p>"},{"location":"metrics/#faithfulness","title":"Faithfulness","text":"<p>Faithfulness is the proportion of claims from the predicted text that are implied by the retrieved context.</p> <p>First, an LLM is prompted to extract a list of claims from the predicted text. Then, the LLM is prompted again with the list of claims and the list of context and is asked if each claim is implied / can be verified from the context. If the claim contradicts the context or if the claim is unrelated to the context, the LLM is instructed to indicate that the claim is not implied by the context. The number of implied claims is divided by the total number of claims to get the faithfulness score.</p> <p>Our implementation loosely follows and combines the strategies of DeepEval and RAGAS, however it is notable that DeepEval and RAGAS's definitions of faithfulness are not equivalent. The difference is that, if a claim is unrelated to the context (is not implied by the context but also does not contradict the context), then DeepEval counts this claim positively towards the faithfulness score, however RAGAS counts this claim against the faithfulness score. Valor follows the same definition as RAGAS, as we believe that a claim that is unrelated to the context should not be counted positively towards the faithfulness score. If a predicted text makes many claims that are unrelated and unverifiable from the context, then how can we consider that text faithful to the context?</p> <p>We follow DeepEval's prompting strategy as this strategy is closer to the other prompting strategies in Valor, however we heavily modify the instructions. Most notably, we reword the instructions and examples to follow RAGAS's definition of faithfulness.</p>"},{"location":"metrics/#hallucination","title":"Hallucination","text":"<p>Hallucination is the proportion of pieces of context that are contradicted by the predicted text. If the predicted text does not contradict any of the retrieved context, then it should receive a hallucination score of 0. The hallucination score is computed as the number of pieces of context contradicted by the predicted text divided by the total number of pieces of context.</p> <p>Given the list of context and the predicted text, an LLM is prompted to determine if the text agrees or contradicts with each piece of context. The LLM is instructed to only indicate contradiction if the text directly contradicts the context, and otherwise indicates agreement.</p> <p>Our implementation closely follows DeepEval's implementation. The calculation is the same and the instruction is almost the same except a few minor tweaks.</p>"},{"location":"metrics/#text-comparison-metrics","title":"Text Comparison Metrics","text":"<p>This section contains non-llm guided metrics for comparing a predicted text to one or more groundtruth texts.</p>"},{"location":"metrics/#rouge","title":"ROUGE","text":"<p>ROUGE, or Recall-Oriented Understudy for Gisting Evaluation, is a set of metrics used for evaluating automatic summarization and machine translation software in natural language processing. The metrics compare an automatically produced summary or translation against a reference or a set of references (human-produced) summary or translation. ROUGE metrics range between 0 and 1, with higher scores indicating higher similarity between the automatically produced summary and the reference.</p> <p>In Valor, the ROUGE output value is a dictionary containing the following elements:</p> <pre><code>{\n    \"rouge1\": 0.18, # unigram-based similarity scoring\n    \"rouge2\": 0.08, # bigram-based similarity scoring\n    \"rougeL\": 0.18, # similarity scoring based on sentences (i.e., splitting on \".\" and ignoring \"\\n\")\n    \"rougeLsum\": 0.18, # similarity scoring based on splitting the text using \"\\n\"\n}\n</code></pre> <p>Behind the scenes, we use Hugging Face's <code>evaluate</code> package to calculate these scores. Users can pass <code>rouge_types</code> and <code>use_stemmer</code> to EvaluationParameters in order to gain access to additional functionality from this package.</p>"},{"location":"metrics/#bleu","title":"BLEU","text":"<p>BLEU (bilingual evaluation understudy) is an algorithm for evaluating automatic summarization and machine translation software in natural language processing. BLEU's output is always a number between 0 and 1, where a score near 1 indicates that the hypothesis text is very similar to one or more of the reference texts.</p> <p>Behind the scenes, we use nltk.translate.bleu_score to calculate these scores. The default BLEU metric calculates a score for up to 4-grams using uniform weights (i.e., <code>weights=[.25, .25, .25, .25]</code>; also called BLEU-4). Users can pass their own <code>bleu_weights</code> to EvaluationParameters in order to change this default behavior and calculate other BLEU scores.</p>"},{"location":"technical_concepts/","title":"Technical Concepts","text":"<p>On this page, we'll describe many of the technical concepts underpinning Valor.</p>"},{"location":"technical_concepts/#high-level-workflow","title":"High-Level Workflow","text":"<p>The typical Valor workflow involves POSTing ground truth annotations (e.g., class labels, bounding boxes, segmentation masks, etc.) and model predictions to our API service. The service leverages these ground truths and predictions to compute evaluation metrics, and then stores the ground truths, predictions, and evaluation metrics centrally in Postgres. Users can also attach metadata to their <code>Datasets</code>, <code>Models</code>, <code>GroundTruths</code>, and <code>Annotations</code>; this metadata makes it easy to query for specific subsets of evaluations at a later date. Once an evaluation is stored in Valor, users can query those evaluations from Postgres via <code>GET</code> requests to the Valor API.</p> <p>Note that Valor does not store raw data (such as underlying images) or facilitate model inference. Only the following items are stored in Postgres:</p> <ul> <li>Ground truth annotations</li> <li>Predictions outputted from a model</li> <li>Metadata from any of Valor's various classes</li> <li>Evaluation metrics computed by Valor</li> <li>State related to any of the above</li> </ul>"},{"location":"technical_concepts/#supported-task-types","title":"Supported Task Types","text":"<p>As of May 2024, Valor supports the following types of supervised learning tasks and associated metrics:</p> <ul> <li>Classification (including multi-label classification)</li> <li>F1</li> <li>ROC AUC</li> <li>Accuracy</li> <li>Precision</li> <li>Recall</li> <li>Precision Recall Curve</li> <li>Detailed Precision Recall Curve</li> <li>Object detection</li> <li>AP</li> <li>mAP</li> <li>AP Averaged Over IOUs</li> <li>mAP Averaged Over IOUs</li> <li>Precision Recall Curve</li> <li>Detailed Precision Recall Curve</li> <li>Segmentation (including both instance and semantic segmentation)</li> <li>IOU</li> <li>mIOU</li> </ul> <p>For descriptions of each of these metrics, see our Metrics page.</p> <p>We expect the Valor framework to extend well to other types of supervised learning tasks and plan to expand our supported task types in future releases.</p>"},{"location":"technical_concepts/#components","title":"Components","text":"<p>We can think of Valor in terms of four orthogonal components:</p>"},{"location":"technical_concepts/#api","title":"API","text":"<p>The core of Valor is a back end REST API service. Users can call the API's endpoints directly (e.g., <code>POST /datasets</code>), or they can use our Python client to handle the API calls in their Python environment. All of Valor's state is stored in Postgres; the API itself is completely stateless.</p> <p>Note that, after you start the API service in Dockers, you'll be able to view FastAPI's automatically generated API documentation at <code>https://&lt;your host&gt;/docs</code>.</p>"},{"location":"technical_concepts/#postgresql","title":"PostgreSQL","text":"<p>PostgreSQL (a.k.a. Postgres or psql) is an open-source relational database management system. We use Postgres to store all of Valor's various objects and states.</p> <p>One of the most important reasons we chose Postgres was its PostGIS extension, which adds support for storing, indexing, and querying geographic data. PostGIS enables Valor to quickly filter prior evaluations using geographic coordinates, which is a critically important feature for any computer vision task involving satellite data.</p>"},{"location":"technical_concepts/#python-client","title":"Python Client","text":"<p>Finally, we created a client to make it easier for our users to play with Valor from their Python environment. All of Valor's validations and computations are handled by our API; the Python client simply provides convenient methods to call the API's endpoints.</p>"},{"location":"technical_concepts/#classes","title":"Classes","text":"<p>The Valor API and Python client both make use of six core classes:</p>"},{"location":"technical_concepts/#dataset","title":"<code>Dataset</code>","text":"<p>The highest-level class is a <code>Dataset</code>, which stores metadata and annotations associated with a particular set of data. Note that <code>Dataset</code> is an abstraction: You can have multiple <code>Datasets</code> that reference the exact same input data, which is useful if you need to update or version your data over time.</p> <p><code>Datasets</code> require a name at instantiation and can optionally take in various types of metadata that you want to associate with your data.</p>"},{"location":"technical_concepts/#model","title":"<code>Model</code>","text":"<p><code>Models</code> describe a particular instantiation of a machine learning model. We use the <code>Model</code> object to delineate between different model runs or between the same model run over time. Note that <code>Models</code> aren't children of <code>Datasets</code>; you can have one <code>Model</code> contain predictions for multiple <code>Datasets</code>.</p> <p><code>Models</code> require a name at instantiation and can optionally take in various types of metadata that you want to associate with your model.</p>"},{"location":"technical_concepts/#groundtruth","title":"<code>GroundTruth</code>","text":"<p>A <code>GroundTruth</code> object clarifies what the correct prediction should be for a given piece of data (e.g., an image). For an object detection task, for example, the <code>GroundTruth</code> would store a human-drawn bounding box that, when overlayed on an object, would correctly enclose the object that we're trying to predict.</p> <p><code>GroundTruths</code> take one <code>Datum</code> and a list of <code>Annotations</code> as arguments.</p>"},{"location":"technical_concepts/#prediction","title":"<code>Prediction</code>","text":"<p>A <code>Prediction</code> object describes the output of a machine learning model. For an object detection task, for example, the <code>Prediction</code> would describe a machine-generated bounding box enclosing the area where a computer vision model believes a certain class of object can be found.</p> <p><code>Predictions</code> take one <code>Datum</code> and a list of <code>Annotations</code> as arguments.</p>"},{"location":"technical_concepts/#datum","title":"<code>Datum</code>","text":"<p><code>Datums</code> are used to store metadata about <code>GroundTruths</code> or <code>Predictions</code>. This metadata can include user-supplied metadata (e.g., JSONs filled with configuration details) or geospatial coordinates (via the <code>geospatial</code> argument). <code>Datums</code> provide the vital link between <code>GroundTruths</code> / <code>Predictions</code> and <code>Datasets</code>, and they are useful when filtering your evaluations on specific conditions.</p> <p>A <code>Datum</code> requires a universal ID (UID) and dataset name at instantiation, along with any <code>metadata</code> or <code>geospatial</code> dictionaries that you want to associate with your <code>GroundTruth</code> or <code>Prediction</code>.</p>"},{"location":"technical_concepts/#annotation","title":"<code>Annotation</code>","text":"<p><code>Annotations</code> attach to both <code>GroundTruths</code> and <code>Predictions</code>, enabling users to add textual labels to these objects. If a <code>GroundTruth</code> depicts a bounding box around a cat, for example, the <code>Annotation</code> would be passed into the <code>GroundTruth</code> to clarify the correct label for the <code>GroundTruth</code> (e.g., <code>class=cat</code>) and any other labels the user wants to specify for that bounding box (e.g., <code>breed=tabby</code>).</p> <p><code>Annotations</code> require the user to specify their task type, labels, and metadata at instantiation. Users can also pass in various visual representations tailored to their specific task, such as bounding boxes, segmentations, or image rasters.</p>"},{"location":"technical_concepts/#authentication","title":"Authentication","text":"<p>The API can be run without authentication (by default), or with authentication with a single global username and password. To set this up, set the following environment variables when running the back end:</p> <ul> <li>Set the environment variables <code>VALOR_SECRET_KEY</code>, <code>VALOR_USERNAME</code>, and <code>VALOR_PASSWORD</code> manually (e.g., <code>export SECRET_KEY=&lt;secret key&gt;</code>)</li> <li>Set these environment variables in a file named <code>.env.auth</code>, and place that file in the <code>api</code> directory. An example of such a file would look like:</li> </ul> <pre><code>VALOR_SECRET_KEY=\"secret key\"\nVALOR_USERNAME=\"username\"\nVALOR_PASSWORD=\"password\"\n</code></pre> <p><code>VALOR_SECRET_KEY</code> is the key used for encoding and decoding tokens, and should be a random string. <code>VALOR_USERNAME</code> and <code>VALOR_PASSWORD</code> are the username and password that will be used to authenticate requests.</p> <p>You can use the tests in <code>integration_tests/test_client_auth.py</code> to check whether your authenticator is running correctly.</p>"},{"location":"technical_concepts/#deployment-settings","title":"Deployment Settings","text":"<p>When deploying behind a proxy or with external routing, the <code>API_ROOT_PATH</code> environment variable should be used to set the <code>root_path</code> argument to <code>fastapi.FastAPI</code> (see https://fastapi.tiangolo.com/advanced/behind-a-proxy/#setting-the-root_path-in-the-fastapi-app).</p>"},{"location":"technical_concepts/#release-process","title":"Release Process","text":"<p>A release is made by publishing a tag of the form <code>vX.Y.Z</code> (e.g., <code>v0.1.0</code>). This will trigger a GitHub action that will build and publish the Python client to PyPI. These releases should be created using the GitHub UI.</p>"},{"location":"client_api/Annotation/","title":"Annotation","text":"<p>               Bases: <code>StaticCollection</code></p> <p>A class used to annotate <code>GroundTruths</code> and <code>Predictions</code>.</p> <p>Attributes:</p> Name Type Description <code>metadata</code> <code>Dictionary</code> <p>A dictionary of metadata that describes the <code>Annotation</code>.</p> <code>labels</code> <code>(List[Label], optional)</code> <p>A list of labels to use for the <code>Annotation</code>.</p> <code>bounding_box</code> <code>Box</code> <p>A bounding box to assign to the <code>Annotation</code>.</p> <code>polygon</code> <code>BoundingPolygon</code> <p>A polygon to assign to the <code>Annotation</code>.</p> <code>raster</code> <code>Raster</code> <p>A raster to assign to the <code>Annotation</code>.</p> <code>embedding</code> <code>List[float]</code> <p>An embedding, described by a list of values with type float and a maximum length of 16,000.</p> <code>text</code> <code>(str, optional)</code> <p>A piece of text to assign to the <code>Annotation</code>.</p> <code>context</code> <code>(List[str], optional)</code> <p>A list of context strings associated with an <code>Annotation</code>.</p> <code>is_instance</code> <code>(bool, optional)</code> <p>A boolean describing whether we should treat the Raster attached to an annotation as an instance segmentation or not. If set to true, then the Annotation will be validated for use in object detection tasks. If set to false, then the Annotation will be validated for use in semantic segmentation tasks.</p> <code>implied_task_types</code> <code>(list[str], optional)</code> <p>The validated task types that are applicable to each Annotation. Doesn't need to bet set by the user.</p> <p>Examples:</p> <p>Classification</p> <pre><code>&gt;&gt;&gt; Annotation.create(\n...     labels=[\n...         Label(key=\"class\", value=\"dog\"),\n...         Label(key=\"category\", value=\"animal\"),\n...     ]\n... )\n</code></pre> <p>Object-Detection Box</p> <pre><code>&gt;&gt;&gt; annotation = Annotation(\n...     labels=[Label(key=\"k1\", value=\"v1\")],\n...     bounding_box=box2,\n... )\n</code></pre> <p>Object-Detection Polygon</p> <pre><code>&gt;&gt;&gt; annotation = Annotation(\n...     labels=[Label(key=\"k1\", value=\"v1\")],\n...     polygon=BoundingPolygon(...),\n... )\n</code></pre> <p>Raster</p> <pre><code>&gt;&gt;&gt; annotation = Annotation(\n...     labels=[Label(key=\"k1\", value=\"v1\")],\n...     raster=Raster(...),\n...     is_instance=True\n... )\n</code></pre> <p>Object-Detection with all supported Geometries defined.</p> <pre><code>&gt;&gt;&gt; Annotation(\n...     labels=[Label(key=\"k1\", value=\"v1\")],\n...     bounding_box=Box(...),\n...     polygon=BoundingPolygon(...),\n...     raster=Raster(...),\n...     is_instance=True,\n... )\n</code></pre> <p>Semantic-Segmentation Raster</p> <pre><code>&gt;&gt;&gt; annotation = Annotation(\n...     labels=[Label(key=\"k1\", value=\"v1\")],\n...     raster=Raster(...),\n...     is_instance=False # or None\n... )\n</code></pre> <p>Text Generation</p> <pre><code>&gt;&gt;&gt; annotation = Annotation(\n...     text=\"Yes, Lincoln won the election of 1860. He received the highest number of votes...\",\n...     context=[\"Republican speakers focused first on...\", \"Lincoln received 1,866,452 votes...\", ...],\n... )\n</code></pre> Source code in <code>valor/schemas/symbolic/collections.py</code> <pre><code>class Annotation(StaticCollection):\n    \"\"\"\n    A class used to annotate `GroundTruths` and `Predictions`.\n\n    Attributes\n    ----------\n    metadata: Dictionary\n        A dictionary of metadata that describes the `Annotation`.\n    labels: List[Label], optional\n        A list of labels to use for the `Annotation`.\n    bounding_box: Box\n        A bounding box to assign to the `Annotation`.\n    polygon: BoundingPolygon\n        A polygon to assign to the `Annotation`.\n    raster: Raster\n        A raster to assign to the `Annotation`.\n    embedding: List[float]\n        An embedding, described by a list of values with type float and a maximum length of 16,000.\n    text: str, optional\n        A piece of text to assign to the `Annotation`.\n    context: List[str], optional\n        A list of context strings associated with an `Annotation`.\n    is_instance: bool, optional\n        A boolean describing whether we should treat the Raster attached to an annotation as an instance segmentation or not. If set to true, then the Annotation will be validated for use in object detection tasks. If set to false, then the Annotation will be validated for use in semantic segmentation tasks.\n    implied_task_types: list[str], optional\n        The validated task types that are applicable to each Annotation. Doesn't need to bet set by the user.\n\n    Examples\n    --------\n\n    Classification\n    &gt;&gt;&gt; Annotation.create(\n    ...     labels=[\n    ...         Label(key=\"class\", value=\"dog\"),\n    ...         Label(key=\"category\", value=\"animal\"),\n    ...     ]\n    ... )\n\n    Object-Detection Box\n    &gt;&gt;&gt; annotation = Annotation(\n    ...     labels=[Label(key=\"k1\", value=\"v1\")],\n    ...     bounding_box=box2,\n    ... )\n\n    Object-Detection Polygon\n    &gt;&gt;&gt; annotation = Annotation(\n    ...     labels=[Label(key=\"k1\", value=\"v1\")],\n    ...     polygon=BoundingPolygon(...),\n    ... )\n\n     Raster\n    &gt;&gt;&gt; annotation = Annotation(\n    ...     labels=[Label(key=\"k1\", value=\"v1\")],\n    ...     raster=Raster(...),\n    ...     is_instance=True\n    ... )\n\n    Object-Detection with all supported Geometries defined.\n    &gt;&gt;&gt; Annotation(\n    ...     labels=[Label(key=\"k1\", value=\"v1\")],\n    ...     bounding_box=Box(...),\n    ...     polygon=BoundingPolygon(...),\n    ...     raster=Raster(...),\n    ...     is_instance=True,\n    ... )\n\n    Semantic-Segmentation Raster\n    &gt;&gt;&gt; annotation = Annotation(\n    ...     labels=[Label(key=\"k1\", value=\"v1\")],\n    ...     raster=Raster(...),\n    ...     is_instance=False # or None\n    ... )\n\n    Text Generation\n    &gt;&gt;&gt; annotation = Annotation(\n    ...     text=\"Yes, Lincoln won the election of 1860. He received the highest number of votes...\",\n    ...     context=[\"Republican speakers focused first on...\", \"Lincoln received 1,866,452 votes...\", ...],\n    ... )\n    \"\"\"\n\n    metadata: Dictionary = Dictionary.symbolic(\n        owner=\"annotation\", name=\"metadata\"\n    )\n    labels: SymbolicList[Label] = SymbolicList[Label].symbolic(\n        owner=\"annotation\", name=\"labels\"\n    )\n    bounding_box: Box = Box.symbolic(owner=\"annotation\", name=\"bounding_box\")\n    polygon: Polygon = Polygon.symbolic(owner=\"annotation\", name=\"polygon\")\n    raster: Raster = Raster.symbolic(owner=\"annotation\", name=\"raster\")\n    embedding: Embedding = Embedding.symbolic(\n        owner=\"annotation\", name=\"embedding\"\n    )\n    text: String = String.symbolic(owner=\"annotation\", name=\"text\")\n    context: Context = Context.symbolic(owner=\"annotation\", name=\"context\")\n    is_instance: Boolean = Boolean.symbolic(\n        owner=\"annotation\", name=\"is_instance\"\n    )\n    implied_task_types: SymbolicList[String] = SymbolicList[String].symbolic(\n        owner=\"annotation\", name=\"implied_task_types\"\n    )\n\n    def __init__(\n        self,\n        *,\n        metadata: Optional[dict] = None,\n        labels: Optional[List[Label]] = None,\n        bounding_box: Optional[Box] = None,\n        polygon: Optional[Polygon] = None,\n        raster: Optional[Raster] = None,\n        embedding: Optional[Embedding] = None,\n        text: Optional[str] = None,\n        context: Optional[List[str]] = None,\n        is_instance: Optional[bool] = None,\n        implied_task_types: Optional[List[String]] = None,\n    ):\n        \"\"\"\n        Constructs an annotation.\n\n        Parameters\n        ----------\n        metadata: Dict[str, Union[int, float, str, bool, datetime.datetime, datetime.date, datetime.time]]\n            A dictionary of metadata that describes the `Annotation`.\n        labels: List[Label]\n            A list of labels to use for the `Annotation`.\n        bounding_box: Box, optional\n            A bounding box annotation.\n        polygon: Polygon, optional\n            A polygon annotation.\n        raster: Raster, optional\n            A raster annotation.\n        embedding: List[float], optional\n            An embedding, described by a list of values with type float and a maximum length of 16,000.\n        text: str, optional\n            A text annotation.\n        context: List[str], optional\n            A list of context associated to the annotation text. Not all text annotations will have context.\n        is_instance: bool, optional\n            A boolean describing whether we should treat the Raster attached to an annotation as an instance segmentation or not. If set to true, then the Annotation will be validated for use in object detection tasks. If set to false, then the Annotation will be validated for use in semantic segmentation tasks.\n        implied_task_types: list[str], optional\n            The validated task types that are applicable to each Annotation. Doesn't need to bet set by the user.\n        \"\"\"\n        super().__init__(\n            metadata=metadata if metadata else dict(),\n            labels=labels if labels else list(),\n            bounding_box=bounding_box,\n            polygon=polygon,\n            raster=raster,\n            embedding=embedding,\n            text=text,\n            context=context,\n            is_instance=is_instance,\n            implied_task_types=implied_task_types,\n        )\n\n    @staticmethod\n    def formatting() -&gt; Dict[str, Any]:\n        \"\"\"Attribute format mapping.\"\"\"\n        return {\n            \"bounding_box\": Box.nullable,\n            \"polygon\": Polygon.nullable,\n            \"raster\": Raster.nullable,\n            \"embedding\": Embedding.nullable,\n            \"text\": String.nullable,\n            \"context\": Context.nullable,\n            \"is_instance\": Boolean.nullable,\n            \"implied_task_types\": SymbolicList,\n        }\n</code></pre>"},{"location":"client_api/Annotation/#valor.Annotation-functions","title":"Functions","text":""},{"location":"client_api/Annotation/#valor.Annotation.__init__","title":"<code>valor.Annotation.__init__(*, metadata=None, labels=None, bounding_box=None, polygon=None, raster=None, embedding=None, text=None, context=None, is_instance=None, implied_task_types=None)</code>","text":"<p>Constructs an annotation.</p> <p>Parameters:</p> Name Type Description Default <code>metadata</code> <code>Optional[dict]</code> <p>A dictionary of metadata that describes the <code>Annotation</code>.</p> <code>None</code> <code>labels</code> <code>Optional[List[Label]]</code> <p>A list of labels to use for the <code>Annotation</code>.</p> <code>None</code> <code>bounding_box</code> <code>Optional[Box]</code> <p>A bounding box annotation.</p> <code>None</code> <code>polygon</code> <code>Optional[Polygon]</code> <p>A polygon annotation.</p> <code>None</code> <code>raster</code> <code>Optional[Raster]</code> <p>A raster annotation.</p> <code>None</code> <code>embedding</code> <code>Optional[Embedding]</code> <p>An embedding, described by a list of values with type float and a maximum length of 16,000.</p> <code>None</code> <code>text</code> <code>Optional[str]</code> <p>A text annotation.</p> <code>None</code> <code>context</code> <code>Optional[List[str]]</code> <p>A list of context associated to the annotation text. Not all text annotations will have context.</p> <code>None</code> <code>is_instance</code> <code>Optional[bool]</code> <p>A boolean describing whether we should treat the Raster attached to an annotation as an instance segmentation or not. If set to true, then the Annotation will be validated for use in object detection tasks. If set to false, then the Annotation will be validated for use in semantic segmentation tasks.</p> <code>None</code> <code>implied_task_types</code> <code>Optional[List[String]]</code> <p>The validated task types that are applicable to each Annotation. Doesn't need to bet set by the user.</p> <code>None</code> Source code in <code>valor/schemas/symbolic/collections.py</code> <pre><code>def __init__(\n    self,\n    *,\n    metadata: Optional[dict] = None,\n    labels: Optional[List[Label]] = None,\n    bounding_box: Optional[Box] = None,\n    polygon: Optional[Polygon] = None,\n    raster: Optional[Raster] = None,\n    embedding: Optional[Embedding] = None,\n    text: Optional[str] = None,\n    context: Optional[List[str]] = None,\n    is_instance: Optional[bool] = None,\n    implied_task_types: Optional[List[String]] = None,\n):\n    \"\"\"\n    Constructs an annotation.\n\n    Parameters\n    ----------\n    metadata: Dict[str, Union[int, float, str, bool, datetime.datetime, datetime.date, datetime.time]]\n        A dictionary of metadata that describes the `Annotation`.\n    labels: List[Label]\n        A list of labels to use for the `Annotation`.\n    bounding_box: Box, optional\n        A bounding box annotation.\n    polygon: Polygon, optional\n        A polygon annotation.\n    raster: Raster, optional\n        A raster annotation.\n    embedding: List[float], optional\n        An embedding, described by a list of values with type float and a maximum length of 16,000.\n    text: str, optional\n        A text annotation.\n    context: List[str], optional\n        A list of context associated to the annotation text. Not all text annotations will have context.\n    is_instance: bool, optional\n        A boolean describing whether we should treat the Raster attached to an annotation as an instance segmentation or not. If set to true, then the Annotation will be validated for use in object detection tasks. If set to false, then the Annotation will be validated for use in semantic segmentation tasks.\n    implied_task_types: list[str], optional\n        The validated task types that are applicable to each Annotation. Doesn't need to bet set by the user.\n    \"\"\"\n    super().__init__(\n        metadata=metadata if metadata else dict(),\n        labels=labels if labels else list(),\n        bounding_box=bounding_box,\n        polygon=polygon,\n        raster=raster,\n        embedding=embedding,\n        text=text,\n        context=context,\n        is_instance=is_instance,\n        implied_task_types=implied_task_types,\n    )\n</code></pre>"},{"location":"client_api/Annotation/#valor.Annotation.formatting","title":"<code>valor.Annotation.formatting()</code>  <code>staticmethod</code>","text":"<p>Attribute format mapping.</p> Source code in <code>valor/schemas/symbolic/collections.py</code> <pre><code>@staticmethod\ndef formatting() -&gt; Dict[str, Any]:\n    \"\"\"Attribute format mapping.\"\"\"\n    return {\n        \"bounding_box\": Box.nullable,\n        \"polygon\": Polygon.nullable,\n        \"raster\": Raster.nullable,\n        \"embedding\": Embedding.nullable,\n        \"text\": String.nullable,\n        \"context\": Context.nullable,\n        \"is_instance\": Boolean.nullable,\n        \"implied_task_types\": SymbolicList,\n    }\n</code></pre>"},{"location":"client_api/Client/","title":"Client","text":"<p>Valor client object for interacting with the api.</p> <p>Parameters:</p> Name Type Description Default <code>connection</code> <code>ClientConnection</code> <p>Option to use an existing connection object.</p> <code>None</code> Source code in <code>valor/coretypes.py</code> <pre><code>class Client:\n    \"\"\"\n    Valor client object for interacting with the api.\n\n    Parameters\n    ----------\n    connection : ClientConnection, optional\n        Option to use an existing connection object.\n    \"\"\"\n\n    def __init__(self, connection: Optional[ClientConnection] = None):\n        if not connection:\n            connection = get_connection()\n        self.conn = connection\n\n    @classmethod\n    def connect(\n        cls,\n        host: str,\n        access_token: Optional[str] = None,\n        reconnect: bool = False,\n    ) -&gt; Client:\n        \"\"\"\n        Establishes a connection to the Valor API.\n\n        Parameters\n        ----------\n        host : str\n            The host to connect to. Should start with \"http://\" or \"https://\".\n        access_token : str\n            The access token for the host (if the host requires authentication).\n        \"\"\"\n        connect(host=host, access_token=access_token, reconnect=reconnect)\n        return cls(get_connection())\n\n    def get_labels(\n        self,\n        filters: Optional[Filter] = None,\n    ) -&gt; List[Label]:\n        \"\"\"\n        Gets all labels using an optional filter.\n\n        Parameters\n        ----------\n        filters : Filter, optional\n            Optional constraints to filter by.\n\n        Returns\n        ------\n        List[valor.Label]\n            A list of labels.\n        \"\"\"\n        filters = filters if filters is not None else Filter()\n        return [\n            Label(**label) for label in self.conn.get_labels(filters.to_dict())\n        ]\n\n    def get_labels_from_dataset(\n        self, dataset: Union[Dataset, str]\n    ) -&gt; List[Label]:\n        \"\"\"\n        Get all labels associated with a dataset's ground truths.\n\n        Parameters\n        ----------\n        dataset : valor.Dataset\n            The dataset to search by.\n\n        Returns\n        ------\n        List[valor.Label]\n            A list of labels.\n        \"\"\"\n        dataset_name = (\n            dataset.name if isinstance(dataset, Dataset) else dataset\n        )\n        return [\n            Label(**label)\n            for label in self.conn.get_labels_from_dataset(dataset_name)  # type: ignore\n        ]\n\n    def get_labels_from_model(self, model: Union[Model, str]) -&gt; List[Label]:\n        \"\"\"\n        Get all labels associated with a model's ground truths.\n\n        Parameters\n        ----------\n        model : valor.Model\n            The model to search by.\n\n        Returns\n        ------\n        List[valor.Label]\n            A list of labels.\n        \"\"\"\n        model_name = model.name if isinstance(model, Model) else model\n        return [\n            Label(**label)\n            for label in self.conn.get_labels_from_model(model_name)  # type: ignore\n        ]\n\n    def create_dataset(\n        self,\n        dataset: Union[Dataset, dict],\n    ) -&gt; None:\n        \"\"\"\n        Creates a dataset.\n\n        Parameters\n        ----------\n        dataset : valor.Dataset\n            The dataset to create.\n        \"\"\"\n        if isinstance(dataset, Dataset):\n            dataset = dataset.encode_value()\n        self.conn.create_dataset(dataset)\n\n    def create_groundtruths(\n        self,\n        dataset: Dataset,\n        groundtruths: List[GroundTruth],\n        ignore_existing_datums: bool = False,\n        timeout: Optional[float] = None,\n    ):\n        \"\"\"\n        Creates ground truths.\n\n        Parameters\n        ----------\n\n        dataset : valor.Dataset\n            The dataset to create the ground truth for.\n        groundtruths : List[valor.GroundTruth]\n            The ground truths to create.\n        timeout : float, optional\n            The number of seconds the client should wait until raising a timeout.\n        ignore_existing_datums : bool, default=False\n            If True, will ignore datums that already exist in the backend.\n            If False, will raise an error if any datums already exist.\n            Default is False.\n        \"\"\"\n        groundtruths_json = []\n        for groundtruth in groundtruths:\n            if not isinstance(groundtruth, GroundTruth):\n                raise TypeError(\n                    f\"Expected ground truth to be of type 'valor.GroundTruth' not '{type(groundtruth)}'.\"\n                )\n            if not isinstance(groundtruth.annotations._value, list):\n                raise TypeError\n            groundtruth_dict = groundtruth.encode_value()\n            groundtruth_dict[\"dataset_name\"] = dataset.name\n            groundtruths_json.append(groundtruth_dict)\n        self.conn.create_groundtruths(\n            groundtruths_json,\n            timeout=timeout,\n            ignore_existing_datums=ignore_existing_datums,\n        )\n\n    def get_groundtruth(\n        self,\n        dataset: Union[Dataset, str],\n        datum: Union[Datum, str],\n    ) -&gt; Union[GroundTruth, None]:\n        \"\"\"\n        Get a particular ground truth.\n\n        Parameters\n        ----------\n        dataset : Union[Dataset, str]\n            The dataset the datum belongs to.\n        datum : Union[Datum, str]\n            The desired datum.\n\n        Returns\n        ----------\n        Union[GroundTruth, None]\n            The matching ground truth or 'None' if it doesn't exist.\n        \"\"\"\n        dataset_name = (\n            dataset.name if isinstance(dataset, Dataset) else dataset\n        )\n        datum_uid = datum.uid if isinstance(datum, Datum) else datum\n        try:\n            resp = self.conn.get_groundtruth(\n                dataset_name=dataset_name, datum_uid=datum_uid  # type: ignore\n            )\n            resp.pop(\"dataset_name\")\n            return GroundTruth.decode_value(resp)\n        except ClientException as e:\n            if e.status_code == 404:\n                return None\n            raise e\n\n    def finalize_dataset(self, dataset: Union[Dataset, str]) -&gt; None:\n        \"\"\"\n        Finalizes a dataset such that new ground truths cannot be added to it.\n\n        Parameters\n        ----------\n        dataset : str\n            The dataset to be finalized.\n        \"\"\"\n        dataset_name = (\n            dataset.name if isinstance(dataset, Dataset) else dataset\n        )\n        return self.conn.finalize_dataset(name=dataset_name)  # type: ignore\n\n    def get_dataset(\n        self,\n        name: str,\n    ) -&gt; Union[Dataset, None]:\n        \"\"\"\n        Gets a dataset by name.\n\n        Parameters\n        ----------\n        name : str\n            The name of the dataset to fetch.\n\n        Returns\n        -------\n        Union[Dataset, None]\n            A Dataset with a matching name, or 'None' if one doesn't exist.\n        \"\"\"\n        dataset = Dataset.decode_value(\n            {\n                **self.conn.get_dataset(name),\n                \"connection\": self.conn,\n            }\n        )\n        return dataset\n\n    def get_datasets(\n        self,\n        filters: Optional[Filter] = None,\n    ) -&gt; List[Dataset]:\n        \"\"\"\n        Get all datasets, with an option to filter results according to some user-defined parameters.\n\n        Parameters\n        ----------\n        filters : Filter, optional\n            Optional constraints to filter by.\n\n        Returns\n        ------\n        List[valor.Dataset]\n            A list of datasets.\n        \"\"\"\n        dataset_list = []\n        filters = filters if filters is not None else Filter()\n        for kwargs in self.conn.get_datasets(filters.to_dict()):\n            dataset = Dataset.decode_value({**kwargs, \"connection\": self.conn})\n            dataset_list.append(dataset)\n        return dataset_list\n\n    def get_datums(\n        self,\n        filters: Optional[Filter] = None,\n    ) -&gt; List[Datum]:\n        \"\"\"\n        Get all datums using an optional filter.\n\n        Parameters\n        ----------\n        filters : Filter, optional\n            Optional constraints to filter by.\n\n        Returns\n        -------\n        List[valor.Datum]\n            A list datums.\n        \"\"\"\n\n        filters = filters if filters is not None else Filter()\n        return [\n            Datum.decode_value(datum)\n            for datum in self.conn.get_datums(filters.to_dict())\n        ]\n\n    def get_datum(\n        self,\n        dataset: Union[Dataset, str],\n        uid: str,\n    ) -&gt; Union[Datum, None]:\n        \"\"\"\n        Get datum.\n        `GET` endpoint.\n\n        Parameters\n        ----------\n        dataset : valor.Dataset\n            The dataset the datum belongs to.\n        uid : str\n            The UID of the datum.\n\n        Returns\n        -------\n        valor.Datum\n            The requested datum or 'None' if it doesn't exist.\n        \"\"\"\n        dataset_name = (\n            dataset.name if isinstance(dataset, Dataset) else dataset\n        )\n        resp = self.conn.get_datum(dataset_name=dataset_name, uid=uid)  # type: ignore\n        return Datum.decode_value(resp)\n\n    def get_dataset_status(\n        self,\n        name: str,\n    ) -&gt; Union[TableStatus, None]:\n        \"\"\"\n        Get the state of a given dataset.\n\n        Parameters\n        ----------\n        name : str\n            The name of the dataset we want to fetch the state of.\n\n        Returns\n        ------\n        TableStatus | None\n            The state of the dataset, or 'None' if the dataset does not exist.\n        \"\"\"\n        try:\n            return self.conn.get_dataset_status(name)\n        except ClientException as e:\n            if e.status_code == 404:\n                return None\n            raise e\n\n    def get_dataset_summary(\n        self,\n        name: str,\n        *_,\n        timeout: Optional[float] = None,\n    ) -&gt; DatasetSummary:\n        \"\"\"\n        Gets the summary of a dataset.\n\n        Parameters\n        ----------\n        name : str\n            The name of the dataset to create a summary for.\n\n        Returns\n        -------\n        DatasetSummary\n            A dataclass containing the dataset summary.\n        \"\"\"\n        return DatasetSummary(\n            **self.conn.get_dataset_summary(name, timeout=timeout)\n        )\n\n    def delete_dataset(self, name: str, timeout: int = 0) -&gt; None:\n        \"\"\"\n        Deletes a dataset.\n\n        Parameters\n        ----------\n        name : str\n            The name of the dataset to be deleted.\n        timeout : int\n            The number of seconds to wait in order to confirm that the dataset was deleted.\n        \"\"\"\n        self.conn.delete_dataset(name)\n        if timeout:\n            for _ in range(timeout):\n                try:\n                    self.get_dataset(name)\n                except DatasetDoesNotExistError:\n                    break\n                time.sleep(1)\n            else:\n                raise TimeoutError(\n                    \"Dataset wasn't deleted within timeout interval\"\n                )\n\n    def create_model(\n        self,\n        model: Union[Model, dict],\n    ):\n        \"\"\"\n        Creates a model.\n\n        Parameters\n        ----------\n        model : valor.Model\n            The model to create.\n        \"\"\"\n        if isinstance(model, Model):\n            model = model.encode_value()\n        self.conn.create_model(model)\n\n    def create_predictions(\n        self,\n        dataset: Dataset,\n        model: Model,\n        predictions: List[Prediction],\n        timeout: Optional[float] = None,\n    ) -&gt; None:\n        \"\"\"\n        Creates predictions.\n\n        Parameters\n        ----------\n        dataset : valor.Dataset\n            The dataset that is being operated over.\n        model : valor.Model\n            The model making the prediction.\n        predictions : List[valor.Prediction]\n            The predictions to create.\n        timeout : float, optional\n            The number of seconds the client should wait until raising a timeout.\n        \"\"\"\n        predictions_json = []\n        for prediction in predictions:\n            if not isinstance(prediction, Prediction):\n                raise TypeError(\n                    f\"Expected prediction to be of type 'valor.Prediction' not '{type(prediction)}'.\"\n                )\n            if not isinstance(prediction.annotations._value, list):\n                raise TypeError\n            prediction_dict = prediction.encode_value()\n            prediction_dict[\"dataset_name\"] = dataset.name\n            prediction_dict[\"model_name\"] = model.name\n            predictions_json.append(prediction_dict)\n        self.conn.create_predictions(predictions_json, timeout=timeout)\n\n    def get_prediction(\n        self,\n        dataset: Union[Dataset, str],\n        model: Union[Model, str],\n        datum: Union[Datum, str],\n    ) -&gt; Union[Prediction, None]:\n        \"\"\"\n        Get a particular prediction.\n\n        Parameters\n        ----------\n        dataset : Union[Dataset, str]\n            The dataset the datum belongs to.\n        model : Union[Model, str]\n            The model that made the prediction.\n        datum : Union[Datum, str]\n            The desired datum.\n\n        Returns\n        ----------\n        Union[Prediction, None]\n            The matching prediction or 'None' if it doesn't exist.\n        \"\"\"\n        dataset_name = (\n            dataset.name if isinstance(dataset, Dataset) else dataset\n        )\n        model_name = model.name if isinstance(model, Model) else model\n        datum_uid = datum.uid if isinstance(datum, Datum) else datum\n\n        resp = self.conn.get_prediction(\n            dataset_name=dataset_name,  # type: ignore\n            model_name=model_name,  # type: ignore\n            datum_uid=datum_uid,  # type: ignore\n        )\n        resp.pop(\"dataset_name\")\n        resp.pop(\"model_name\")\n        return Prediction.decode_value(resp)\n\n    def finalize_inferences(\n        self, dataset: Union[Dataset, str], model: Union[Model, str]\n    ) -&gt; None:\n        \"\"\"\n        Finalizes a model-dataset pairing such that new predictions cannot be added to it.\n        \"\"\"\n        dataset_name = (\n            dataset.name if isinstance(dataset, Dataset) else dataset\n        )\n        model_name = model.name if isinstance(model, Model) else model\n        return self.conn.finalize_inferences(\n            dataset_name=dataset_name,  # type: ignore\n            model_name=model_name,  # type: ignore\n        )\n\n    def get_model(\n        self,\n        name: str,\n    ) -&gt; Union[Model, None]:\n        \"\"\"\n        Gets a model by name.\n\n        Parameters\n        ----------\n        name : str\n            The name of the model to fetch.\n\n        Returns\n        -------\n        Union[valor.Model, None]\n            A Model with matching name or 'None' if one doesn't exist.\n        \"\"\"\n        return Model.decode_value(\n            {\n                **self.conn.get_model(name),\n                \"connection\": self.conn,\n            }\n        )\n\n    def get_models(\n        self,\n        filters: Optional[Filter] = None,\n    ) -&gt; List[Model]:\n        \"\"\"\n        Get all models using an optional filter.\n\n        Parameters\n        ----------\n        filters : Filter, optional\n            Optional constraints to filter by.\n\n        Returns\n        ------\n        List[valor.Model]\n            A list of models.\n        \"\"\"\n        model_list = []\n        filters = filters if filters is not None else Filter()\n        for kwargs in self.conn.get_models(filters.to_dict()):\n            model = Model.decode_value({**kwargs, \"connection\": self.conn})\n            model_list.append(model)\n        return model_list\n\n    def get_model_status(\n        self,\n        dataset_name: str,\n        model_name: str,\n    ) -&gt; Optional[TableStatus]:\n        \"\"\"\n        Get the state of a given model over a dataset.\n\n        Parameters\n        ----------\n        dataset_name : str\n            The name of the dataset that the model is operating over.\n        model_name : str\n            The name of the model we want to fetch the state of.\n\n        Returns\n        ------\n        Union[TableStatus, None]\n            The state of the model or 'None' if the model doesn't exist.\n        \"\"\"\n        try:\n            return self.conn.get_model_status(dataset_name, model_name)\n        except ClientException as e:\n            if e.status_code == 404:\n                return None\n            raise e\n\n    def get_model_eval_requests(\n        self, model: Union[Model, str]\n    ) -&gt; List[Evaluation]:\n        \"\"\"\n        Get all evaluations that have been created for a model.\n\n        This does not return evaluation results.\n\n        `GET` endpoint.\n\n        Parameters\n        ----------\n        model : str\n            The model to search by.\n\n        Returns\n        -------\n        List[Evaluation]\n            A list of evaluations.\n        \"\"\"\n        model_name = model.name if isinstance(model, Model) else model\n        return [\n            Evaluation(**evaluation, connection=self.conn)\n            for evaluation in self.conn.get_model_eval_requests(model_name)  # type: ignore\n        ]\n\n    def delete_model(self, name: str, timeout: int = 0) -&gt; None:\n        \"\"\"\n        Deletes a model.\n\n        Parameters\n        ----------\n        name : str\n            The name of the model to be deleted.\n        timeout : int\n            The number of seconds to wait in order to confirm that the model was deleted.\n        \"\"\"\n        self.conn.delete_model(name)\n        if timeout:\n            for _ in range(timeout):\n                try:\n                    self.get_model(name)\n                except ModelDoesNotExistError:\n                    break\n                time.sleep(1)\n            else:\n                raise TimeoutError(\n                    \"Model wasn't deleted within timeout interval\"\n                )\n\n    def get_evaluations(\n        self,\n        *,\n        evaluation_ids: Optional[List[int]] = None,\n        models: Union[List[Model], List[str], None] = None,\n        datasets: Union[List[Dataset], List[str], None] = None,\n        metrics_to_sort_by: Optional[\n            Dict[str, Union[Dict[str, str], str]]\n        ] = None,\n        timeout: Optional[float] = None,\n    ) -&gt; List[Evaluation]:\n        \"\"\"\n        Returns all evaluations associated with user-supplied dataset and/or model names.\n\n        Parameters\n        ----------\n        evaluation_ids : List[int], optional.\n            A list of job IDs to return metrics for.\n        models : Union[List[valor.Model], List[str]], optional\n            A list of model names that we want to return metrics for.\n        datasets : Union[List[valor.Dataset], List[str]], optional\n            A list of dataset names that we want to return metrics for.\n        metrics_to_sort_by : dict[str, str | dict[str, str]], optional\n            An optional dict of metric types to sort the evaluations by.\n        timeout : float, optional\n            The number of seconds the client should wait until raising a timeout.\n\n        Returns\n        -------\n        List[valor.Evaluation]\n            A list of evaluations.\n        \"\"\"\n        if isinstance(datasets, list):\n            datasets = [  # type: ignore\n                element.name if isinstance(element, Dataset) else element\n                for element in datasets\n            ]\n        if isinstance(models, list):\n            models = [  # type: ignore\n                element.name if isinstance(element, Model) else element\n                for element in models\n            ]\n        return [\n            Evaluation(connection=self.conn, **evaluation)\n            for evaluation in self.conn.get_evaluations(\n                evaluation_ids=evaluation_ids,\n                models=models,  # type: ignore\n                datasets=datasets,  # type: ignore\n                metrics_to_sort_by=metrics_to_sort_by,\n                timeout=timeout,\n            )\n        ]\n\n    def evaluate(\n        self,\n        request: EvaluationRequest,\n        *_,\n        allow_retries: bool = False,\n        timeout: Optional[float] = None,\n    ) -&gt; List[Evaluation]:\n        \"\"\"\n        Creates as many evaluations as necessary to fulfill the request.\n\n        Parameters\n        ----------\n        request : schemas.EvaluationRequest\n            The requested evaluation parameters.\n        allow_retries : bool, default = False\n            Option to retry previously failed evaluations.\n        timeout : float, optional\n            The number of seconds the client should wait until raising a timeout.\n\n        Returns\n        -------\n        List[Evaluation]\n            A list of evaluations that meet the parameters.\n        \"\"\"\n        return [\n            Evaluation(**evaluation)\n            for evaluation in self.conn.evaluate(\n                request.to_dict(),\n                allow_retries=allow_retries,\n                timeout=timeout,\n            )\n        ]\n\n    def delete_evaluation(self, evaluation_id: int, timeout: int = 0) -&gt; None:\n        \"\"\"\n        Deletes an evaluation.\n\n        Parameters\n        ----------\n        evaluation_id : int\n            The id of the evaluation to be deleted.\n        timeout : int, default=0\n            The number of seconds to wait in order to confirm that the model was deleted.\n        \"\"\"\n        self.conn.delete_evaluation(evaluation_id)\n        if timeout:\n            for _ in range(timeout):\n                try:\n                    self.get_evaluations(evaluation_ids=[evaluation_id])\n                except EvaluationDoesNotExist:\n                    break\n                time.sleep(1)\n            else:\n                raise TimeoutError(\n                    \"Evaluation wasn't deleted within timeout interval\"\n                )\n</code></pre>"},{"location":"client_api/Client/#valor.Client-functions","title":"Functions","text":""},{"location":"client_api/Client/#valor.Client.connect","title":"<code>valor.Client.connect(host, access_token=None, reconnect=False)</code>  <code>classmethod</code>","text":"<p>Establishes a connection to the Valor API.</p> <p>Parameters:</p> Name Type Description Default <code>host</code> <code>str</code> <p>The host to connect to. Should start with \"http://\" or \"https://\".</p> required <code>access_token</code> <code>str</code> <p>The access token for the host (if the host requires authentication).</p> <code>None</code> Source code in <code>valor/coretypes.py</code> <pre><code>@classmethod\ndef connect(\n    cls,\n    host: str,\n    access_token: Optional[str] = None,\n    reconnect: bool = False,\n) -&gt; Client:\n    \"\"\"\n    Establishes a connection to the Valor API.\n\n    Parameters\n    ----------\n    host : str\n        The host to connect to. Should start with \"http://\" or \"https://\".\n    access_token : str\n        The access token for the host (if the host requires authentication).\n    \"\"\"\n    connect(host=host, access_token=access_token, reconnect=reconnect)\n    return cls(get_connection())\n</code></pre>"},{"location":"client_api/Client/#valor.Client.create_dataset","title":"<code>valor.Client.create_dataset(dataset)</code>","text":"<p>Creates a dataset.</p> <p>Parameters:</p> Name Type Description Default <code>dataset</code> <code>Dataset</code> <p>The dataset to create.</p> required Source code in <code>valor/coretypes.py</code> <pre><code>def create_dataset(\n    self,\n    dataset: Union[Dataset, dict],\n) -&gt; None:\n    \"\"\"\n    Creates a dataset.\n\n    Parameters\n    ----------\n    dataset : valor.Dataset\n        The dataset to create.\n    \"\"\"\n    if isinstance(dataset, Dataset):\n        dataset = dataset.encode_value()\n    self.conn.create_dataset(dataset)\n</code></pre>"},{"location":"client_api/Client/#valor.Client.create_groundtruths","title":"<code>valor.Client.create_groundtruths(dataset, groundtruths, ignore_existing_datums=False, timeout=None)</code>","text":"<p>Creates ground truths.</p> <p>Parameters:</p> Name Type Description Default <code>dataset</code> <code>Dataset</code> <p>The dataset to create the ground truth for.</p> required <code>groundtruths</code> <code>List[GroundTruth]</code> <p>The ground truths to create.</p> required <code>timeout</code> <code>float</code> <p>The number of seconds the client should wait until raising a timeout.</p> <code>None</code> <code>ignore_existing_datums</code> <code>bool</code> <p>If True, will ignore datums that already exist in the backend. If False, will raise an error if any datums already exist. Default is False.</p> <code>False</code> Source code in <code>valor/coretypes.py</code> <pre><code>def create_groundtruths(\n    self,\n    dataset: Dataset,\n    groundtruths: List[GroundTruth],\n    ignore_existing_datums: bool = False,\n    timeout: Optional[float] = None,\n):\n    \"\"\"\n    Creates ground truths.\n\n    Parameters\n    ----------\n\n    dataset : valor.Dataset\n        The dataset to create the ground truth for.\n    groundtruths : List[valor.GroundTruth]\n        The ground truths to create.\n    timeout : float, optional\n        The number of seconds the client should wait until raising a timeout.\n    ignore_existing_datums : bool, default=False\n        If True, will ignore datums that already exist in the backend.\n        If False, will raise an error if any datums already exist.\n        Default is False.\n    \"\"\"\n    groundtruths_json = []\n    for groundtruth in groundtruths:\n        if not isinstance(groundtruth, GroundTruth):\n            raise TypeError(\n                f\"Expected ground truth to be of type 'valor.GroundTruth' not '{type(groundtruth)}'.\"\n            )\n        if not isinstance(groundtruth.annotations._value, list):\n            raise TypeError\n        groundtruth_dict = groundtruth.encode_value()\n        groundtruth_dict[\"dataset_name\"] = dataset.name\n        groundtruths_json.append(groundtruth_dict)\n    self.conn.create_groundtruths(\n        groundtruths_json,\n        timeout=timeout,\n        ignore_existing_datums=ignore_existing_datums,\n    )\n</code></pre>"},{"location":"client_api/Client/#valor.Client.create_model","title":"<code>valor.Client.create_model(model)</code>","text":"<p>Creates a model.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>Model</code> <p>The model to create.</p> required Source code in <code>valor/coretypes.py</code> <pre><code>def create_model(\n    self,\n    model: Union[Model, dict],\n):\n    \"\"\"\n    Creates a model.\n\n    Parameters\n    ----------\n    model : valor.Model\n        The model to create.\n    \"\"\"\n    if isinstance(model, Model):\n        model = model.encode_value()\n    self.conn.create_model(model)\n</code></pre>"},{"location":"client_api/Client/#valor.Client.create_predictions","title":"<code>valor.Client.create_predictions(dataset, model, predictions, timeout=None)</code>","text":"<p>Creates predictions.</p> <p>Parameters:</p> Name Type Description Default <code>dataset</code> <code>Dataset</code> <p>The dataset that is being operated over.</p> required <code>model</code> <code>Model</code> <p>The model making the prediction.</p> required <code>predictions</code> <code>List[Prediction]</code> <p>The predictions to create.</p> required <code>timeout</code> <code>float</code> <p>The number of seconds the client should wait until raising a timeout.</p> <code>None</code> Source code in <code>valor/coretypes.py</code> <pre><code>def create_predictions(\n    self,\n    dataset: Dataset,\n    model: Model,\n    predictions: List[Prediction],\n    timeout: Optional[float] = None,\n) -&gt; None:\n    \"\"\"\n    Creates predictions.\n\n    Parameters\n    ----------\n    dataset : valor.Dataset\n        The dataset that is being operated over.\n    model : valor.Model\n        The model making the prediction.\n    predictions : List[valor.Prediction]\n        The predictions to create.\n    timeout : float, optional\n        The number of seconds the client should wait until raising a timeout.\n    \"\"\"\n    predictions_json = []\n    for prediction in predictions:\n        if not isinstance(prediction, Prediction):\n            raise TypeError(\n                f\"Expected prediction to be of type 'valor.Prediction' not '{type(prediction)}'.\"\n            )\n        if not isinstance(prediction.annotations._value, list):\n            raise TypeError\n        prediction_dict = prediction.encode_value()\n        prediction_dict[\"dataset_name\"] = dataset.name\n        prediction_dict[\"model_name\"] = model.name\n        predictions_json.append(prediction_dict)\n    self.conn.create_predictions(predictions_json, timeout=timeout)\n</code></pre>"},{"location":"client_api/Client/#valor.Client.delete_dataset","title":"<code>valor.Client.delete_dataset(name, timeout=0)</code>","text":"<p>Deletes a dataset.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the dataset to be deleted.</p> required <code>timeout</code> <code>int</code> <p>The number of seconds to wait in order to confirm that the dataset was deleted.</p> <code>0</code> Source code in <code>valor/coretypes.py</code> <pre><code>def delete_dataset(self, name: str, timeout: int = 0) -&gt; None:\n    \"\"\"\n    Deletes a dataset.\n\n    Parameters\n    ----------\n    name : str\n        The name of the dataset to be deleted.\n    timeout : int\n        The number of seconds to wait in order to confirm that the dataset was deleted.\n    \"\"\"\n    self.conn.delete_dataset(name)\n    if timeout:\n        for _ in range(timeout):\n            try:\n                self.get_dataset(name)\n            except DatasetDoesNotExistError:\n                break\n            time.sleep(1)\n        else:\n            raise TimeoutError(\n                \"Dataset wasn't deleted within timeout interval\"\n            )\n</code></pre>"},{"location":"client_api/Client/#valor.Client.delete_evaluation","title":"<code>valor.Client.delete_evaluation(evaluation_id, timeout=0)</code>","text":"<p>Deletes an evaluation.</p> <p>Parameters:</p> Name Type Description Default <code>evaluation_id</code> <code>int</code> <p>The id of the evaluation to be deleted.</p> required <code>timeout</code> <code>int</code> <p>The number of seconds to wait in order to confirm that the model was deleted.</p> <code>0</code> Source code in <code>valor/coretypes.py</code> <pre><code>def delete_evaluation(self, evaluation_id: int, timeout: int = 0) -&gt; None:\n    \"\"\"\n    Deletes an evaluation.\n\n    Parameters\n    ----------\n    evaluation_id : int\n        The id of the evaluation to be deleted.\n    timeout : int, default=0\n        The number of seconds to wait in order to confirm that the model was deleted.\n    \"\"\"\n    self.conn.delete_evaluation(evaluation_id)\n    if timeout:\n        for _ in range(timeout):\n            try:\n                self.get_evaluations(evaluation_ids=[evaluation_id])\n            except EvaluationDoesNotExist:\n                break\n            time.sleep(1)\n        else:\n            raise TimeoutError(\n                \"Evaluation wasn't deleted within timeout interval\"\n            )\n</code></pre>"},{"location":"client_api/Client/#valor.Client.delete_model","title":"<code>valor.Client.delete_model(name, timeout=0)</code>","text":"<p>Deletes a model.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the model to be deleted.</p> required <code>timeout</code> <code>int</code> <p>The number of seconds to wait in order to confirm that the model was deleted.</p> <code>0</code> Source code in <code>valor/coretypes.py</code> <pre><code>def delete_model(self, name: str, timeout: int = 0) -&gt; None:\n    \"\"\"\n    Deletes a model.\n\n    Parameters\n    ----------\n    name : str\n        The name of the model to be deleted.\n    timeout : int\n        The number of seconds to wait in order to confirm that the model was deleted.\n    \"\"\"\n    self.conn.delete_model(name)\n    if timeout:\n        for _ in range(timeout):\n            try:\n                self.get_model(name)\n            except ModelDoesNotExistError:\n                break\n            time.sleep(1)\n        else:\n            raise TimeoutError(\n                \"Model wasn't deleted within timeout interval\"\n            )\n</code></pre>"},{"location":"client_api/Client/#valor.Client.evaluate","title":"<code>valor.Client.evaluate(request, *_, allow_retries=False, timeout=None)</code>","text":"<p>Creates as many evaluations as necessary to fulfill the request.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>EvaluationRequest</code> <p>The requested evaluation parameters.</p> required <code>allow_retries</code> <code>bool</code> <p>Option to retry previously failed evaluations.</p> <code>= False</code> <code>timeout</code> <code>float</code> <p>The number of seconds the client should wait until raising a timeout.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Evaluation]</code> <p>A list of evaluations that meet the parameters.</p> Source code in <code>valor/coretypes.py</code> <pre><code>def evaluate(\n    self,\n    request: EvaluationRequest,\n    *_,\n    allow_retries: bool = False,\n    timeout: Optional[float] = None,\n) -&gt; List[Evaluation]:\n    \"\"\"\n    Creates as many evaluations as necessary to fulfill the request.\n\n    Parameters\n    ----------\n    request : schemas.EvaluationRequest\n        The requested evaluation parameters.\n    allow_retries : bool, default = False\n        Option to retry previously failed evaluations.\n    timeout : float, optional\n        The number of seconds the client should wait until raising a timeout.\n\n    Returns\n    -------\n    List[Evaluation]\n        A list of evaluations that meet the parameters.\n    \"\"\"\n    return [\n        Evaluation(**evaluation)\n        for evaluation in self.conn.evaluate(\n            request.to_dict(),\n            allow_retries=allow_retries,\n            timeout=timeout,\n        )\n    ]\n</code></pre>"},{"location":"client_api/Client/#valor.Client.finalize_dataset","title":"<code>valor.Client.finalize_dataset(dataset)</code>","text":"<p>Finalizes a dataset such that new ground truths cannot be added to it.</p> <p>Parameters:</p> Name Type Description Default <code>dataset</code> <code>str</code> <p>The dataset to be finalized.</p> required Source code in <code>valor/coretypes.py</code> <pre><code>def finalize_dataset(self, dataset: Union[Dataset, str]) -&gt; None:\n    \"\"\"\n    Finalizes a dataset such that new ground truths cannot be added to it.\n\n    Parameters\n    ----------\n    dataset : str\n        The dataset to be finalized.\n    \"\"\"\n    dataset_name = (\n        dataset.name if isinstance(dataset, Dataset) else dataset\n    )\n    return self.conn.finalize_dataset(name=dataset_name)  # type: ignore\n</code></pre>"},{"location":"client_api/Client/#valor.Client.finalize_inferences","title":"<code>valor.Client.finalize_inferences(dataset, model)</code>","text":"<p>Finalizes a model-dataset pairing such that new predictions cannot be added to it.</p> Source code in <code>valor/coretypes.py</code> <pre><code>def finalize_inferences(\n    self, dataset: Union[Dataset, str], model: Union[Model, str]\n) -&gt; None:\n    \"\"\"\n    Finalizes a model-dataset pairing such that new predictions cannot be added to it.\n    \"\"\"\n    dataset_name = (\n        dataset.name if isinstance(dataset, Dataset) else dataset\n    )\n    model_name = model.name if isinstance(model, Model) else model\n    return self.conn.finalize_inferences(\n        dataset_name=dataset_name,  # type: ignore\n        model_name=model_name,  # type: ignore\n    )\n</code></pre>"},{"location":"client_api/Client/#valor.Client.get_dataset","title":"<code>valor.Client.get_dataset(name)</code>","text":"<p>Gets a dataset by name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the dataset to fetch.</p> required <p>Returns:</p> Type Description <code>Union[Dataset, None]</code> <p>A Dataset with a matching name, or 'None' if one doesn't exist.</p> Source code in <code>valor/coretypes.py</code> <pre><code>def get_dataset(\n    self,\n    name: str,\n) -&gt; Union[Dataset, None]:\n    \"\"\"\n    Gets a dataset by name.\n\n    Parameters\n    ----------\n    name : str\n        The name of the dataset to fetch.\n\n    Returns\n    -------\n    Union[Dataset, None]\n        A Dataset with a matching name, or 'None' if one doesn't exist.\n    \"\"\"\n    dataset = Dataset.decode_value(\n        {\n            **self.conn.get_dataset(name),\n            \"connection\": self.conn,\n        }\n    )\n    return dataset\n</code></pre>"},{"location":"client_api/Client/#valor.Client.get_dataset_status","title":"<code>valor.Client.get_dataset_status(name)</code>","text":"<p>Get the state of a given dataset.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the dataset we want to fetch the state of.</p> required <p>Returns:</p> Type Description <code>TableStatus | None</code> <p>The state of the dataset, or 'None' if the dataset does not exist.</p> Source code in <code>valor/coretypes.py</code> <pre><code>def get_dataset_status(\n    self,\n    name: str,\n) -&gt; Union[TableStatus, None]:\n    \"\"\"\n    Get the state of a given dataset.\n\n    Parameters\n    ----------\n    name : str\n        The name of the dataset we want to fetch the state of.\n\n    Returns\n    ------\n    TableStatus | None\n        The state of the dataset, or 'None' if the dataset does not exist.\n    \"\"\"\n    try:\n        return self.conn.get_dataset_status(name)\n    except ClientException as e:\n        if e.status_code == 404:\n            return None\n        raise e\n</code></pre>"},{"location":"client_api/Client/#valor.Client.get_dataset_summary","title":"<code>valor.Client.get_dataset_summary(name, *_, timeout=None)</code>","text":"<p>Gets the summary of a dataset.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the dataset to create a summary for.</p> required <p>Returns:</p> Type Description <code>DatasetSummary</code> <p>A dataclass containing the dataset summary.</p> Source code in <code>valor/coretypes.py</code> <pre><code>def get_dataset_summary(\n    self,\n    name: str,\n    *_,\n    timeout: Optional[float] = None,\n) -&gt; DatasetSummary:\n    \"\"\"\n    Gets the summary of a dataset.\n\n    Parameters\n    ----------\n    name : str\n        The name of the dataset to create a summary for.\n\n    Returns\n    -------\n    DatasetSummary\n        A dataclass containing the dataset summary.\n    \"\"\"\n    return DatasetSummary(\n        **self.conn.get_dataset_summary(name, timeout=timeout)\n    )\n</code></pre>"},{"location":"client_api/Client/#valor.Client.get_datasets","title":"<code>valor.Client.get_datasets(filters=None)</code>","text":"<p>Get all datasets, with an option to filter results according to some user-defined parameters.</p> <p>Parameters:</p> Name Type Description Default <code>filters</code> <code>Filter</code> <p>Optional constraints to filter by.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Dataset]</code> <p>A list of datasets.</p> Source code in <code>valor/coretypes.py</code> <pre><code>def get_datasets(\n    self,\n    filters: Optional[Filter] = None,\n) -&gt; List[Dataset]:\n    \"\"\"\n    Get all datasets, with an option to filter results according to some user-defined parameters.\n\n    Parameters\n    ----------\n    filters : Filter, optional\n        Optional constraints to filter by.\n\n    Returns\n    ------\n    List[valor.Dataset]\n        A list of datasets.\n    \"\"\"\n    dataset_list = []\n    filters = filters if filters is not None else Filter()\n    for kwargs in self.conn.get_datasets(filters.to_dict()):\n        dataset = Dataset.decode_value({**kwargs, \"connection\": self.conn})\n        dataset_list.append(dataset)\n    return dataset_list\n</code></pre>"},{"location":"client_api/Client/#valor.Client.get_datum","title":"<code>valor.Client.get_datum(dataset, uid)</code>","text":"<p>Get datum. <code>GET</code> endpoint.</p> <p>Parameters:</p> Name Type Description Default <code>dataset</code> <code>Dataset</code> <p>The dataset the datum belongs to.</p> required <code>uid</code> <code>str</code> <p>The UID of the datum.</p> required <p>Returns:</p> Type Description <code>Datum</code> <p>The requested datum or 'None' if it doesn't exist.</p> Source code in <code>valor/coretypes.py</code> <pre><code>def get_datum(\n    self,\n    dataset: Union[Dataset, str],\n    uid: str,\n) -&gt; Union[Datum, None]:\n    \"\"\"\n    Get datum.\n    `GET` endpoint.\n\n    Parameters\n    ----------\n    dataset : valor.Dataset\n        The dataset the datum belongs to.\n    uid : str\n        The UID of the datum.\n\n    Returns\n    -------\n    valor.Datum\n        The requested datum or 'None' if it doesn't exist.\n    \"\"\"\n    dataset_name = (\n        dataset.name if isinstance(dataset, Dataset) else dataset\n    )\n    resp = self.conn.get_datum(dataset_name=dataset_name, uid=uid)  # type: ignore\n    return Datum.decode_value(resp)\n</code></pre>"},{"location":"client_api/Client/#valor.Client.get_datums","title":"<code>valor.Client.get_datums(filters=None)</code>","text":"<p>Get all datums using an optional filter.</p> <p>Parameters:</p> Name Type Description Default <code>filters</code> <code>Filter</code> <p>Optional constraints to filter by.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Datum]</code> <p>A list datums.</p> Source code in <code>valor/coretypes.py</code> <pre><code>def get_datums(\n    self,\n    filters: Optional[Filter] = None,\n) -&gt; List[Datum]:\n    \"\"\"\n    Get all datums using an optional filter.\n\n    Parameters\n    ----------\n    filters : Filter, optional\n        Optional constraints to filter by.\n\n    Returns\n    -------\n    List[valor.Datum]\n        A list datums.\n    \"\"\"\n\n    filters = filters if filters is not None else Filter()\n    return [\n        Datum.decode_value(datum)\n        for datum in self.conn.get_datums(filters.to_dict())\n    ]\n</code></pre>"},{"location":"client_api/Client/#valor.Client.get_evaluations","title":"<code>valor.Client.get_evaluations(*, evaluation_ids=None, models=None, datasets=None, metrics_to_sort_by=None, timeout=None)</code>","text":"<p>Returns all evaluations associated with user-supplied dataset and/or model names.</p> <p>Parameters:</p> Name Type Description Default <code>evaluation_ids</code> <code>List[int], optional.</code> <p>A list of job IDs to return metrics for.</p> <code>None</code> <code>models</code> <code>Union[List[Model], List[str]]</code> <p>A list of model names that we want to return metrics for.</p> <code>None</code> <code>datasets</code> <code>Union[List[Dataset], List[str]]</code> <p>A list of dataset names that we want to return metrics for.</p> <code>None</code> <code>metrics_to_sort_by</code> <code>dict[str, str | dict[str, str]]</code> <p>An optional dict of metric types to sort the evaluations by.</p> <code>None</code> <code>timeout</code> <code>float</code> <p>The number of seconds the client should wait until raising a timeout.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Evaluation]</code> <p>A list of evaluations.</p> Source code in <code>valor/coretypes.py</code> <pre><code>def get_evaluations(\n    self,\n    *,\n    evaluation_ids: Optional[List[int]] = None,\n    models: Union[List[Model], List[str], None] = None,\n    datasets: Union[List[Dataset], List[str], None] = None,\n    metrics_to_sort_by: Optional[\n        Dict[str, Union[Dict[str, str], str]]\n    ] = None,\n    timeout: Optional[float] = None,\n) -&gt; List[Evaluation]:\n    \"\"\"\n    Returns all evaluations associated with user-supplied dataset and/or model names.\n\n    Parameters\n    ----------\n    evaluation_ids : List[int], optional.\n        A list of job IDs to return metrics for.\n    models : Union[List[valor.Model], List[str]], optional\n        A list of model names that we want to return metrics for.\n    datasets : Union[List[valor.Dataset], List[str]], optional\n        A list of dataset names that we want to return metrics for.\n    metrics_to_sort_by : dict[str, str | dict[str, str]], optional\n        An optional dict of metric types to sort the evaluations by.\n    timeout : float, optional\n        The number of seconds the client should wait until raising a timeout.\n\n    Returns\n    -------\n    List[valor.Evaluation]\n        A list of evaluations.\n    \"\"\"\n    if isinstance(datasets, list):\n        datasets = [  # type: ignore\n            element.name if isinstance(element, Dataset) else element\n            for element in datasets\n        ]\n    if isinstance(models, list):\n        models = [  # type: ignore\n            element.name if isinstance(element, Model) else element\n            for element in models\n        ]\n    return [\n        Evaluation(connection=self.conn, **evaluation)\n        for evaluation in self.conn.get_evaluations(\n            evaluation_ids=evaluation_ids,\n            models=models,  # type: ignore\n            datasets=datasets,  # type: ignore\n            metrics_to_sort_by=metrics_to_sort_by,\n            timeout=timeout,\n        )\n    ]\n</code></pre>"},{"location":"client_api/Client/#valor.Client.get_groundtruth","title":"<code>valor.Client.get_groundtruth(dataset, datum)</code>","text":"<p>Get a particular ground truth.</p> <p>Parameters:</p> Name Type Description Default <code>dataset</code> <code>Union[Dataset, str]</code> <p>The dataset the datum belongs to.</p> required <code>datum</code> <code>Union[Datum, str]</code> <p>The desired datum.</p> required <p>Returns:</p> Type Description <code>Union[GroundTruth, None]</code> <p>The matching ground truth or 'None' if it doesn't exist.</p> Source code in <code>valor/coretypes.py</code> <pre><code>def get_groundtruth(\n    self,\n    dataset: Union[Dataset, str],\n    datum: Union[Datum, str],\n) -&gt; Union[GroundTruth, None]:\n    \"\"\"\n    Get a particular ground truth.\n\n    Parameters\n    ----------\n    dataset : Union[Dataset, str]\n        The dataset the datum belongs to.\n    datum : Union[Datum, str]\n        The desired datum.\n\n    Returns\n    ----------\n    Union[GroundTruth, None]\n        The matching ground truth or 'None' if it doesn't exist.\n    \"\"\"\n    dataset_name = (\n        dataset.name if isinstance(dataset, Dataset) else dataset\n    )\n    datum_uid = datum.uid if isinstance(datum, Datum) else datum\n    try:\n        resp = self.conn.get_groundtruth(\n            dataset_name=dataset_name, datum_uid=datum_uid  # type: ignore\n        )\n        resp.pop(\"dataset_name\")\n        return GroundTruth.decode_value(resp)\n    except ClientException as e:\n        if e.status_code == 404:\n            return None\n        raise e\n</code></pre>"},{"location":"client_api/Client/#valor.Client.get_labels","title":"<code>valor.Client.get_labels(filters=None)</code>","text":"<p>Gets all labels using an optional filter.</p> <p>Parameters:</p> Name Type Description Default <code>filters</code> <code>Filter</code> <p>Optional constraints to filter by.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Label]</code> <p>A list of labels.</p> Source code in <code>valor/coretypes.py</code> <pre><code>def get_labels(\n    self,\n    filters: Optional[Filter] = None,\n) -&gt; List[Label]:\n    \"\"\"\n    Gets all labels using an optional filter.\n\n    Parameters\n    ----------\n    filters : Filter, optional\n        Optional constraints to filter by.\n\n    Returns\n    ------\n    List[valor.Label]\n        A list of labels.\n    \"\"\"\n    filters = filters if filters is not None else Filter()\n    return [\n        Label(**label) for label in self.conn.get_labels(filters.to_dict())\n    ]\n</code></pre>"},{"location":"client_api/Client/#valor.Client.get_labels_from_dataset","title":"<code>valor.Client.get_labels_from_dataset(dataset)</code>","text":"<p>Get all labels associated with a dataset's ground truths.</p> <p>Parameters:</p> Name Type Description Default <code>dataset</code> <code>Dataset</code> <p>The dataset to search by.</p> required <p>Returns:</p> Type Description <code>List[Label]</code> <p>A list of labels.</p> Source code in <code>valor/coretypes.py</code> <pre><code>def get_labels_from_dataset(\n    self, dataset: Union[Dataset, str]\n) -&gt; List[Label]:\n    \"\"\"\n    Get all labels associated with a dataset's ground truths.\n\n    Parameters\n    ----------\n    dataset : valor.Dataset\n        The dataset to search by.\n\n    Returns\n    ------\n    List[valor.Label]\n        A list of labels.\n    \"\"\"\n    dataset_name = (\n        dataset.name if isinstance(dataset, Dataset) else dataset\n    )\n    return [\n        Label(**label)\n        for label in self.conn.get_labels_from_dataset(dataset_name)  # type: ignore\n    ]\n</code></pre>"},{"location":"client_api/Client/#valor.Client.get_labels_from_model","title":"<code>valor.Client.get_labels_from_model(model)</code>","text":"<p>Get all labels associated with a model's ground truths.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>Model</code> <p>The model to search by.</p> required <p>Returns:</p> Type Description <code>List[Label]</code> <p>A list of labels.</p> Source code in <code>valor/coretypes.py</code> <pre><code>def get_labels_from_model(self, model: Union[Model, str]) -&gt; List[Label]:\n    \"\"\"\n    Get all labels associated with a model's ground truths.\n\n    Parameters\n    ----------\n    model : valor.Model\n        The model to search by.\n\n    Returns\n    ------\n    List[valor.Label]\n        A list of labels.\n    \"\"\"\n    model_name = model.name if isinstance(model, Model) else model\n    return [\n        Label(**label)\n        for label in self.conn.get_labels_from_model(model_name)  # type: ignore\n    ]\n</code></pre>"},{"location":"client_api/Client/#valor.Client.get_model","title":"<code>valor.Client.get_model(name)</code>","text":"<p>Gets a model by name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the model to fetch.</p> required <p>Returns:</p> Type Description <code>Union[Model, None]</code> <p>A Model with matching name or 'None' if one doesn't exist.</p> Source code in <code>valor/coretypes.py</code> <pre><code>def get_model(\n    self,\n    name: str,\n) -&gt; Union[Model, None]:\n    \"\"\"\n    Gets a model by name.\n\n    Parameters\n    ----------\n    name : str\n        The name of the model to fetch.\n\n    Returns\n    -------\n    Union[valor.Model, None]\n        A Model with matching name or 'None' if one doesn't exist.\n    \"\"\"\n    return Model.decode_value(\n        {\n            **self.conn.get_model(name),\n            \"connection\": self.conn,\n        }\n    )\n</code></pre>"},{"location":"client_api/Client/#valor.Client.get_model_eval_requests","title":"<code>valor.Client.get_model_eval_requests(model)</code>","text":"<p>Get all evaluations that have been created for a model.</p> <p>This does not return evaluation results.</p> <p><code>GET</code> endpoint.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>str</code> <p>The model to search by.</p> required <p>Returns:</p> Type Description <code>List[Evaluation]</code> <p>A list of evaluations.</p> Source code in <code>valor/coretypes.py</code> <pre><code>def get_model_eval_requests(\n    self, model: Union[Model, str]\n) -&gt; List[Evaluation]:\n    \"\"\"\n    Get all evaluations that have been created for a model.\n\n    This does not return evaluation results.\n\n    `GET` endpoint.\n\n    Parameters\n    ----------\n    model : str\n        The model to search by.\n\n    Returns\n    -------\n    List[Evaluation]\n        A list of evaluations.\n    \"\"\"\n    model_name = model.name if isinstance(model, Model) else model\n    return [\n        Evaluation(**evaluation, connection=self.conn)\n        for evaluation in self.conn.get_model_eval_requests(model_name)  # type: ignore\n    ]\n</code></pre>"},{"location":"client_api/Client/#valor.Client.get_model_status","title":"<code>valor.Client.get_model_status(dataset_name, model_name)</code>","text":"<p>Get the state of a given model over a dataset.</p> <p>Parameters:</p> Name Type Description Default <code>dataset_name</code> <code>str</code> <p>The name of the dataset that the model is operating over.</p> required <code>model_name</code> <code>str</code> <p>The name of the model we want to fetch the state of.</p> required <p>Returns:</p> Type Description <code>Union[TableStatus, None]</code> <p>The state of the model or 'None' if the model doesn't exist.</p> Source code in <code>valor/coretypes.py</code> <pre><code>def get_model_status(\n    self,\n    dataset_name: str,\n    model_name: str,\n) -&gt; Optional[TableStatus]:\n    \"\"\"\n    Get the state of a given model over a dataset.\n\n    Parameters\n    ----------\n    dataset_name : str\n        The name of the dataset that the model is operating over.\n    model_name : str\n        The name of the model we want to fetch the state of.\n\n    Returns\n    ------\n    Union[TableStatus, None]\n        The state of the model or 'None' if the model doesn't exist.\n    \"\"\"\n    try:\n        return self.conn.get_model_status(dataset_name, model_name)\n    except ClientException as e:\n        if e.status_code == 404:\n            return None\n        raise e\n</code></pre>"},{"location":"client_api/Client/#valor.Client.get_models","title":"<code>valor.Client.get_models(filters=None)</code>","text":"<p>Get all models using an optional filter.</p> <p>Parameters:</p> Name Type Description Default <code>filters</code> <code>Filter</code> <p>Optional constraints to filter by.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Model]</code> <p>A list of models.</p> Source code in <code>valor/coretypes.py</code> <pre><code>def get_models(\n    self,\n    filters: Optional[Filter] = None,\n) -&gt; List[Model]:\n    \"\"\"\n    Get all models using an optional filter.\n\n    Parameters\n    ----------\n    filters : Filter, optional\n        Optional constraints to filter by.\n\n    Returns\n    ------\n    List[valor.Model]\n        A list of models.\n    \"\"\"\n    model_list = []\n    filters = filters if filters is not None else Filter()\n    for kwargs in self.conn.get_models(filters.to_dict()):\n        model = Model.decode_value({**kwargs, \"connection\": self.conn})\n        model_list.append(model)\n    return model_list\n</code></pre>"},{"location":"client_api/Client/#valor.Client.get_prediction","title":"<code>valor.Client.get_prediction(dataset, model, datum)</code>","text":"<p>Get a particular prediction.</p> <p>Parameters:</p> Name Type Description Default <code>dataset</code> <code>Union[Dataset, str]</code> <p>The dataset the datum belongs to.</p> required <code>model</code> <code>Union[Model, str]</code> <p>The model that made the prediction.</p> required <code>datum</code> <code>Union[Datum, str]</code> <p>The desired datum.</p> required <p>Returns:</p> Type Description <code>Union[Prediction, None]</code> <p>The matching prediction or 'None' if it doesn't exist.</p> Source code in <code>valor/coretypes.py</code> <pre><code>def get_prediction(\n    self,\n    dataset: Union[Dataset, str],\n    model: Union[Model, str],\n    datum: Union[Datum, str],\n) -&gt; Union[Prediction, None]:\n    \"\"\"\n    Get a particular prediction.\n\n    Parameters\n    ----------\n    dataset : Union[Dataset, str]\n        The dataset the datum belongs to.\n    model : Union[Model, str]\n        The model that made the prediction.\n    datum : Union[Datum, str]\n        The desired datum.\n\n    Returns\n    ----------\n    Union[Prediction, None]\n        The matching prediction or 'None' if it doesn't exist.\n    \"\"\"\n    dataset_name = (\n        dataset.name if isinstance(dataset, Dataset) else dataset\n    )\n    model_name = model.name if isinstance(model, Model) else model\n    datum_uid = datum.uid if isinstance(datum, Datum) else datum\n\n    resp = self.conn.get_prediction(\n        dataset_name=dataset_name,  # type: ignore\n        model_name=model_name,  # type: ignore\n        datum_uid=datum_uid,  # type: ignore\n    )\n    resp.pop(\"dataset_name\")\n    resp.pop(\"model_name\")\n    return Prediction.decode_value(resp)\n</code></pre>"},{"location":"client_api/Dataset/","title":"Dataset","text":"<p>               Bases: <code>StaticCollection</code></p> <p>A class describing a given dataset.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>String</code> <p>The name of the dataset.</p> <code>metadata</code> <code>Dictionary</code> <p>A dictionary of metadata that describes the dataset.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Dataset.create(name=\"dataset1\")\n&gt;&gt;&gt; Dataset.create(name=\"dataset1\", metadata={})\n&gt;&gt;&gt; Dataset.create(name=\"dataset1\", metadata={\"foo\": \"bar\", \"pi\": 3.14})\n</code></pre> Source code in <code>valor/coretypes.py</code> <pre><code>class Dataset(StaticCollection):\n    \"\"\"\n    A class describing a given dataset.\n\n    Attributes\n    ----------\n    name : String\n        The name of the dataset.\n    metadata : Dictionary\n        A dictionary of metadata that describes the dataset.\n\n    Examples\n    --------\n    &gt;&gt;&gt; Dataset.create(name=\"dataset1\")\n    &gt;&gt;&gt; Dataset.create(name=\"dataset1\", metadata={})\n    &gt;&gt;&gt; Dataset.create(name=\"dataset1\", metadata={\"foo\": \"bar\", \"pi\": 3.14})\n    \"\"\"\n\n    name: String = String.symbolic(owner=\"dataset\", name=\"name\")\n    metadata: Dictionary = Dictionary.symbolic(\n        owner=\"dataset\", name=\"metadata\"\n    )\n\n    def __init__(\n        self,\n        *,\n        name: str,\n        metadata: Optional[dict] = None,\n        connection: Optional[ClientConnection] = None,\n    ):\n        \"\"\"\n        Creates a local instance of a dataset.\n\n        Use 'Dataset.create' classmethod to create a dataset with persistence.\n\n        Parameters\n        ----------\n        name : str\n            The name of the dataset.\n        metadata : dict, optional\n            A dictionary of metadata that describes the dataset.\n        connection : ClientConnection, optional\n            An initialized client connection.\n        \"\"\"\n        self.conn = connection\n        super().__init__(name=name, metadata=metadata if metadata else dict())\n\n    @classmethod\n    def create(\n        cls,\n        name: str,\n        metadata: Optional[Dict[str, Any]] = None,\n        connection: Optional[ClientConnection] = None,\n    ) -&gt; Dataset:\n        \"\"\"\n        Creates a dataset that persists in the back end.\n\n        Parameters\n        ----------\n        name : str\n            The name of the dataset.\n        metadata : dict, optional\n            A dictionary of metadata that describes the dataset.\n        connection : ClientConnection, optional\n            An initialized client connection.\n        \"\"\"\n        dataset = cls(name=name, metadata=metadata, connection=connection)\n        Client(dataset.conn).create_dataset(dataset)\n        return dataset\n\n    @classmethod\n    def get(\n        cls,\n        name: str,\n        connection: Optional[ClientConnection] = None,\n    ) -&gt; Union[Dataset, None]:\n        \"\"\"\n        Retrieves a dataset from the back end database.\n\n        Parameters\n        ----------\n        name : str\n            The name of the dataset.\n\n        Returns\n        -------\n        Union[valor.Dataset, None]\n            The dataset or 'None' if it doesn't exist.\n        \"\"\"\n        return Client(connection).get_dataset(name)\n\n    def add_groundtruth(\n        self,\n        groundtruth: GroundTruth,\n    ) -&gt; None:\n        \"\"\"\n        Add a ground truth to the dataset.\n\n        Parameters\n        ----------\n        groundtruth : GroundTruth\n            The ground truth to create.\n        \"\"\"\n        Client(self.conn).create_groundtruths(\n            dataset=self,\n            groundtruths=[groundtruth],\n        )\n\n    def add_groundtruths(\n        self,\n        groundtruths: List[GroundTruth],\n        ignore_existing_datums: bool = False,\n        timeout: Optional[float] = 10.0,\n    ) -&gt; None:\n        \"\"\"\n        Add multiple ground truths to the dataset.\n\n        Parameters\n        ----------\n        groundtruths : List[GroundTruth]\n            The ground truths to create.\n        ignore_existing_datums : bool, default=False\n            If True, will ignore datums that already exist in the backend.\n            If False, will raise an error if any datums already exist.\n            Default is False.\n        timeout : float, optional\n            The number of seconds the client should wait until raising a timeout.\n        \"\"\"\n        Client(self.conn).create_groundtruths(\n            dataset=self,\n            groundtruths=groundtruths,\n            ignore_existing_datums=ignore_existing_datums,\n            timeout=timeout,\n        )\n\n    def get_groundtruth(\n        self,\n        datum: Union[Datum, str],\n    ) -&gt; Union[GroundTruth, None]:\n        \"\"\"\n        Get a particular ground truth.\n\n        Parameters\n        ----------\n        datum : Union[Datum, str]\n            The desired datum.\n\n        Returns\n        ----------\n        Union[GroundTruth, None]\n            The matching ground truth or 'None' if it doesn't exist.\n        \"\"\"\n        return Client(self.conn).get_groundtruth(dataset=self, datum=datum)\n\n    def get_labels(\n        self,\n    ) -&gt; List[Label]:\n        \"\"\"\n        Get all labels associated with a given dataset.\n\n        Returns\n        ----------\n        List[Label]\n            A list of `Labels` associated with the dataset.\n        \"\"\"\n        return Client(self.conn).get_labels_from_dataset(self)\n\n    def get_datums(self, filters: Optional[Filter] = None) -&gt; List[Datum]:\n        \"\"\"\n        Get all datums associated with a given dataset.\n\n        Parameters\n        ----------\n        filters : Filter, optional\n            An optional datum filter.\n\n        Returns\n        ----------\n        List[Datum]\n            A list of `Datums` associated with the dataset.\n        \"\"\"\n        if filters is None:\n            filters = Filter()\n        filters.datasets = Dataset.name == self.name  # type: ignore - #issue 605\n        return Client(self.conn).get_datums(filters=filters)\n\n    def get_evaluations(\n        self,\n        metrics_to_sort_by: Optional[\n            Dict[str, Union[Dict[str, str], str]]\n        ] = None,\n        *_,\n        timeout: Optional[float] = None,\n    ) -&gt; List[Evaluation]:\n        \"\"\"\n        Get all evaluations associated with a given dataset.\n\n        Parameters\n        ----------\n        metrics_to_sort_by : dict[str, str | dict[str, str]], optional\n            An optional dict of metric types to sort the evaluations by.\n        timeout : float, optional\n            The number of seconds the client should wait until raising a timeout.\n\n        Returns\n        ----------\n        List[Evaluation]\n            A list of `Evaluations` associated with the dataset.\n        \"\"\"\n        return Client(self.conn).get_evaluations(\n            datasets=[self],\n            metrics_to_sort_by=metrics_to_sort_by,\n            timeout=timeout,\n        )\n\n    def get_summary(\n        self, *_, timeout: Optional[float] = None\n    ) -&gt; DatasetSummary:\n        \"\"\"\n        Get the summary of a given dataset.\n\n        Parameters\n        ----------\n        timeout : float, optional\n            The number of seconds the client should wait until raising a timeout.\n\n        Returns\n        -------\n        DatasetSummary\n            The summary of the dataset. This class has the following fields:\n\n            name : name of the dataset\n\n            num_datums : total number of datums in the dataset\n\n            num_annotations : total number of labeled annotations in the dataset; if an\n            object (such as a bounding box) has multiple labels, then each label is counted separately\n\n            num_bounding_boxes : total number of bounding boxes in the dataset\n\n            num_polygons : total number of polygons in the dataset\n\n            num_rasters : total number of rasters in the dataset\n\n            labels : list of the unique labels in the dataset\n\n            datum_metadata : list of the unique metadata dictionaries in the dataset that are associated\n            to datums\n\n            groundtruth_annotation_metadata : list of the unique metadata dictionaries in the dataset that are\n            associated to annotations\n        \"\"\"\n        return Client(self.conn).get_dataset_summary(self.name, timeout=timeout)  # type: ignore\n\n    def finalize(\n        self,\n    ):\n        \"\"\"\n        Finalizes the dataset such that new ground truths cannot be added to it.\n        \"\"\"\n        return Client(self.conn).finalize_dataset(self)\n\n    def delete(\n        self,\n        timeout: int = 0,\n    ):\n        \"\"\"\n        Delete the dataset from the back end.\n\n        Parameters\n        ----------\n        timeout : int, default=0\n            Sets a timeout in seconds.\n        \"\"\"\n        Client(self.conn).delete_dataset(self.name, timeout)  # type: ignore\n</code></pre>"},{"location":"client_api/Dataset/#valor.Dataset-functions","title":"Functions","text":""},{"location":"client_api/Dataset/#valor.Dataset.__init__","title":"<code>valor.Dataset.__init__(*, name, metadata=None, connection=None)</code>","text":"<p>Creates a local instance of a dataset.</p> <p>Use 'Dataset.create' classmethod to create a dataset with persistence.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the dataset.</p> required <code>metadata</code> <code>dict</code> <p>A dictionary of metadata that describes the dataset.</p> <code>None</code> <code>connection</code> <code>ClientConnection</code> <p>An initialized client connection.</p> <code>None</code> Source code in <code>valor/coretypes.py</code> <pre><code>def __init__(\n    self,\n    *,\n    name: str,\n    metadata: Optional[dict] = None,\n    connection: Optional[ClientConnection] = None,\n):\n    \"\"\"\n    Creates a local instance of a dataset.\n\n    Use 'Dataset.create' classmethod to create a dataset with persistence.\n\n    Parameters\n    ----------\n    name : str\n        The name of the dataset.\n    metadata : dict, optional\n        A dictionary of metadata that describes the dataset.\n    connection : ClientConnection, optional\n        An initialized client connection.\n    \"\"\"\n    self.conn = connection\n    super().__init__(name=name, metadata=metadata if metadata else dict())\n</code></pre>"},{"location":"client_api/Dataset/#valor.Dataset.add_groundtruth","title":"<code>valor.Dataset.add_groundtruth(groundtruth)</code>","text":"<p>Add a ground truth to the dataset.</p> <p>Parameters:</p> Name Type Description Default <code>groundtruth</code> <code>GroundTruth</code> <p>The ground truth to create.</p> required Source code in <code>valor/coretypes.py</code> <pre><code>def add_groundtruth(\n    self,\n    groundtruth: GroundTruth,\n) -&gt; None:\n    \"\"\"\n    Add a ground truth to the dataset.\n\n    Parameters\n    ----------\n    groundtruth : GroundTruth\n        The ground truth to create.\n    \"\"\"\n    Client(self.conn).create_groundtruths(\n        dataset=self,\n        groundtruths=[groundtruth],\n    )\n</code></pre>"},{"location":"client_api/Dataset/#valor.Dataset.add_groundtruths","title":"<code>valor.Dataset.add_groundtruths(groundtruths, ignore_existing_datums=False, timeout=10.0)</code>","text":"<p>Add multiple ground truths to the dataset.</p> <p>Parameters:</p> Name Type Description Default <code>groundtruths</code> <code>List[GroundTruth]</code> <p>The ground truths to create.</p> required <code>ignore_existing_datums</code> <code>bool</code> <p>If True, will ignore datums that already exist in the backend. If False, will raise an error if any datums already exist. Default is False.</p> <code>False</code> <code>timeout</code> <code>float</code> <p>The number of seconds the client should wait until raising a timeout.</p> <code>10.0</code> Source code in <code>valor/coretypes.py</code> <pre><code>def add_groundtruths(\n    self,\n    groundtruths: List[GroundTruth],\n    ignore_existing_datums: bool = False,\n    timeout: Optional[float] = 10.0,\n) -&gt; None:\n    \"\"\"\n    Add multiple ground truths to the dataset.\n\n    Parameters\n    ----------\n    groundtruths : List[GroundTruth]\n        The ground truths to create.\n    ignore_existing_datums : bool, default=False\n        If True, will ignore datums that already exist in the backend.\n        If False, will raise an error if any datums already exist.\n        Default is False.\n    timeout : float, optional\n        The number of seconds the client should wait until raising a timeout.\n    \"\"\"\n    Client(self.conn).create_groundtruths(\n        dataset=self,\n        groundtruths=groundtruths,\n        ignore_existing_datums=ignore_existing_datums,\n        timeout=timeout,\n    )\n</code></pre>"},{"location":"client_api/Dataset/#valor.Dataset.create","title":"<code>valor.Dataset.create(name, metadata=None, connection=None)</code>  <code>classmethod</code>","text":"<p>Creates a dataset that persists in the back end.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the dataset.</p> required <code>metadata</code> <code>dict</code> <p>A dictionary of metadata that describes the dataset.</p> <code>None</code> <code>connection</code> <code>ClientConnection</code> <p>An initialized client connection.</p> <code>None</code> Source code in <code>valor/coretypes.py</code> <pre><code>@classmethod\ndef create(\n    cls,\n    name: str,\n    metadata: Optional[Dict[str, Any]] = None,\n    connection: Optional[ClientConnection] = None,\n) -&gt; Dataset:\n    \"\"\"\n    Creates a dataset that persists in the back end.\n\n    Parameters\n    ----------\n    name : str\n        The name of the dataset.\n    metadata : dict, optional\n        A dictionary of metadata that describes the dataset.\n    connection : ClientConnection, optional\n        An initialized client connection.\n    \"\"\"\n    dataset = cls(name=name, metadata=metadata, connection=connection)\n    Client(dataset.conn).create_dataset(dataset)\n    return dataset\n</code></pre>"},{"location":"client_api/Dataset/#valor.Dataset.delete","title":"<code>valor.Dataset.delete(timeout=0)</code>","text":"<p>Delete the dataset from the back end.</p> <p>Parameters:</p> Name Type Description Default <code>timeout</code> <code>int</code> <p>Sets a timeout in seconds.</p> <code>0</code> Source code in <code>valor/coretypes.py</code> <pre><code>def delete(\n    self,\n    timeout: int = 0,\n):\n    \"\"\"\n    Delete the dataset from the back end.\n\n    Parameters\n    ----------\n    timeout : int, default=0\n        Sets a timeout in seconds.\n    \"\"\"\n    Client(self.conn).delete_dataset(self.name, timeout)  # type: ignore\n</code></pre>"},{"location":"client_api/Dataset/#valor.Dataset.finalize","title":"<code>valor.Dataset.finalize()</code>","text":"<p>Finalizes the dataset such that new ground truths cannot be added to it.</p> Source code in <code>valor/coretypes.py</code> <pre><code>def finalize(\n    self,\n):\n    \"\"\"\n    Finalizes the dataset such that new ground truths cannot be added to it.\n    \"\"\"\n    return Client(self.conn).finalize_dataset(self)\n</code></pre>"},{"location":"client_api/Dataset/#valor.Dataset.get","title":"<code>valor.Dataset.get(name, connection=None)</code>  <code>classmethod</code>","text":"<p>Retrieves a dataset from the back end database.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the dataset.</p> required <p>Returns:</p> Type Description <code>Union[Dataset, None]</code> <p>The dataset or 'None' if it doesn't exist.</p> Source code in <code>valor/coretypes.py</code> <pre><code>@classmethod\ndef get(\n    cls,\n    name: str,\n    connection: Optional[ClientConnection] = None,\n) -&gt; Union[Dataset, None]:\n    \"\"\"\n    Retrieves a dataset from the back end database.\n\n    Parameters\n    ----------\n    name : str\n        The name of the dataset.\n\n    Returns\n    -------\n    Union[valor.Dataset, None]\n        The dataset or 'None' if it doesn't exist.\n    \"\"\"\n    return Client(connection).get_dataset(name)\n</code></pre>"},{"location":"client_api/Dataset/#valor.Dataset.get_datums","title":"<code>valor.Dataset.get_datums(filters=None)</code>","text":"<p>Get all datums associated with a given dataset.</p> <p>Parameters:</p> Name Type Description Default <code>filters</code> <code>Filter</code> <p>An optional datum filter.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Datum]</code> <p>A list of <code>Datums</code> associated with the dataset.</p> Source code in <code>valor/coretypes.py</code> <pre><code>def get_datums(self, filters: Optional[Filter] = None) -&gt; List[Datum]:\n    \"\"\"\n    Get all datums associated with a given dataset.\n\n    Parameters\n    ----------\n    filters : Filter, optional\n        An optional datum filter.\n\n    Returns\n    ----------\n    List[Datum]\n        A list of `Datums` associated with the dataset.\n    \"\"\"\n    if filters is None:\n        filters = Filter()\n    filters.datasets = Dataset.name == self.name  # type: ignore - #issue 605\n    return Client(self.conn).get_datums(filters=filters)\n</code></pre>"},{"location":"client_api/Dataset/#valor.Dataset.get_evaluations","title":"<code>valor.Dataset.get_evaluations(metrics_to_sort_by=None, *_, timeout=None)</code>","text":"<p>Get all evaluations associated with a given dataset.</p> <p>Parameters:</p> Name Type Description Default <code>metrics_to_sort_by</code> <code>dict[str, str | dict[str, str]]</code> <p>An optional dict of metric types to sort the evaluations by.</p> <code>None</code> <code>timeout</code> <code>float</code> <p>The number of seconds the client should wait until raising a timeout.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Evaluation]</code> <p>A list of <code>Evaluations</code> associated with the dataset.</p> Source code in <code>valor/coretypes.py</code> <pre><code>def get_evaluations(\n    self,\n    metrics_to_sort_by: Optional[\n        Dict[str, Union[Dict[str, str], str]]\n    ] = None,\n    *_,\n    timeout: Optional[float] = None,\n) -&gt; List[Evaluation]:\n    \"\"\"\n    Get all evaluations associated with a given dataset.\n\n    Parameters\n    ----------\n    metrics_to_sort_by : dict[str, str | dict[str, str]], optional\n        An optional dict of metric types to sort the evaluations by.\n    timeout : float, optional\n        The number of seconds the client should wait until raising a timeout.\n\n    Returns\n    ----------\n    List[Evaluation]\n        A list of `Evaluations` associated with the dataset.\n    \"\"\"\n    return Client(self.conn).get_evaluations(\n        datasets=[self],\n        metrics_to_sort_by=metrics_to_sort_by,\n        timeout=timeout,\n    )\n</code></pre>"},{"location":"client_api/Dataset/#valor.Dataset.get_groundtruth","title":"<code>valor.Dataset.get_groundtruth(datum)</code>","text":"<p>Get a particular ground truth.</p> <p>Parameters:</p> Name Type Description Default <code>datum</code> <code>Union[Datum, str]</code> <p>The desired datum.</p> required <p>Returns:</p> Type Description <code>Union[GroundTruth, None]</code> <p>The matching ground truth or 'None' if it doesn't exist.</p> Source code in <code>valor/coretypes.py</code> <pre><code>def get_groundtruth(\n    self,\n    datum: Union[Datum, str],\n) -&gt; Union[GroundTruth, None]:\n    \"\"\"\n    Get a particular ground truth.\n\n    Parameters\n    ----------\n    datum : Union[Datum, str]\n        The desired datum.\n\n    Returns\n    ----------\n    Union[GroundTruth, None]\n        The matching ground truth or 'None' if it doesn't exist.\n    \"\"\"\n    return Client(self.conn).get_groundtruth(dataset=self, datum=datum)\n</code></pre>"},{"location":"client_api/Dataset/#valor.Dataset.get_labels","title":"<code>valor.Dataset.get_labels()</code>","text":"<p>Get all labels associated with a given dataset.</p> <p>Returns:</p> Type Description <code>List[Label]</code> <p>A list of <code>Labels</code> associated with the dataset.</p> Source code in <code>valor/coretypes.py</code> <pre><code>def get_labels(\n    self,\n) -&gt; List[Label]:\n    \"\"\"\n    Get all labels associated with a given dataset.\n\n    Returns\n    ----------\n    List[Label]\n        A list of `Labels` associated with the dataset.\n    \"\"\"\n    return Client(self.conn).get_labels_from_dataset(self)\n</code></pre>"},{"location":"client_api/Dataset/#valor.Dataset.get_summary","title":"<code>valor.Dataset.get_summary(*_, timeout=None)</code>","text":"<p>Get the summary of a given dataset.</p> <p>Parameters:</p> Name Type Description Default <code>timeout</code> <code>float</code> <p>The number of seconds the client should wait until raising a timeout.</p> <code>None</code> <p>Returns:</p> Type Description <code>DatasetSummary</code> <p>The summary of the dataset. This class has the following fields:</p> <p>name : name of the dataset</p> <p>num_datums : total number of datums in the dataset</p> <p>num_annotations : total number of labeled annotations in the dataset; if an object (such as a bounding box) has multiple labels, then each label is counted separately</p> <p>num_bounding_boxes : total number of bounding boxes in the dataset</p> <p>num_polygons : total number of polygons in the dataset</p> <p>num_rasters : total number of rasters in the dataset</p> <p>labels : list of the unique labels in the dataset</p> <p>datum_metadata : list of the unique metadata dictionaries in the dataset that are associated to datums</p> <p>groundtruth_annotation_metadata : list of the unique metadata dictionaries in the dataset that are associated to annotations</p> Source code in <code>valor/coretypes.py</code> <pre><code>def get_summary(\n    self, *_, timeout: Optional[float] = None\n) -&gt; DatasetSummary:\n    \"\"\"\n    Get the summary of a given dataset.\n\n    Parameters\n    ----------\n    timeout : float, optional\n        The number of seconds the client should wait until raising a timeout.\n\n    Returns\n    -------\n    DatasetSummary\n        The summary of the dataset. This class has the following fields:\n\n        name : name of the dataset\n\n        num_datums : total number of datums in the dataset\n\n        num_annotations : total number of labeled annotations in the dataset; if an\n        object (such as a bounding box) has multiple labels, then each label is counted separately\n\n        num_bounding_boxes : total number of bounding boxes in the dataset\n\n        num_polygons : total number of polygons in the dataset\n\n        num_rasters : total number of rasters in the dataset\n\n        labels : list of the unique labels in the dataset\n\n        datum_metadata : list of the unique metadata dictionaries in the dataset that are associated\n        to datums\n\n        groundtruth_annotation_metadata : list of the unique metadata dictionaries in the dataset that are\n        associated to annotations\n    \"\"\"\n    return Client(self.conn).get_dataset_summary(self.name, timeout=timeout)  # type: ignore\n</code></pre>"},{"location":"client_api/Datum/","title":"Datum","text":"<p>               Bases: <code>StaticCollection</code></p> <p>A class used to store information about a datum for either a 'GroundTruth' or a 'Prediction'.</p> <p>Attributes:</p> Name Type Description <code>uid</code> <code>String</code> <p>The UID of the datum.</p> <code>text</code> <code>(String, optional)</code> <p>The text of the datum, if the datum is a piece of text, otherwise None.</p> <code>metadata</code> <code>Dictionary</code> <p>A dictionary of metadata that describes the datum.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Datum(uid=\"uid1\")\n&gt;&gt;&gt; Datum(uid=\"uid1\", metadata={})\n&gt;&gt;&gt; Datum(uid=\"uid1\", metadata={\"foo\": \"bar\", \"pi\": 3.14})\n&gt;&gt;&gt; Datum(uid=\"uid2\", text=\"Did Lincoln win the election of 1860?\", metadata={\"query_created_by\": \"Alice\"})\n</code></pre> Source code in <code>valor/schemas/symbolic/collections.py</code> <pre><code>class Datum(StaticCollection):\n    \"\"\"\n    A class used to store information about a datum for either a 'GroundTruth' or a 'Prediction'.\n\n    Attributes\n    ----------\n    uid : String\n        The UID of the datum.\n    text : String, optional\n        The text of the datum, if the datum is a piece of text, otherwise None.\n    metadata : Dictionary\n        A dictionary of metadata that describes the datum.\n\n    Examples\n    --------\n    &gt;&gt;&gt; Datum(uid=\"uid1\")\n    &gt;&gt;&gt; Datum(uid=\"uid1\", metadata={})\n    &gt;&gt;&gt; Datum(uid=\"uid1\", metadata={\"foo\": \"bar\", \"pi\": 3.14})\n    &gt;&gt;&gt; Datum(uid=\"uid2\", text=\"Did Lincoln win the election of 1860?\", metadata={\"query_created_by\": \"Alice\"})\n    \"\"\"\n\n    uid: String = String.symbolic(owner=\"datum\", name=\"uid\")\n    text: String = String.symbolic(owner=\"datum\", name=\"text\")\n    metadata: Dictionary = Dictionary.symbolic(owner=\"datum\", name=\"metadata\")\n\n    def __init__(\n        self,\n        *,\n        uid: str,\n        text: Optional[str] = None,\n        metadata: Optional[dict] = None,\n    ):\n        \"\"\"\n        Constructs a datum.\n\n        Parameters\n        ----------\n        uid : str\n            The UID of the datum.\n        text : str, optional\n            The text of the datum, if the datum is a piece of text, otherwise None.\n        metadata : dict, optional\n            A dictionary of metadata that describes the datum.\n        \"\"\"\n        super().__init__(\n            uid=uid, text=text, metadata=metadata if metadata else dict()\n        )\n\n    @staticmethod\n    def formatting() -&gt; Dict[str, Any]:\n        \"\"\"Attribute format mapping.\"\"\"\n        return {\n            \"text\": String.nullable,\n        }\n</code></pre>"},{"location":"client_api/Datum/#valor.Datum-functions","title":"Functions","text":""},{"location":"client_api/Datum/#valor.Datum.__init__","title":"<code>valor.Datum.__init__(*, uid, text=None, metadata=None)</code>","text":"<p>Constructs a datum.</p> <p>Parameters:</p> Name Type Description Default <code>uid</code> <code>str</code> <p>The UID of the datum.</p> required <code>text</code> <code>str</code> <p>The text of the datum, if the datum is a piece of text, otherwise None.</p> <code>None</code> <code>metadata</code> <code>dict</code> <p>A dictionary of metadata that describes the datum.</p> <code>None</code> Source code in <code>valor/schemas/symbolic/collections.py</code> <pre><code>def __init__(\n    self,\n    *,\n    uid: str,\n    text: Optional[str] = None,\n    metadata: Optional[dict] = None,\n):\n    \"\"\"\n    Constructs a datum.\n\n    Parameters\n    ----------\n    uid : str\n        The UID of the datum.\n    text : str, optional\n        The text of the datum, if the datum is a piece of text, otherwise None.\n    metadata : dict, optional\n        A dictionary of metadata that describes the datum.\n    \"\"\"\n    super().__init__(\n        uid=uid, text=text, metadata=metadata if metadata else dict()\n    )\n</code></pre>"},{"location":"client_api/Datum/#valor.Datum.formatting","title":"<code>valor.Datum.formatting()</code>  <code>staticmethod</code>","text":"<p>Attribute format mapping.</p> Source code in <code>valor/schemas/symbolic/collections.py</code> <pre><code>@staticmethod\ndef formatting() -&gt; Dict[str, Any]:\n    \"\"\"Attribute format mapping.\"\"\"\n    return {\n        \"text\": String.nullable,\n    }\n</code></pre>"},{"location":"client_api/Evaluation/","title":"Evaluation","text":"<p>Wraps <code>valor.client.Job</code> to provide evaluation-specifc members.</p> Source code in <code>valor/coretypes.py</code> <pre><code>class Evaluation:\n    \"\"\"\n    Wraps `valor.client.Job` to provide evaluation-specifc members.\n    \"\"\"\n\n    def __init__(\n        self, connection: Optional[ClientConnection] = None, **kwargs\n    ):\n        \"\"\"\n        Defines important attributes of the API's `EvaluationResult`.\n\n        Attributes\n        ----------\n        id : int\n            The ID of the evaluation.\n        dataset_names : list[str]\n            The names of the datasets the model was evaluated over.\n        model_name : str\n            The name of the evaluated model.\n        filters : dict\n            The filter used to select data partitions for evaluation.\n        status : EvaluationStatus\n            The status of the evaluation.\n        metrics : List[dict]\n            A list of metric dictionaries returned by the job.\n        confusion_matrices : List[dict]\n            A list of confusion matrix dictionaries returned by the job.\n        meta : dict[str, str | float | dict], optional\n            A dictionary of metadata describing the evaluation run.\n        \"\"\"\n        if not connection:\n            connection = get_connection()\n        self.conn = connection\n        self.update(**kwargs)\n\n    def update(\n        self,\n        *_,\n        id: int,\n        dataset_names: list[str],\n        model_name: str,\n        filters: dict,\n        parameters: EvaluationParameters,\n        status: EvaluationStatus,\n        metrics: List[Dict],\n        confusion_matrices: List[Dict],\n        created_at: str,\n        meta: dict[str, str | float | dict] | None,\n        **kwargs,\n    ):\n        self.id = id\n        self.dataset_names = dataset_names\n        self.model_name = model_name\n        self.filters = filters\n        self.parameters = (\n            EvaluationParameters(**parameters)\n            if isinstance(parameters, dict)\n            else parameters\n        )\n        self.status = EvaluationStatus(status)\n        self.metrics = metrics\n        self.meta = meta\n        self.confusion_matrices = confusion_matrices\n        self.kwargs = kwargs\n        self.ignored_pred_labels: Optional[List[Label]] = None\n        self.missing_pred_labels: Optional[List[Label]] = None\n        self.created_at = datetime.datetime.strptime(\n            created_at, \"%Y-%m-%dT%H:%M:%S.%fZ\"\n        ).replace(tzinfo=datetime.timezone.utc)\n\n        for k, v in kwargs.items():\n            setattr(self, k, v)\n\n    def poll(self) -&gt; EvaluationStatus:\n        \"\"\"\n        Poll the back end.\n\n        Updates the evaluation with the latest state from the back end.\n\n        Returns\n        -------\n        enums.EvaluationStatus\n            The status of the evaluation.\n\n        Raises\n        ----------\n        ClientException\n            If an Evaluation with the given `evaluation_id` is not found.\n        \"\"\"\n        response = self.conn.get_evaluations(\n            evaluation_ids=[self.id],\n            models=None,\n            datasets=None,\n            metrics_to_sort_by=None,\n        )\n        if not response:\n            raise EvaluationDoesNotExist(self.id)\n        self.update(**response[0])\n        return self.status\n\n    def wait_for_completion(\n        self,\n        *,\n        timeout: Optional[int] = None,\n        interval: float = 1.0,\n    ) -&gt; EvaluationStatus:\n        \"\"\"\n        Blocking function that waits for evaluation to finish.\n\n        Parameters\n        ----------\n        timeout : int, optional\n            Length of timeout in seconds.\n        interval : float, default=1.0\n            Polling interval in seconds.\n        \"\"\"\n        t_start = time.time()\n        while self.poll() not in [\n            EvaluationStatus.DONE,\n            EvaluationStatus.FAILED,\n        ]:\n            time.sleep(interval)\n            if timeout and time.time() - t_start &gt; timeout:\n                raise TimeoutError\n        return self.status\n\n    def __str__(self) -&gt; str:\n        \"\"\"Dumps the object into a JSON formatted string.\"\"\"\n        return json.dumps(self.to_dict(), indent=4)\n\n    def to_dict(self) -&gt; dict:\n        \"\"\"\n        Defines how a `valor.Evaluation` object is serialized into a dictionary.\n\n        Returns\n        ----------\n        dict\n            A dictionary describing an evaluation.\n        \"\"\"\n        return {\n            \"id\": self.id,\n            \"dataset_names\": self.dataset_names,\n            \"model_name\": self.model_name,\n            \"filters\": self.filters,\n            \"parameters\": asdict(self.parameters),\n            \"status\": self.status.value,\n            \"metrics\": self.metrics,\n            \"confusion_matrices\": self.confusion_matrices,\n            \"meta\": self.meta,\n            **self.kwargs,\n        }\n\n    def to_dataframe(\n        self,\n        stratify_by: Optional[Tuple[str, str]] = None,\n    ):\n        \"\"\"\n        Get all metrics associated with a Model and return them in a `pd.DataFrame`.\n\n        Returns\n        ----------\n        pd.DataFrame\n            Evaluation metrics being displayed in a `pd.DataFrame`.\n\n        Raises\n        ------\n        ModuleNotFoundError\n            This function requires the use of `pandas.DataFrame`.\n\n        \"\"\"\n        try:\n            import pandas as pd\n        except ModuleNotFoundError:\n            raise ModuleNotFoundError(\n                \"Must have pandas installed to use `get_metric_dataframes`.\"\n            )\n\n        if not stratify_by:\n            column_type = \"evaluation\"\n            column_name = self.id\n        else:\n            column_type = stratify_by[0]\n            column_name = stratify_by[1]\n\n        metrics = [\n            {**metric, column_type: column_name} for metric in self.metrics\n        ]\n        df = pd.DataFrame(metrics)\n        for k in [\"label\", \"parameters\"]:\n            df[k] = df[k].fillna(\"n/a\")\n        df[\"parameters\"] = df[\"parameters\"].apply(json.dumps)\n        df[\"label\"] = df[\"label\"].apply(\n            lambda x: f\"{x['key']}: {x['value']}\" if x != \"n/a\" else x\n        )\n        df = df.pivot(\n            index=[\"type\", \"parameters\", \"label\"], columns=[column_type]\n        )\n        return df\n</code></pre>"},{"location":"client_api/Evaluation/#valor.Evaluation-functions","title":"Functions","text":""},{"location":"client_api/Evaluation/#valor.Evaluation.__init__","title":"<code>valor.Evaluation.__init__(connection=None, **kwargs)</code>","text":"<p>Defines important attributes of the API's <code>EvaluationResult</code>.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The ID of the evaluation.</p> <code>dataset_names</code> <code>list[str]</code> <p>The names of the datasets the model was evaluated over.</p> <code>model_name</code> <code>str</code> <p>The name of the evaluated model.</p> <code>filters</code> <code>dict</code> <p>The filter used to select data partitions for evaluation.</p> <code>status</code> <code>EvaluationStatus</code> <p>The status of the evaluation.</p> <code>metrics</code> <code>List[dict]</code> <p>A list of metric dictionaries returned by the job.</p> <code>confusion_matrices</code> <code>List[dict]</code> <p>A list of confusion matrix dictionaries returned by the job.</p> <code>meta</code> <code>(dict[str, str | float | dict], optional)</code> <p>A dictionary of metadata describing the evaluation run.</p> Source code in <code>valor/coretypes.py</code> <pre><code>def __init__(\n    self, connection: Optional[ClientConnection] = None, **kwargs\n):\n    \"\"\"\n    Defines important attributes of the API's `EvaluationResult`.\n\n    Attributes\n    ----------\n    id : int\n        The ID of the evaluation.\n    dataset_names : list[str]\n        The names of the datasets the model was evaluated over.\n    model_name : str\n        The name of the evaluated model.\n    filters : dict\n        The filter used to select data partitions for evaluation.\n    status : EvaluationStatus\n        The status of the evaluation.\n    metrics : List[dict]\n        A list of metric dictionaries returned by the job.\n    confusion_matrices : List[dict]\n        A list of confusion matrix dictionaries returned by the job.\n    meta : dict[str, str | float | dict], optional\n        A dictionary of metadata describing the evaluation run.\n    \"\"\"\n    if not connection:\n        connection = get_connection()\n    self.conn = connection\n    self.update(**kwargs)\n</code></pre>"},{"location":"client_api/Evaluation/#valor.Evaluation.__str__","title":"<code>valor.Evaluation.__str__()</code>","text":"<p>Dumps the object into a JSON formatted string.</p> Source code in <code>valor/coretypes.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Dumps the object into a JSON formatted string.\"\"\"\n    return json.dumps(self.to_dict(), indent=4)\n</code></pre>"},{"location":"client_api/Evaluation/#valor.Evaluation.poll","title":"<code>valor.Evaluation.poll()</code>","text":"<p>Poll the back end.</p> <p>Updates the evaluation with the latest state from the back end.</p> <p>Returns:</p> Type Description <code>EvaluationStatus</code> <p>The status of the evaluation.</p> <p>Raises:</p> Type Description <code>ClientException</code> <p>If an Evaluation with the given <code>evaluation_id</code> is not found.</p> Source code in <code>valor/coretypes.py</code> <pre><code>def poll(self) -&gt; EvaluationStatus:\n    \"\"\"\n    Poll the back end.\n\n    Updates the evaluation with the latest state from the back end.\n\n    Returns\n    -------\n    enums.EvaluationStatus\n        The status of the evaluation.\n\n    Raises\n    ----------\n    ClientException\n        If an Evaluation with the given `evaluation_id` is not found.\n    \"\"\"\n    response = self.conn.get_evaluations(\n        evaluation_ids=[self.id],\n        models=None,\n        datasets=None,\n        metrics_to_sort_by=None,\n    )\n    if not response:\n        raise EvaluationDoesNotExist(self.id)\n    self.update(**response[0])\n    return self.status\n</code></pre>"},{"location":"client_api/Evaluation/#valor.Evaluation.to_dataframe","title":"<code>valor.Evaluation.to_dataframe(stratify_by=None)</code>","text":"<p>Get all metrics associated with a Model and return them in a <code>pd.DataFrame</code>.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>Evaluation metrics being displayed in a <code>pd.DataFrame</code>.</p> <p>Raises:</p> Type Description <code>ModuleNotFoundError</code> <p>This function requires the use of <code>pandas.DataFrame</code>.</p> Source code in <code>valor/coretypes.py</code> <pre><code>def to_dataframe(\n    self,\n    stratify_by: Optional[Tuple[str, str]] = None,\n):\n    \"\"\"\n    Get all metrics associated with a Model and return them in a `pd.DataFrame`.\n\n    Returns\n    ----------\n    pd.DataFrame\n        Evaluation metrics being displayed in a `pd.DataFrame`.\n\n    Raises\n    ------\n    ModuleNotFoundError\n        This function requires the use of `pandas.DataFrame`.\n\n    \"\"\"\n    try:\n        import pandas as pd\n    except ModuleNotFoundError:\n        raise ModuleNotFoundError(\n            \"Must have pandas installed to use `get_metric_dataframes`.\"\n        )\n\n    if not stratify_by:\n        column_type = \"evaluation\"\n        column_name = self.id\n    else:\n        column_type = stratify_by[0]\n        column_name = stratify_by[1]\n\n    metrics = [\n        {**metric, column_type: column_name} for metric in self.metrics\n    ]\n    df = pd.DataFrame(metrics)\n    for k in [\"label\", \"parameters\"]:\n        df[k] = df[k].fillna(\"n/a\")\n    df[\"parameters\"] = df[\"parameters\"].apply(json.dumps)\n    df[\"label\"] = df[\"label\"].apply(\n        lambda x: f\"{x['key']}: {x['value']}\" if x != \"n/a\" else x\n    )\n    df = df.pivot(\n        index=[\"type\", \"parameters\", \"label\"], columns=[column_type]\n    )\n    return df\n</code></pre>"},{"location":"client_api/Evaluation/#valor.Evaluation.to_dict","title":"<code>valor.Evaluation.to_dict()</code>","text":"<p>Defines how a <code>valor.Evaluation</code> object is serialized into a dictionary.</p> <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary describing an evaluation.</p> Source code in <code>valor/coretypes.py</code> <pre><code>def to_dict(self) -&gt; dict:\n    \"\"\"\n    Defines how a `valor.Evaluation` object is serialized into a dictionary.\n\n    Returns\n    ----------\n    dict\n        A dictionary describing an evaluation.\n    \"\"\"\n    return {\n        \"id\": self.id,\n        \"dataset_names\": self.dataset_names,\n        \"model_name\": self.model_name,\n        \"filters\": self.filters,\n        \"parameters\": asdict(self.parameters),\n        \"status\": self.status.value,\n        \"metrics\": self.metrics,\n        \"confusion_matrices\": self.confusion_matrices,\n        \"meta\": self.meta,\n        **self.kwargs,\n    }\n</code></pre>"},{"location":"client_api/Evaluation/#valor.Evaluation.wait_for_completion","title":"<code>valor.Evaluation.wait_for_completion(*, timeout=None, interval=1.0)</code>","text":"<p>Blocking function that waits for evaluation to finish.</p> <p>Parameters:</p> Name Type Description Default <code>timeout</code> <code>int</code> <p>Length of timeout in seconds.</p> <code>None</code> <code>interval</code> <code>float</code> <p>Polling interval in seconds.</p> <code>1.0</code> Source code in <code>valor/coretypes.py</code> <pre><code>def wait_for_completion(\n    self,\n    *,\n    timeout: Optional[int] = None,\n    interval: float = 1.0,\n) -&gt; EvaluationStatus:\n    \"\"\"\n    Blocking function that waits for evaluation to finish.\n\n    Parameters\n    ----------\n    timeout : int, optional\n        Length of timeout in seconds.\n    interval : float, default=1.0\n        Polling interval in seconds.\n    \"\"\"\n    t_start = time.time()\n    while self.poll() not in [\n        EvaluationStatus.DONE,\n        EvaluationStatus.FAILED,\n    ]:\n        time.sleep(interval)\n        if timeout and time.time() - t_start &gt; timeout:\n            raise TimeoutError\n    return self.status\n</code></pre>"},{"location":"client_api/Groundtruth/","title":"Groundtruth","text":"<p>               Bases: <code>StaticCollection</code></p> <p>An object describing a ground truth (e.g., a human-drawn bounding box on an image).</p> <p>Attributes:</p> Name Type Description <code>datum</code> <code>Datum</code> <p>The datum associated with the groundtruth.</p> <code>annotations</code> <code>List[Annotation]</code> <p>The list of annotations associated with the groundtruth.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; GroundTruth(\n...     datum=Datum(uid=\"uid1\"),\n...     annotations=[\n...         Annotation(\n...             labels=[Label(key=\"k1\", value=\"v1\")],\n...         )\n...     ]\n... )\n</code></pre> Source code in <code>valor/coretypes.py</code> <pre><code>class GroundTruth(StaticCollection):\n    \"\"\"\n    An object describing a ground truth (e.g., a human-drawn bounding box on an image).\n\n    Attributes\n    ----------\n    datum : Datum\n        The datum associated with the groundtruth.\n    annotations : List[Annotation]\n        The list of annotations associated with the groundtruth.\n\n    Examples\n    --------\n    &gt;&gt;&gt; GroundTruth(\n    ...     datum=Datum(uid=\"uid1\"),\n    ...     annotations=[\n    ...         Annotation(\n    ...             labels=[Label(key=\"k1\", value=\"v1\")],\n    ...         )\n    ...     ]\n    ... )\n    \"\"\"\n\n    datum: Datum = Datum.symbolic(owner=\"groundtruth\", name=\"datum\")\n    annotations: SymbolicList[Annotation] = SymbolicList[Annotation].symbolic(\n        owner=\"groundtruth\", name=\"annotations\"\n    )\n\n    def __init__(\n        self,\n        *,\n        datum: Datum,\n        annotations: List[Annotation],\n    ):\n        \"\"\"\n        Creates a ground truth.\n\n        Parameters\n        ----------\n        datum : Datum\n            The datum that the ground truth is operating over.\n        annotations : List[Annotation]\n            The list of ground truth annotations.\n        \"\"\"\n        super().__init__(datum=datum, annotations=annotations)\n\n        for annotation in self.annotations:\n            for label in annotation.labels:\n                if label.score is not None:\n                    raise ValueError(\n                        \"GroundTruth labels should not have scores.\"\n                    )\n</code></pre>"},{"location":"client_api/Groundtruth/#valor.GroundTruth-functions","title":"Functions","text":""},{"location":"client_api/Groundtruth/#valor.GroundTruth.__init__","title":"<code>valor.GroundTruth.__init__(*, datum, annotations)</code>","text":"<p>Creates a ground truth.</p> <p>Parameters:</p> Name Type Description Default <code>datum</code> <code>Datum</code> <p>The datum that the ground truth is operating over.</p> required <code>annotations</code> <code>List[Annotation]</code> <p>The list of ground truth annotations.</p> required Source code in <code>valor/coretypes.py</code> <pre><code>def __init__(\n    self,\n    *,\n    datum: Datum,\n    annotations: List[Annotation],\n):\n    \"\"\"\n    Creates a ground truth.\n\n    Parameters\n    ----------\n    datum : Datum\n        The datum that the ground truth is operating over.\n    annotations : List[Annotation]\n        The list of ground truth annotations.\n    \"\"\"\n    super().__init__(datum=datum, annotations=annotations)\n\n    for annotation in self.annotations:\n        for label in annotation.labels:\n            if label.score is not None:\n                raise ValueError(\n                    \"GroundTruth labels should not have scores.\"\n                )\n</code></pre>"},{"location":"client_api/Label/","title":"Label","text":"<p>               Bases: <code>StaticCollection</code></p> <p>An object for labeling datasets, models, and annotations.</p> <p>Attributes:</p> Name Type Description <code>key</code> <code>String</code> <p>The class label key.</p> <code>value</code> <code>String</code> <p>The class label value.</p> <code>score</code> <code>Score</code> <p>The label score.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Label(key=\"k1\", value=\"v1\")\n&gt;&gt;&gt; Label(key=\"k1\", value=\"v1\", score=None)\n&gt;&gt;&gt; Label(key=\"k1\", value=\"v1\", score=0.9)\n</code></pre> Source code in <code>valor/schemas/symbolic/collections.py</code> <pre><code>class Label(StaticCollection):\n    \"\"\"\n    An object for labeling datasets, models, and annotations.\n\n    Attributes\n    ----------\n    key : String\n        The class label key.\n    value : String\n        The class label value.\n    score : Score\n        The label score.\n\n    Examples\n    --------\n    &gt;&gt;&gt; Label(key=\"k1\", value=\"v1\")\n    &gt;&gt;&gt; Label(key=\"k1\", value=\"v1\", score=None)\n    &gt;&gt;&gt; Label(key=\"k1\", value=\"v1\", score=0.9)\n    \"\"\"\n\n    key: String = String.symbolic(owner=\"label\", name=\"key\")\n    value: String = String.symbolic(owner=\"label\", name=\"value\")\n    score: Float = Float.symbolic(owner=\"label\", name=\"score\")\n\n    def __init__(\n        self,\n        *,\n        key: str,\n        value: str,\n        score: Union[float, np.floating, None] = None,\n    ):\n        \"\"\"\n        Initializes an instance of a label.\n\n        Attributes\n        ----------\n        key : str\n            The class label key.\n        value : str\n            The class label value.\n        score : float, optional\n            The label score.\n        \"\"\"\n        super().__init__(key=key, value=value, score=score)\n\n    @staticmethod\n    def formatting() -&gt; Dict[str, Any]:\n        \"\"\"Attribute format mapping.\"\"\"\n        return {\n            \"score\": Float.nullable,\n        }\n\n    def tuple(self):\n        \"\"\"\n        Defines how the `Label` is turned into a tuple.\n\n        Returns\n        ----------\n        tuple\n            A tuple of the `Label's` arguments.\n        \"\"\"\n        return (self.key, self.value, self.score)\n</code></pre>"},{"location":"client_api/Label/#valor.Label-functions","title":"Functions","text":""},{"location":"client_api/Label/#valor.Label.__init__","title":"<code>valor.Label.__init__(*, key, value, score=None)</code>","text":"<p>Initializes an instance of a label.</p> <p>Attributes:</p> Name Type Description <code>key</code> <code>str</code> <p>The class label key.</p> <code>value</code> <code>str</code> <p>The class label value.</p> <code>score</code> <code>(float, optional)</code> <p>The label score.</p> Source code in <code>valor/schemas/symbolic/collections.py</code> <pre><code>def __init__(\n    self,\n    *,\n    key: str,\n    value: str,\n    score: Union[float, np.floating, None] = None,\n):\n    \"\"\"\n    Initializes an instance of a label.\n\n    Attributes\n    ----------\n    key : str\n        The class label key.\n    value : str\n        The class label value.\n    score : float, optional\n        The label score.\n    \"\"\"\n    super().__init__(key=key, value=value, score=score)\n</code></pre>"},{"location":"client_api/Label/#valor.Label.formatting","title":"<code>valor.Label.formatting()</code>  <code>staticmethod</code>","text":"<p>Attribute format mapping.</p> Source code in <code>valor/schemas/symbolic/collections.py</code> <pre><code>@staticmethod\ndef formatting() -&gt; Dict[str, Any]:\n    \"\"\"Attribute format mapping.\"\"\"\n    return {\n        \"score\": Float.nullable,\n    }\n</code></pre>"},{"location":"client_api/Label/#valor.Label.tuple","title":"<code>valor.Label.tuple()</code>","text":"<p>Defines how the <code>Label</code> is turned into a tuple.</p> <p>Returns:</p> Type Description <code>tuple</code> <p>A tuple of the <code>Label's</code> arguments.</p> Source code in <code>valor/schemas/symbolic/collections.py</code> <pre><code>def tuple(self):\n    \"\"\"\n    Defines how the `Label` is turned into a tuple.\n\n    Returns\n    ----------\n    tuple\n        A tuple of the `Label's` arguments.\n    \"\"\"\n    return (self.key, self.value, self.score)\n</code></pre>"},{"location":"client_api/Model/","title":"Model","text":"<p>               Bases: <code>StaticCollection</code></p> <p>A class describing a model that was trained on a particular dataset.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>String</code> <p>The name of the model.</p> <code>metadata</code> <code>Dictionary</code> <p>A dictionary of metadata that describes the model.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Model.create(name=\"model1\")\n&gt;&gt;&gt; Model.create(name=\"model1\", metadata={})\n&gt;&gt;&gt; Model.create(name=\"model1\", metadata={\"foo\": \"bar\", \"pi\": 3.14})\n</code></pre> Source code in <code>valor/coretypes.py</code> <pre><code>class Model(StaticCollection):\n    \"\"\"\n    A class describing a model that was trained on a particular dataset.\n\n    Attributes\n    ----------\n    name : String\n        The name of the model.\n    metadata : Dictionary\n        A dictionary of metadata that describes the model.\n\n    Examples\n    --------\n    &gt;&gt;&gt; Model.create(name=\"model1\")\n    &gt;&gt;&gt; Model.create(name=\"model1\", metadata={})\n    &gt;&gt;&gt; Model.create(name=\"model1\", metadata={\"foo\": \"bar\", \"pi\": 3.14})\n    \"\"\"\n\n    name: String = String.symbolic(owner=\"model\", name=\"name\")\n    metadata: Dictionary = Dictionary.symbolic(owner=\"model\", name=\"metadata\")\n\n    def __init__(\n        self,\n        *,\n        name: str,\n        metadata: Optional[dict] = None,\n        connection: Optional[ClientConnection] = None,\n    ):\n        \"\"\"\n        Creates a local instance of a model.\n\n        Use 'Model.create' classmethod to create a model with persistence.\n\n        Parameters\n        ----------\n        name : String\n            The name of the model.\n        metadata : Dictionary\n            A dictionary of metadata that describes the model.\n        connection : ClientConnection, optional\n            An initialized client connection.\n        \"\"\"\n        self.conn = connection\n        super().__init__(name=name, metadata=metadata if metadata else dict())\n\n    @classmethod\n    def create(\n        cls,\n        name: str,\n        metadata: Optional[Dict[str, Any]] = None,\n        connection: Optional[ClientConnection] = None,\n        **_,\n    ) -&gt; Model:\n        \"\"\"\n        Creates a model that persists in the back end.\n\n        Parameters\n        ----------\n        name : str\n            The name of the model.\n        metadata : dict, optional\n            A dictionary of metadata that describes the model.\n        connection : ClientConnection, optional\n            An initialized client connection.\n        \"\"\"\n        model = cls(name=name, metadata=metadata, connection=connection)\n        Client(connection).create_model(model)\n        return model\n\n    @classmethod\n    def get(\n        cls,\n        name: str,\n        connection: Optional[ClientConnection] = None,\n    ) -&gt; Union[Model, None]:\n        \"\"\"\n        Retrieves a model from the back end database.\n\n        Parameters\n        ----------\n        name : str\n            The name of the model.\n        connection : ClientConnnetion, optional\n            An optional Valor client object for interacting with the API.\n\n        Returns\n        -------\n        Union[valor.Model, None]\n            The model or 'None' if it doesn't exist.\n        \"\"\"\n        return Client(connection).get_model(name)\n\n    def add_prediction(\n        self,\n        dataset: Dataset,\n        prediction: Prediction,\n    ) -&gt; None:\n        \"\"\"\n        Add a prediction to the model.\n\n        Parameters\n        ----------\n        dataset : valor.Dataset\n            The dataset that is being operated over.\n        prediction : valor.Prediction\n            The prediction to create.\n        \"\"\"\n        Client(self.conn).create_predictions(\n            dataset=dataset,\n            model=self,\n            predictions=[prediction],\n        )\n\n    def add_predictions(\n        self,\n        dataset: Dataset,\n        predictions: List[Prediction],\n        timeout: Optional[float] = 10.0,\n    ) -&gt; None:\n        \"\"\"\n        Add multiple predictions to the model.\n\n        Parameters\n        ----------\n        dataset : valor.Dataset\n            The dataset that is being operated over.\n        predictions : List[valor.Prediction]\n            The predictions to create.\n        timeout : float, optional\n            The number of seconds the client should wait until raising a timeout.\n        \"\"\"\n        Client(self.conn).create_predictions(\n            dataset=dataset,\n            model=self,\n            predictions=predictions,\n            timeout=timeout,\n        )\n\n    def get_prediction(\n        self, dataset: Union[Dataset, str], datum: Union[Datum, str]\n    ) -&gt; Union[Prediction, None]:\n        \"\"\"\n        Get a particular prediction.\n\n        Parameters\n        ----------\n        dataset : Union[Dataset, str]\n            The dataset the datum belongs to.\n        datum : Union[Datum, str]\n            The desired datum.\n\n        Returns\n        ----------\n        Union[Prediction, None]\n            The matching prediction or 'None' if it doesn't exist.\n        \"\"\"\n        return Client(self.conn).get_prediction(\n            dataset=dataset, model=self, datum=datum\n        )\n\n    def finalize_inferences(self, dataset: Union[Dataset, str]) -&gt; None:\n        \"\"\"\n        Finalizes the model over a dataset such that new predictions cannot be added to it.\n        \"\"\"\n        return Client(self.conn).finalize_inferences(\n            dataset=dataset, model=self\n        )\n\n    def _create_label_map(\n        self,\n        label_map: Optional[Dict[Label, Label]],\n    ) -&gt; Union[List[List[List[str]]], None]:\n        \"\"\"Convert a dictionary of label maps to a serializable list format.\"\"\"\n        if not label_map:\n            return None\n\n        if not isinstance(label_map, dict) or not all(\n            [\n                isinstance(key, Label) and isinstance(value, Label)\n                for key, value in label_map.items()\n            ]\n        ):\n            raise TypeError(\n                \"label_map should be a dictionary with valid Labels for both the key and value.\"\n            )\n\n        return_value = []\n        for key, value in label_map.items():\n            if not all(\n                [\n                    (isinstance(v.key, str) and isinstance(v.value, str))\n                    for v in [key, value]\n                ]\n            ):\n                raise TypeError\n            return_value.append(\n                [\n                    [key.key, key.value],\n                    [value.key, value.value],\n                ]\n            )\n        return return_value\n\n    def evaluate_classification(\n        self,\n        datasets: Union[Dataset, List[Dataset]],\n        filters: Optional[Filter] = None,\n        label_map: Optional[Dict[Label, Label]] = None,\n        pr_curve_max_examples: int = 1,\n        metrics_to_return: Optional[List[MetricType]] = None,\n        *_,\n        allow_retries: bool = False,\n        timeout: Optional[float] = None,\n    ) -&gt; Evaluation:\n        \"\"\"\n        Start a classification evaluation job.\n\n        Parameters\n        ----------\n        datasets : Union[Dataset, List[Dataset]]\n            The dataset or list of datasets to evaluate against.\n        filters : Filter, optional\n            Optional set of constraints to filter evaluation by.\n        label_map : Dict[Label, Label], optional\n            Optional mapping of individual labels to a grouper label. Useful when you need to evaluate performance using labels that differ across datasets and models.\n        metrics_to_return : List[MetricType], optional\n            The list of metrics to compute, store, and return to the user.\n        allow_retries : bool, default = False\n            Option to retry previously failed evaluations.\n        timeout : float, optional\n            The number of seconds the client should wait until raising a timeout.\n\n        Returns\n        -------\n        Evaluation\n            A job object that can be used to track the status of the job and get the metrics of it upon completion.\n        \"\"\"\n        if metrics_to_return and not set(metrics_to_return).issubset(\n            MetricType.classification()\n        ):\n            raise ValueError(\n                f\"The following metrics are not supported for classification: '{set(metrics_to_return) - MetricType.classification()}'\"\n            )\n\n        # format request\n        datasets = datasets if isinstance(datasets, list) else [datasets]\n        filters = filters if filters else Filter()\n        request = EvaluationRequest(\n            dataset_names=[dataset.name for dataset in datasets],  # type: ignore - issue #604\n            model_names=[self.name],  # type: ignore - issue #604\n            filters=filters,\n            parameters=EvaluationParameters(\n                task_type=TaskType.CLASSIFICATION,\n                label_map=self._create_label_map(label_map=label_map),\n                pr_curve_max_examples=pr_curve_max_examples,\n                metrics_to_return=metrics_to_return,\n            ),\n        )\n\n        # create evaluation\n        evaluation = Client(self.conn).evaluate(\n            request, allow_retries=allow_retries, timeout=timeout\n        )\n        if len(evaluation) != 1:\n            raise RuntimeError\n        return evaluation[0]\n\n    def evaluate_detection(\n        self,\n        datasets: Union[Dataset, List[Dataset]],\n        filters: Optional[Filter] = None,\n        convert_annotations_to_type: Optional[AnnotationType] = None,\n        iou_thresholds_to_compute: Optional[List[float]] = None,\n        iou_thresholds_to_return: Optional[List[float]] = None,\n        label_map: Optional[Dict[Label, Label]] = None,\n        recall_score_threshold: float = 0,\n        metrics_to_return: Optional[List[MetricType]] = None,\n        pr_curve_iou_threshold: float = 0.5,\n        pr_curve_max_examples: int = 1,\n        *_,\n        allow_retries: bool = False,\n        timeout: Optional[float] = None,\n    ) -&gt; Evaluation:\n        \"\"\"\n        Start an object-detection evaluation job.\n\n        Parameters\n        ----------\n        datasets : Union[Dataset, List[Dataset]]\n            The dataset or list of datasets to evaluate against.\n        filters : Filter, optional\n            Optional set of constraints to filter evaluation by.\n        convert_annotations_to_type : enums.AnnotationType, optional\n            Forces the object detection evaluation to compute over this type.\n        iou_thresholds_to_compute : List[float], optional\n            Thresholds to compute mAP against.\n        iou_thresholds_to_return : List[float], optional\n            Thresholds to return AP for. Must be subset of `iou_thresholds_to_compute`.\n        label_map : Dict[Label, Label], optional\n            Optional mapping of individual labels to a grouper label. Useful when you need to evaluate performance using labels that differ across datasets and models.\n        recall_score_threshold : float, default=0\n            The confidence score threshold for use when determining whether to count a prediction as a true positive or not while calculating Average Recall.\n        metrics_to_return : List[MetricType], optional\n            The list of metrics to compute, store, and return to the user.\n        pr_curve_iou_threshold : float, optional\n            The IOU threshold to use when calculating precision-recall curves. Defaults to 0.5.\n        pr_curve_max_examples : int, optional\n            The maximum number of datum examples to store when calculating PR curves.\n        allow_retries : bool, default = False\n            Option to retry previously failed evaluations.\n        timeout : float, optional\n            The number of seconds the client should wait until raising a timeout.\n\n        Returns\n        -------\n        Evaluation\n            A job object that can be used to track the status of the job and get the metrics of it upon completion.\n        \"\"\"\n        if metrics_to_return and not set(metrics_to_return).issubset(\n            MetricType.object_detection()\n        ):\n            raise ValueError(\n                f\"The following metrics are not supported for object detection: '{set(metrics_to_return) - MetricType.object_detection()}'\"\n            )\n\n        if iou_thresholds_to_compute is None:\n            iou_thresholds_to_compute = [\n                round(0.5 + 0.05 * i, 2) for i in range(10)\n            ]\n        if iou_thresholds_to_return is None:\n            iou_thresholds_to_return = [0.5, 0.75]\n\n        # format request\n        parameters = EvaluationParameters(\n            task_type=TaskType.OBJECT_DETECTION,\n            convert_annotations_to_type=convert_annotations_to_type,\n            iou_thresholds_to_compute=iou_thresholds_to_compute,\n            iou_thresholds_to_return=iou_thresholds_to_return,\n            label_map=self._create_label_map(label_map=label_map),\n            recall_score_threshold=recall_score_threshold,\n            metrics_to_return=metrics_to_return,\n            pr_curve_iou_threshold=pr_curve_iou_threshold,\n            pr_curve_max_examples=pr_curve_max_examples,\n        )\n        datasets = datasets if isinstance(datasets, list) else [datasets]\n        filters = filters if filters else Filter()\n        request = EvaluationRequest(\n            dataset_names=[dataset.name for dataset in datasets],  # type: ignore - issue #604\n            model_names=[self.name],  # type: ignore - issue #604\n            filters=filters,\n            parameters=parameters,\n        )\n\n        # create evaluation\n        evaluation = Client(self.conn).evaluate(\n            request, allow_retries=allow_retries, timeout=timeout\n        )\n        if len(evaluation) != 1:\n            raise RuntimeError\n        return evaluation[0]\n\n    def evaluate_segmentation(\n        self,\n        datasets: Union[Dataset, List[Dataset]],\n        filters: Optional[Filter] = None,\n        label_map: Optional[Dict[Label, Label]] = None,\n        metrics_to_return: Optional[List[MetricType]] = None,\n        *_,\n        allow_retries: bool = False,\n        timeout: Optional[float] = None,\n    ) -&gt; Evaluation:\n        \"\"\"\n        Start a semantic-segmentation evaluation job.\n\n        Parameters\n        ----------\n        datasets : Union[Dataset, List[Dataset]]\n            The dataset or list of datasets to evaluate against.\n        filters : Filter, optional\n            Optional set of constraints to filter evaluation by.\n        label_map : Dict[Label, Label], optional\n            Optional mapping of individual labels to a grouper label. Useful when you need to evaluate performance using labels that differ across datasets and models.\n        metrics_to_return : List[MetricType], optional\n            The list of metrics to compute, store, and return to the user.\n        allow_retries : bool, default = False\n            Option to retry previously failed evaluations.\n        timeout : float, optional\n            The number of seconds the client should wait until raising a timeout.\n\n        Returns\n        -------\n        Evaluation\n            A job object that can be used to track the status of the job and get the metrics of it upon completion\n        \"\"\"\n        if metrics_to_return and not set(metrics_to_return).issubset(\n            MetricType.semantic_segmentation()\n        ):\n            raise ValueError(\n                f\"The following metrics are not supported for semantic segmentation: '{set(metrics_to_return) - MetricType.semantic_segmentation()}'\"\n            )\n\n        # format request\n        datasets = datasets if isinstance(datasets, list) else [datasets]\n        filters = filters if filters else Filter()\n        request = EvaluationRequest(\n            dataset_names=[dataset.name for dataset in datasets],  # type: ignore - issue #604\n            model_names=[self.name],  # type: ignore - issue #604\n            filters=filters,\n            parameters=EvaluationParameters(\n                task_type=TaskType.SEMANTIC_SEGMENTATION,\n                label_map=self._create_label_map(label_map=label_map),\n                metrics_to_return=metrics_to_return,\n            ),\n        )\n\n        # create evaluation\n        evaluation = Client(self.conn).evaluate(\n            request, allow_retries=allow_retries, timeout=timeout\n        )\n        if len(evaluation) != 1:\n            raise RuntimeError\n        return evaluation[0]\n\n    def evaluate_text_generation(\n        self,\n        datasets: Union[Dataset, List[Dataset]],\n        metrics_to_return: List[MetricType],\n        filters: Optional[Filter] = None,\n        llm_api_params: Optional[Dict[str, Union[str, dict]]] = None,\n        metric_params: Optional[Dict[MetricType, Dict[str, Any]]] = None,\n    ) -&gt; Evaluation:\n        \"\"\"\n        Start a classification evaluation job.\n\n        Parameters\n        ----------\n        datasets : Union[Dataset, List[Dataset]]\n            The dataset or list of datasets to evaluate against.\n        metrics_to_return : List[MetricType]\n            The list of metrics to compute, store, and return to the user. This is not optional for text generation evaluations.\n        filters : Filter, optional\n            Optional set of constraints to filter evaluation by.\n        llm_api_params : Dict[str, Union[str,dict]], optional\n            A dictionary of parameters for the LLM API.\n        metric_params : Dict[MetricType, Dict[str,Any]], optional\n            A dictionary of parameters for the metrics used in the evaluation. The keys should be the metrics and the values should be dictionaries of parameters for those metrics.\n\n        Returns\n        -------\n        Evaluation\n            A job object that can be used to track the status of the job and get the metrics of it upon completion.\n        \"\"\"\n        if not set(metrics_to_return).issubset(MetricType.text_generation()):\n            raise ValueError(\n                f\"The following metrics are not supported for text generation: '{set(metrics_to_return) - MetricType.text_generation()}'\"\n            )\n\n        # If no api_key is provided, check the environment variables for an api key.\n        if llm_api_params is not None:\n            if \"api_key\" not in llm_api_params:\n                if \"client\" not in llm_api_params:\n                    raise ValueError(\n                        \"The client must be specified in the llm_api_params.\"\n                    )\n\n                if llm_api_params[\"client\"] == \"openai\":\n                    api_key = os.getenv(\"OPENAI_API_KEY\", None)\n                elif llm_api_params[\"client\"] == \"mistral\":\n                    api_key = os.getenv(\"MISTRAL_API_KEY\", None)\n                elif llm_api_params[\"client\"] == \"mock\":\n                    api_key = \"\"\n                else:\n                    raise ValueError(\n                        \"The client specified in llm_api_params is not supported.\"\n                    )\n\n                if api_key is not None:\n                    llm_api_params[\"api_key\"] = api_key\n\n        bleu_weights = None\n        rouge_types = None\n        rouge_use_stemmer = None\n        if metric_params is not None:\n            if not all(\n                metric in metrics_to_return for metric in metric_params.keys()\n            ):\n                raise ValueError(\n                    \"All metrics in metric_params must be in metrics_to_return.\"\n                )\n\n            if MetricType.BLEU in metric_params:\n                bleu_weights = metric_params[MetricType.BLEU].get(\"weights\")\n\n            if MetricType.ROUGE in metric_params:\n                rouge_types = metric_params[MetricType.ROUGE].get(\n                    \"rouge_types\"\n                )\n                rouge_use_stemmer = metric_params[MetricType.ROUGE].get(\n                    \"use_stemmer\"\n                )\n\n        # format request\n        datasets = datasets if isinstance(datasets, list) else [datasets]\n        filters = filters if filters else Filter()\n        request = EvaluationRequest(\n            dataset_names=[dataset.name for dataset in datasets],  # type: ignore - issue #604\n            model_names=[self.name],  # type: ignore - issue #604\n            filters=filters,\n            parameters=EvaluationParameters(\n                task_type=TaskType.TEXT_GENERATION,\n                metrics_to_return=metrics_to_return,\n                llm_api_params=llm_api_params,\n                bleu_weights=bleu_weights,\n                rouge_types=rouge_types,\n                rouge_use_stemmer=rouge_use_stemmer,\n            ),\n        )\n\n        # create evaluation\n        evaluation = Client(self.conn).evaluate(request)\n        if len(evaluation) != 1:\n            raise RuntimeError\n        return evaluation[0]\n\n    def delete(self, timeout: int = 0):\n        \"\"\"\n        Delete the `Model` object from the back end.\n\n        Parameters\n        ----------\n        timeout : int, default=0\n            Sets a timeout in seconds.\n        \"\"\"\n        Client(self.conn).delete_model(self.name, timeout)  # type: ignore\n\n    def get_labels(\n        self,\n    ) -&gt; List[Label]:\n        \"\"\"\n        Get all labels associated with a given model.\n\n        Returns\n        ----------\n        List[Label]\n            A list of `Labels` associated with the model.\n        \"\"\"\n        return Client(self.conn).get_labels_from_model(self)\n\n    def get_evaluations(\n        self,\n        metrics_to_sort_by: Optional[\n            Dict[str, Union[Dict[str, str], str]]\n        ] = None,\n        *_,\n        timeout: Optional[float] = None,\n    ) -&gt; List[Evaluation]:\n        \"\"\"\n        Get all evaluations associated with a given model.\n\n        Parameters\n        ----------\n        metrics_to_sort_by : dict[str, str | dict[str, str]], optional\n            An optional dict of metric types to sort the evaluations by.\n        timeout : float, optional\n            The number of seconds the client should wait until raising a timeout.\n\n        Returns\n        ----------\n        List[Evaluation]\n            A list of `Evaluations` associated with the model.\n        \"\"\"\n        return Client(self.conn).get_evaluations(\n            models=[self],\n            metrics_to_sort_by=metrics_to_sort_by,\n            timeout=timeout,\n        )\n</code></pre>"},{"location":"client_api/Model/#valor.Model-functions","title":"Functions","text":""},{"location":"client_api/Model/#valor.Model.__init__","title":"<code>valor.Model.__init__(*, name, metadata=None, connection=None)</code>","text":"<p>Creates a local instance of a model.</p> <p>Use 'Model.create' classmethod to create a model with persistence.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>String</code> <p>The name of the model.</p> required <code>metadata</code> <code>Dictionary</code> <p>A dictionary of metadata that describes the model.</p> <code>None</code> <code>connection</code> <code>ClientConnection</code> <p>An initialized client connection.</p> <code>None</code> Source code in <code>valor/coretypes.py</code> <pre><code>def __init__(\n    self,\n    *,\n    name: str,\n    metadata: Optional[dict] = None,\n    connection: Optional[ClientConnection] = None,\n):\n    \"\"\"\n    Creates a local instance of a model.\n\n    Use 'Model.create' classmethod to create a model with persistence.\n\n    Parameters\n    ----------\n    name : String\n        The name of the model.\n    metadata : Dictionary\n        A dictionary of metadata that describes the model.\n    connection : ClientConnection, optional\n        An initialized client connection.\n    \"\"\"\n    self.conn = connection\n    super().__init__(name=name, metadata=metadata if metadata else dict())\n</code></pre>"},{"location":"client_api/Model/#valor.Model.add_prediction","title":"<code>valor.Model.add_prediction(dataset, prediction)</code>","text":"<p>Add a prediction to the model.</p> <p>Parameters:</p> Name Type Description Default <code>dataset</code> <code>Dataset</code> <p>The dataset that is being operated over.</p> required <code>prediction</code> <code>Prediction</code> <p>The prediction to create.</p> required Source code in <code>valor/coretypes.py</code> <pre><code>def add_prediction(\n    self,\n    dataset: Dataset,\n    prediction: Prediction,\n) -&gt; None:\n    \"\"\"\n    Add a prediction to the model.\n\n    Parameters\n    ----------\n    dataset : valor.Dataset\n        The dataset that is being operated over.\n    prediction : valor.Prediction\n        The prediction to create.\n    \"\"\"\n    Client(self.conn).create_predictions(\n        dataset=dataset,\n        model=self,\n        predictions=[prediction],\n    )\n</code></pre>"},{"location":"client_api/Model/#valor.Model.add_predictions","title":"<code>valor.Model.add_predictions(dataset, predictions, timeout=10.0)</code>","text":"<p>Add multiple predictions to the model.</p> <p>Parameters:</p> Name Type Description Default <code>dataset</code> <code>Dataset</code> <p>The dataset that is being operated over.</p> required <code>predictions</code> <code>List[Prediction]</code> <p>The predictions to create.</p> required <code>timeout</code> <code>float</code> <p>The number of seconds the client should wait until raising a timeout.</p> <code>10.0</code> Source code in <code>valor/coretypes.py</code> <pre><code>def add_predictions(\n    self,\n    dataset: Dataset,\n    predictions: List[Prediction],\n    timeout: Optional[float] = 10.0,\n) -&gt; None:\n    \"\"\"\n    Add multiple predictions to the model.\n\n    Parameters\n    ----------\n    dataset : valor.Dataset\n        The dataset that is being operated over.\n    predictions : List[valor.Prediction]\n        The predictions to create.\n    timeout : float, optional\n        The number of seconds the client should wait until raising a timeout.\n    \"\"\"\n    Client(self.conn).create_predictions(\n        dataset=dataset,\n        model=self,\n        predictions=predictions,\n        timeout=timeout,\n    )\n</code></pre>"},{"location":"client_api/Model/#valor.Model.create","title":"<code>valor.Model.create(name, metadata=None, connection=None, **_)</code>  <code>classmethod</code>","text":"<p>Creates a model that persists in the back end.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the model.</p> required <code>metadata</code> <code>dict</code> <p>A dictionary of metadata that describes the model.</p> <code>None</code> <code>connection</code> <code>ClientConnection</code> <p>An initialized client connection.</p> <code>None</code> Source code in <code>valor/coretypes.py</code> <pre><code>@classmethod\ndef create(\n    cls,\n    name: str,\n    metadata: Optional[Dict[str, Any]] = None,\n    connection: Optional[ClientConnection] = None,\n    **_,\n) -&gt; Model:\n    \"\"\"\n    Creates a model that persists in the back end.\n\n    Parameters\n    ----------\n    name : str\n        The name of the model.\n    metadata : dict, optional\n        A dictionary of metadata that describes the model.\n    connection : ClientConnection, optional\n        An initialized client connection.\n    \"\"\"\n    model = cls(name=name, metadata=metadata, connection=connection)\n    Client(connection).create_model(model)\n    return model\n</code></pre>"},{"location":"client_api/Model/#valor.Model.delete","title":"<code>valor.Model.delete(timeout=0)</code>","text":"<p>Delete the <code>Model</code> object from the back end.</p> <p>Parameters:</p> Name Type Description Default <code>timeout</code> <code>int</code> <p>Sets a timeout in seconds.</p> <code>0</code> Source code in <code>valor/coretypes.py</code> <pre><code>def delete(self, timeout: int = 0):\n    \"\"\"\n    Delete the `Model` object from the back end.\n\n    Parameters\n    ----------\n    timeout : int, default=0\n        Sets a timeout in seconds.\n    \"\"\"\n    Client(self.conn).delete_model(self.name, timeout)  # type: ignore\n</code></pre>"},{"location":"client_api/Model/#valor.Model.evaluate_classification","title":"<code>valor.Model.evaluate_classification(datasets, filters=None, label_map=None, pr_curve_max_examples=1, metrics_to_return=None, *_, allow_retries=False, timeout=None)</code>","text":"<p>Start a classification evaluation job.</p> <p>Parameters:</p> Name Type Description Default <code>datasets</code> <code>Union[Dataset, List[Dataset]]</code> <p>The dataset or list of datasets to evaluate against.</p> required <code>filters</code> <code>Filter</code> <p>Optional set of constraints to filter evaluation by.</p> <code>None</code> <code>label_map</code> <code>Dict[Label, Label]</code> <p>Optional mapping of individual labels to a grouper label. Useful when you need to evaluate performance using labels that differ across datasets and models.</p> <code>None</code> <code>metrics_to_return</code> <code>List[MetricType]</code> <p>The list of metrics to compute, store, and return to the user.</p> <code>None</code> <code>allow_retries</code> <code>bool</code> <p>Option to retry previously failed evaluations.</p> <code>= False</code> <code>timeout</code> <code>float</code> <p>The number of seconds the client should wait until raising a timeout.</p> <code>None</code> <p>Returns:</p> Type Description <code>Evaluation</code> <p>A job object that can be used to track the status of the job and get the metrics of it upon completion.</p> Source code in <code>valor/coretypes.py</code> <pre><code>def evaluate_classification(\n    self,\n    datasets: Union[Dataset, List[Dataset]],\n    filters: Optional[Filter] = None,\n    label_map: Optional[Dict[Label, Label]] = None,\n    pr_curve_max_examples: int = 1,\n    metrics_to_return: Optional[List[MetricType]] = None,\n    *_,\n    allow_retries: bool = False,\n    timeout: Optional[float] = None,\n) -&gt; Evaluation:\n    \"\"\"\n    Start a classification evaluation job.\n\n    Parameters\n    ----------\n    datasets : Union[Dataset, List[Dataset]]\n        The dataset or list of datasets to evaluate against.\n    filters : Filter, optional\n        Optional set of constraints to filter evaluation by.\n    label_map : Dict[Label, Label], optional\n        Optional mapping of individual labels to a grouper label. Useful when you need to evaluate performance using labels that differ across datasets and models.\n    metrics_to_return : List[MetricType], optional\n        The list of metrics to compute, store, and return to the user.\n    allow_retries : bool, default = False\n        Option to retry previously failed evaluations.\n    timeout : float, optional\n        The number of seconds the client should wait until raising a timeout.\n\n    Returns\n    -------\n    Evaluation\n        A job object that can be used to track the status of the job and get the metrics of it upon completion.\n    \"\"\"\n    if metrics_to_return and not set(metrics_to_return).issubset(\n        MetricType.classification()\n    ):\n        raise ValueError(\n            f\"The following metrics are not supported for classification: '{set(metrics_to_return) - MetricType.classification()}'\"\n        )\n\n    # format request\n    datasets = datasets if isinstance(datasets, list) else [datasets]\n    filters = filters if filters else Filter()\n    request = EvaluationRequest(\n        dataset_names=[dataset.name for dataset in datasets],  # type: ignore - issue #604\n        model_names=[self.name],  # type: ignore - issue #604\n        filters=filters,\n        parameters=EvaluationParameters(\n            task_type=TaskType.CLASSIFICATION,\n            label_map=self._create_label_map(label_map=label_map),\n            pr_curve_max_examples=pr_curve_max_examples,\n            metrics_to_return=metrics_to_return,\n        ),\n    )\n\n    # create evaluation\n    evaluation = Client(self.conn).evaluate(\n        request, allow_retries=allow_retries, timeout=timeout\n    )\n    if len(evaluation) != 1:\n        raise RuntimeError\n    return evaluation[0]\n</code></pre>"},{"location":"client_api/Model/#valor.Model.evaluate_detection","title":"<code>valor.Model.evaluate_detection(datasets, filters=None, convert_annotations_to_type=None, iou_thresholds_to_compute=None, iou_thresholds_to_return=None, label_map=None, recall_score_threshold=0, metrics_to_return=None, pr_curve_iou_threshold=0.5, pr_curve_max_examples=1, *_, allow_retries=False, timeout=None)</code>","text":"<p>Start an object-detection evaluation job.</p> <p>Parameters:</p> Name Type Description Default <code>datasets</code> <code>Union[Dataset, List[Dataset]]</code> <p>The dataset or list of datasets to evaluate against.</p> required <code>filters</code> <code>Filter</code> <p>Optional set of constraints to filter evaluation by.</p> <code>None</code> <code>convert_annotations_to_type</code> <code>AnnotationType</code> <p>Forces the object detection evaluation to compute over this type.</p> <code>None</code> <code>iou_thresholds_to_compute</code> <code>List[float]</code> <p>Thresholds to compute mAP against.</p> <code>None</code> <code>iou_thresholds_to_return</code> <code>List[float]</code> <p>Thresholds to return AP for. Must be subset of <code>iou_thresholds_to_compute</code>.</p> <code>None</code> <code>label_map</code> <code>Dict[Label, Label]</code> <p>Optional mapping of individual labels to a grouper label. Useful when you need to evaluate performance using labels that differ across datasets and models.</p> <code>None</code> <code>recall_score_threshold</code> <code>float</code> <p>The confidence score threshold for use when determining whether to count a prediction as a true positive or not while calculating Average Recall.</p> <code>0</code> <code>metrics_to_return</code> <code>List[MetricType]</code> <p>The list of metrics to compute, store, and return to the user.</p> <code>None</code> <code>pr_curve_iou_threshold</code> <code>float</code> <p>The IOU threshold to use when calculating precision-recall curves. Defaults to 0.5.</p> <code>0.5</code> <code>pr_curve_max_examples</code> <code>int</code> <p>The maximum number of datum examples to store when calculating PR curves.</p> <code>1</code> <code>allow_retries</code> <code>bool</code> <p>Option to retry previously failed evaluations.</p> <code>= False</code> <code>timeout</code> <code>float</code> <p>The number of seconds the client should wait until raising a timeout.</p> <code>None</code> <p>Returns:</p> Type Description <code>Evaluation</code> <p>A job object that can be used to track the status of the job and get the metrics of it upon completion.</p> Source code in <code>valor/coretypes.py</code> <pre><code>def evaluate_detection(\n    self,\n    datasets: Union[Dataset, List[Dataset]],\n    filters: Optional[Filter] = None,\n    convert_annotations_to_type: Optional[AnnotationType] = None,\n    iou_thresholds_to_compute: Optional[List[float]] = None,\n    iou_thresholds_to_return: Optional[List[float]] = None,\n    label_map: Optional[Dict[Label, Label]] = None,\n    recall_score_threshold: float = 0,\n    metrics_to_return: Optional[List[MetricType]] = None,\n    pr_curve_iou_threshold: float = 0.5,\n    pr_curve_max_examples: int = 1,\n    *_,\n    allow_retries: bool = False,\n    timeout: Optional[float] = None,\n) -&gt; Evaluation:\n    \"\"\"\n    Start an object-detection evaluation job.\n\n    Parameters\n    ----------\n    datasets : Union[Dataset, List[Dataset]]\n        The dataset or list of datasets to evaluate against.\n    filters : Filter, optional\n        Optional set of constraints to filter evaluation by.\n    convert_annotations_to_type : enums.AnnotationType, optional\n        Forces the object detection evaluation to compute over this type.\n    iou_thresholds_to_compute : List[float], optional\n        Thresholds to compute mAP against.\n    iou_thresholds_to_return : List[float], optional\n        Thresholds to return AP for. Must be subset of `iou_thresholds_to_compute`.\n    label_map : Dict[Label, Label], optional\n        Optional mapping of individual labels to a grouper label. Useful when you need to evaluate performance using labels that differ across datasets and models.\n    recall_score_threshold : float, default=0\n        The confidence score threshold for use when determining whether to count a prediction as a true positive or not while calculating Average Recall.\n    metrics_to_return : List[MetricType], optional\n        The list of metrics to compute, store, and return to the user.\n    pr_curve_iou_threshold : float, optional\n        The IOU threshold to use when calculating precision-recall curves. Defaults to 0.5.\n    pr_curve_max_examples : int, optional\n        The maximum number of datum examples to store when calculating PR curves.\n    allow_retries : bool, default = False\n        Option to retry previously failed evaluations.\n    timeout : float, optional\n        The number of seconds the client should wait until raising a timeout.\n\n    Returns\n    -------\n    Evaluation\n        A job object that can be used to track the status of the job and get the metrics of it upon completion.\n    \"\"\"\n    if metrics_to_return and not set(metrics_to_return).issubset(\n        MetricType.object_detection()\n    ):\n        raise ValueError(\n            f\"The following metrics are not supported for object detection: '{set(metrics_to_return) - MetricType.object_detection()}'\"\n        )\n\n    if iou_thresholds_to_compute is None:\n        iou_thresholds_to_compute = [\n            round(0.5 + 0.05 * i, 2) for i in range(10)\n        ]\n    if iou_thresholds_to_return is None:\n        iou_thresholds_to_return = [0.5, 0.75]\n\n    # format request\n    parameters = EvaluationParameters(\n        task_type=TaskType.OBJECT_DETECTION,\n        convert_annotations_to_type=convert_annotations_to_type,\n        iou_thresholds_to_compute=iou_thresholds_to_compute,\n        iou_thresholds_to_return=iou_thresholds_to_return,\n        label_map=self._create_label_map(label_map=label_map),\n        recall_score_threshold=recall_score_threshold,\n        metrics_to_return=metrics_to_return,\n        pr_curve_iou_threshold=pr_curve_iou_threshold,\n        pr_curve_max_examples=pr_curve_max_examples,\n    )\n    datasets = datasets if isinstance(datasets, list) else [datasets]\n    filters = filters if filters else Filter()\n    request = EvaluationRequest(\n        dataset_names=[dataset.name for dataset in datasets],  # type: ignore - issue #604\n        model_names=[self.name],  # type: ignore - issue #604\n        filters=filters,\n        parameters=parameters,\n    )\n\n    # create evaluation\n    evaluation = Client(self.conn).evaluate(\n        request, allow_retries=allow_retries, timeout=timeout\n    )\n    if len(evaluation) != 1:\n        raise RuntimeError\n    return evaluation[0]\n</code></pre>"},{"location":"client_api/Model/#valor.Model.evaluate_segmentation","title":"<code>valor.Model.evaluate_segmentation(datasets, filters=None, label_map=None, metrics_to_return=None, *_, allow_retries=False, timeout=None)</code>","text":"<p>Start a semantic-segmentation evaluation job.</p> <p>Parameters:</p> Name Type Description Default <code>datasets</code> <code>Union[Dataset, List[Dataset]]</code> <p>The dataset or list of datasets to evaluate against.</p> required <code>filters</code> <code>Filter</code> <p>Optional set of constraints to filter evaluation by.</p> <code>None</code> <code>label_map</code> <code>Dict[Label, Label]</code> <p>Optional mapping of individual labels to a grouper label. Useful when you need to evaluate performance using labels that differ across datasets and models.</p> <code>None</code> <code>metrics_to_return</code> <code>List[MetricType]</code> <p>The list of metrics to compute, store, and return to the user.</p> <code>None</code> <code>allow_retries</code> <code>bool</code> <p>Option to retry previously failed evaluations.</p> <code>= False</code> <code>timeout</code> <code>float</code> <p>The number of seconds the client should wait until raising a timeout.</p> <code>None</code> <p>Returns:</p> Type Description <code>Evaluation</code> <p>A job object that can be used to track the status of the job and get the metrics of it upon completion</p> Source code in <code>valor/coretypes.py</code> <pre><code>def evaluate_segmentation(\n    self,\n    datasets: Union[Dataset, List[Dataset]],\n    filters: Optional[Filter] = None,\n    label_map: Optional[Dict[Label, Label]] = None,\n    metrics_to_return: Optional[List[MetricType]] = None,\n    *_,\n    allow_retries: bool = False,\n    timeout: Optional[float] = None,\n) -&gt; Evaluation:\n    \"\"\"\n    Start a semantic-segmentation evaluation job.\n\n    Parameters\n    ----------\n    datasets : Union[Dataset, List[Dataset]]\n        The dataset or list of datasets to evaluate against.\n    filters : Filter, optional\n        Optional set of constraints to filter evaluation by.\n    label_map : Dict[Label, Label], optional\n        Optional mapping of individual labels to a grouper label. Useful when you need to evaluate performance using labels that differ across datasets and models.\n    metrics_to_return : List[MetricType], optional\n        The list of metrics to compute, store, and return to the user.\n    allow_retries : bool, default = False\n        Option to retry previously failed evaluations.\n    timeout : float, optional\n        The number of seconds the client should wait until raising a timeout.\n\n    Returns\n    -------\n    Evaluation\n        A job object that can be used to track the status of the job and get the metrics of it upon completion\n    \"\"\"\n    if metrics_to_return and not set(metrics_to_return).issubset(\n        MetricType.semantic_segmentation()\n    ):\n        raise ValueError(\n            f\"The following metrics are not supported for semantic segmentation: '{set(metrics_to_return) - MetricType.semantic_segmentation()}'\"\n        )\n\n    # format request\n    datasets = datasets if isinstance(datasets, list) else [datasets]\n    filters = filters if filters else Filter()\n    request = EvaluationRequest(\n        dataset_names=[dataset.name for dataset in datasets],  # type: ignore - issue #604\n        model_names=[self.name],  # type: ignore - issue #604\n        filters=filters,\n        parameters=EvaluationParameters(\n            task_type=TaskType.SEMANTIC_SEGMENTATION,\n            label_map=self._create_label_map(label_map=label_map),\n            metrics_to_return=metrics_to_return,\n        ),\n    )\n\n    # create evaluation\n    evaluation = Client(self.conn).evaluate(\n        request, allow_retries=allow_retries, timeout=timeout\n    )\n    if len(evaluation) != 1:\n        raise RuntimeError\n    return evaluation[0]\n</code></pre>"},{"location":"client_api/Model/#valor.Model.evaluate_text_generation","title":"<code>valor.Model.evaluate_text_generation(datasets, metrics_to_return, filters=None, llm_api_params=None, metric_params=None)</code>","text":"<p>Start a classification evaluation job.</p> <p>Parameters:</p> Name Type Description Default <code>datasets</code> <code>Union[Dataset, List[Dataset]]</code> <p>The dataset or list of datasets to evaluate against.</p> required <code>metrics_to_return</code> <code>List[MetricType]</code> <p>The list of metrics to compute, store, and return to the user. This is not optional for text generation evaluations.</p> required <code>filters</code> <code>Filter</code> <p>Optional set of constraints to filter evaluation by.</p> <code>None</code> <code>llm_api_params</code> <code>Dict[str, Union[str, dict]]</code> <p>A dictionary of parameters for the LLM API.</p> <code>None</code> <code>metric_params</code> <code>Dict[MetricType, Dict[str, Any]]</code> <p>A dictionary of parameters for the metrics used in the evaluation. The keys should be the metrics and the values should be dictionaries of parameters for those metrics.</p> <code>None</code> <p>Returns:</p> Type Description <code>Evaluation</code> <p>A job object that can be used to track the status of the job and get the metrics of it upon completion.</p> Source code in <code>valor/coretypes.py</code> <pre><code>def evaluate_text_generation(\n    self,\n    datasets: Union[Dataset, List[Dataset]],\n    metrics_to_return: List[MetricType],\n    filters: Optional[Filter] = None,\n    llm_api_params: Optional[Dict[str, Union[str, dict]]] = None,\n    metric_params: Optional[Dict[MetricType, Dict[str, Any]]] = None,\n) -&gt; Evaluation:\n    \"\"\"\n    Start a classification evaluation job.\n\n    Parameters\n    ----------\n    datasets : Union[Dataset, List[Dataset]]\n        The dataset or list of datasets to evaluate against.\n    metrics_to_return : List[MetricType]\n        The list of metrics to compute, store, and return to the user. This is not optional for text generation evaluations.\n    filters : Filter, optional\n        Optional set of constraints to filter evaluation by.\n    llm_api_params : Dict[str, Union[str,dict]], optional\n        A dictionary of parameters for the LLM API.\n    metric_params : Dict[MetricType, Dict[str,Any]], optional\n        A dictionary of parameters for the metrics used in the evaluation. The keys should be the metrics and the values should be dictionaries of parameters for those metrics.\n\n    Returns\n    -------\n    Evaluation\n        A job object that can be used to track the status of the job and get the metrics of it upon completion.\n    \"\"\"\n    if not set(metrics_to_return).issubset(MetricType.text_generation()):\n        raise ValueError(\n            f\"The following metrics are not supported for text generation: '{set(metrics_to_return) - MetricType.text_generation()}'\"\n        )\n\n    # If no api_key is provided, check the environment variables for an api key.\n    if llm_api_params is not None:\n        if \"api_key\" not in llm_api_params:\n            if \"client\" not in llm_api_params:\n                raise ValueError(\n                    \"The client must be specified in the llm_api_params.\"\n                )\n\n            if llm_api_params[\"client\"] == \"openai\":\n                api_key = os.getenv(\"OPENAI_API_KEY\", None)\n            elif llm_api_params[\"client\"] == \"mistral\":\n                api_key = os.getenv(\"MISTRAL_API_KEY\", None)\n            elif llm_api_params[\"client\"] == \"mock\":\n                api_key = \"\"\n            else:\n                raise ValueError(\n                    \"The client specified in llm_api_params is not supported.\"\n                )\n\n            if api_key is not None:\n                llm_api_params[\"api_key\"] = api_key\n\n    bleu_weights = None\n    rouge_types = None\n    rouge_use_stemmer = None\n    if metric_params is not None:\n        if not all(\n            metric in metrics_to_return for metric in metric_params.keys()\n        ):\n            raise ValueError(\n                \"All metrics in metric_params must be in metrics_to_return.\"\n            )\n\n        if MetricType.BLEU in metric_params:\n            bleu_weights = metric_params[MetricType.BLEU].get(\"weights\")\n\n        if MetricType.ROUGE in metric_params:\n            rouge_types = metric_params[MetricType.ROUGE].get(\n                \"rouge_types\"\n            )\n            rouge_use_stemmer = metric_params[MetricType.ROUGE].get(\n                \"use_stemmer\"\n            )\n\n    # format request\n    datasets = datasets if isinstance(datasets, list) else [datasets]\n    filters = filters if filters else Filter()\n    request = EvaluationRequest(\n        dataset_names=[dataset.name for dataset in datasets],  # type: ignore - issue #604\n        model_names=[self.name],  # type: ignore - issue #604\n        filters=filters,\n        parameters=EvaluationParameters(\n            task_type=TaskType.TEXT_GENERATION,\n            metrics_to_return=metrics_to_return,\n            llm_api_params=llm_api_params,\n            bleu_weights=bleu_weights,\n            rouge_types=rouge_types,\n            rouge_use_stemmer=rouge_use_stemmer,\n        ),\n    )\n\n    # create evaluation\n    evaluation = Client(self.conn).evaluate(request)\n    if len(evaluation) != 1:\n        raise RuntimeError\n    return evaluation[0]\n</code></pre>"},{"location":"client_api/Model/#valor.Model.finalize_inferences","title":"<code>valor.Model.finalize_inferences(dataset)</code>","text":"<p>Finalizes the model over a dataset such that new predictions cannot be added to it.</p> Source code in <code>valor/coretypes.py</code> <pre><code>def finalize_inferences(self, dataset: Union[Dataset, str]) -&gt; None:\n    \"\"\"\n    Finalizes the model over a dataset such that new predictions cannot be added to it.\n    \"\"\"\n    return Client(self.conn).finalize_inferences(\n        dataset=dataset, model=self\n    )\n</code></pre>"},{"location":"client_api/Model/#valor.Model.get","title":"<code>valor.Model.get(name, connection=None)</code>  <code>classmethod</code>","text":"<p>Retrieves a model from the back end database.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the model.</p> required <code>connection</code> <code>ClientConnnetion</code> <p>An optional Valor client object for interacting with the API.</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[Model, None]</code> <p>The model or 'None' if it doesn't exist.</p> Source code in <code>valor/coretypes.py</code> <pre><code>@classmethod\ndef get(\n    cls,\n    name: str,\n    connection: Optional[ClientConnection] = None,\n) -&gt; Union[Model, None]:\n    \"\"\"\n    Retrieves a model from the back end database.\n\n    Parameters\n    ----------\n    name : str\n        The name of the model.\n    connection : ClientConnnetion, optional\n        An optional Valor client object for interacting with the API.\n\n    Returns\n    -------\n    Union[valor.Model, None]\n        The model or 'None' if it doesn't exist.\n    \"\"\"\n    return Client(connection).get_model(name)\n</code></pre>"},{"location":"client_api/Model/#valor.Model.get_evaluations","title":"<code>valor.Model.get_evaluations(metrics_to_sort_by=None, *_, timeout=None)</code>","text":"<p>Get all evaluations associated with a given model.</p> <p>Parameters:</p> Name Type Description Default <code>metrics_to_sort_by</code> <code>dict[str, str | dict[str, str]]</code> <p>An optional dict of metric types to sort the evaluations by.</p> <code>None</code> <code>timeout</code> <code>float</code> <p>The number of seconds the client should wait until raising a timeout.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Evaluation]</code> <p>A list of <code>Evaluations</code> associated with the model.</p> Source code in <code>valor/coretypes.py</code> <pre><code>def get_evaluations(\n    self,\n    metrics_to_sort_by: Optional[\n        Dict[str, Union[Dict[str, str], str]]\n    ] = None,\n    *_,\n    timeout: Optional[float] = None,\n) -&gt; List[Evaluation]:\n    \"\"\"\n    Get all evaluations associated with a given model.\n\n    Parameters\n    ----------\n    metrics_to_sort_by : dict[str, str | dict[str, str]], optional\n        An optional dict of metric types to sort the evaluations by.\n    timeout : float, optional\n        The number of seconds the client should wait until raising a timeout.\n\n    Returns\n    ----------\n    List[Evaluation]\n        A list of `Evaluations` associated with the model.\n    \"\"\"\n    return Client(self.conn).get_evaluations(\n        models=[self],\n        metrics_to_sort_by=metrics_to_sort_by,\n        timeout=timeout,\n    )\n</code></pre>"},{"location":"client_api/Model/#valor.Model.get_labels","title":"<code>valor.Model.get_labels()</code>","text":"<p>Get all labels associated with a given model.</p> <p>Returns:</p> Type Description <code>List[Label]</code> <p>A list of <code>Labels</code> associated with the model.</p> Source code in <code>valor/coretypes.py</code> <pre><code>def get_labels(\n    self,\n) -&gt; List[Label]:\n    \"\"\"\n    Get all labels associated with a given model.\n\n    Returns\n    ----------\n    List[Label]\n        A list of `Labels` associated with the model.\n    \"\"\"\n    return Client(self.conn).get_labels_from_model(self)\n</code></pre>"},{"location":"client_api/Model/#valor.Model.get_prediction","title":"<code>valor.Model.get_prediction(dataset, datum)</code>","text":"<p>Get a particular prediction.</p> <p>Parameters:</p> Name Type Description Default <code>dataset</code> <code>Union[Dataset, str]</code> <p>The dataset the datum belongs to.</p> required <code>datum</code> <code>Union[Datum, str]</code> <p>The desired datum.</p> required <p>Returns:</p> Type Description <code>Union[Prediction, None]</code> <p>The matching prediction or 'None' if it doesn't exist.</p> Source code in <code>valor/coretypes.py</code> <pre><code>def get_prediction(\n    self, dataset: Union[Dataset, str], datum: Union[Datum, str]\n) -&gt; Union[Prediction, None]:\n    \"\"\"\n    Get a particular prediction.\n\n    Parameters\n    ----------\n    dataset : Union[Dataset, str]\n        The dataset the datum belongs to.\n    datum : Union[Datum, str]\n        The desired datum.\n\n    Returns\n    ----------\n    Union[Prediction, None]\n        The matching prediction or 'None' if it doesn't exist.\n    \"\"\"\n    return Client(self.conn).get_prediction(\n        dataset=dataset, model=self, datum=datum\n    )\n</code></pre>"},{"location":"client_api/Prediction/","title":"Prediction","text":"<p>               Bases: <code>StaticCollection</code></p> <p>An object describing a prediction (e.g., a machine-drawn bounding box on an image).</p> <p>Attributes:</p> Name Type Description <code>datum</code> <code>Datum</code> <p>The datum associated with the prediction.</p> <code>annotations</code> <code>List[Annotation]</code> <p>The list of annotations associated with the prediction.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Prediction(\n...     datum=Datum(uid=\"uid1\"),\n...     annotations=[\n...         Annotation(\n...             labels=[\n...                 Label(key=\"k1\", value=\"v1\", score=0.9),\n...                 Label(key=\"k1\", value=\"v1\", score=0.1)\n...             ],\n...         )\n...     ]\n... )\n</code></pre> Source code in <code>valor/coretypes.py</code> <pre><code>class Prediction(StaticCollection):\n    \"\"\"\n    An object describing a prediction (e.g., a machine-drawn bounding box on an image).\n\n    Attributes\n    ----------\n    datum : Datum\n        The datum associated with the prediction.\n    annotations : List[Annotation]\n        The list of annotations associated with the prediction.\n\n    Examples\n    --------\n    &gt;&gt;&gt; Prediction(\n    ...     datum=Datum(uid=\"uid1\"),\n    ...     annotations=[\n    ...         Annotation(\n    ...             labels=[\n    ...                 Label(key=\"k1\", value=\"v1\", score=0.9),\n    ...                 Label(key=\"k1\", value=\"v1\", score=0.1)\n    ...             ],\n    ...         )\n    ...     ]\n    ... )\n    \"\"\"\n\n    datum: Datum = Datum.symbolic(owner=\"prediction\", name=\"datum\")\n    annotations: SymbolicList[Annotation] = SymbolicList[Annotation].symbolic(\n        owner=\"prediction\", name=\"annotations\"\n    )\n\n    def __init__(\n        self,\n        *,\n        datum: Datum,\n        annotations: List[Annotation],\n    ):\n        \"\"\"\n        Creates a prediction.\n\n        Parameters\n        ----------\n        datum : Datum\n            The datum that the prediction is operating over.\n        annotations : List[Annotation]\n            The list of predicted annotations.\n        \"\"\"\n        super().__init__(datum=datum, annotations=annotations)\n</code></pre>"},{"location":"client_api/Prediction/#valor.Prediction-functions","title":"Functions","text":""},{"location":"client_api/Prediction/#valor.Prediction.__init__","title":"<code>valor.Prediction.__init__(*, datum, annotations)</code>","text":"<p>Creates a prediction.</p> <p>Parameters:</p> Name Type Description Default <code>datum</code> <code>Datum</code> <p>The datum that the prediction is operating over.</p> required <code>annotations</code> <code>List[Annotation]</code> <p>The list of predicted annotations.</p> required Source code in <code>valor/coretypes.py</code> <pre><code>def __init__(\n    self,\n    *,\n    datum: Datum,\n    annotations: List[Annotation],\n):\n    \"\"\"\n    Creates a prediction.\n\n    Parameters\n    ----------\n    datum : Datum\n        The datum that the prediction is operating over.\n    annotations : List[Annotation]\n        The list of predicted annotations.\n    \"\"\"\n    super().__init__(datum=datum, annotations=annotations)\n</code></pre>"},{"location":"client_api/Viz/","title":"Viz","text":""},{"location":"client_api/Viz/#valor.viz-classes","title":"Classes","text":""},{"location":"client_api/Viz/#valor.viz-functions","title":"Functions","text":""},{"location":"client_api/Viz/#valor.viz.create_combined_segmentation_mask","title":"<code>valor.viz.create_combined_segmentation_mask(annotated_datum, label_key, filter_on_instance_segmentations=False)</code>","text":"<p>Creates a combined segmentation mask from a list of segmentations.</p> <p>Parameters:</p> Name Type Description Default <code>annotated_datum</code> <code>Union[GroundTruth, Prediction]</code> <p>A list of segmentations. These all must have the same <code>image</code> attribute.</p> required <code>label_key</code> <code>str</code> <p>The label key to use.</p> required <code>filter_on_instance_segmentations</code> <code>bool</code> <p>Whether to filter on instance segmentations or not.</p> <code>False</code> <p>Returns:</p> Type Description <code>tuple</code> <p>The first element of the tuple is the combined mask, as an RGB PIL image. The second element is a color legend: it's a dict with the unique labels as keys and the PIL image swatches as values.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If all segmentations don't belong to the same image or there is a segmentation that doesn't have <code>label_key</code> as the key of one of its labels.</p> <code>ValueError</code> <p>If there aren't any segmentations.</p> Source code in <code>valor/viz.py</code> <pre><code>def create_combined_segmentation_mask(\n    annotated_datum: Union[GroundTruth, Prediction],\n    label_key: str,\n    filter_on_instance_segmentations: bool = False,\n) -&gt; Tuple[Image.Image, Dict[str, Image.Image]]:\n    \"\"\"\n    Creates a combined segmentation mask from a list of segmentations.\n\n    Parameters\n    -------\n    annotated_datum : Union[GroundTruth, Prediction]\n        A list of segmentations. These all must have the same `image` attribute.\n    label_key : str\n        The label key to use.\n    filter_on_instance_segmentations : bool, optional\n        Whether to filter on instance segmentations or not.\n\n    Returns\n    -------\n    tuple\n        The first element of the tuple is the combined mask, as an RGB PIL image. The second\n        element is a color legend: it's a dict with the unique labels as keys and the\n        PIL image swatches as values.\n\n    Raises\n    ------\n    RuntimeError\n        If all segmentations don't belong to the same image or there is a\n        segmentation that doesn't have `label_key` as the key of one of its labels.\n    ValueError\n        If there aren't any segmentations.\n    \"\"\"\n\n    # validate input type\n    if not isinstance(annotated_datum, (GroundTruth, Prediction)):\n        raise ValueError(\"Expected either a 'GroundTruth' or 'Prediction'\")\n\n    # verify there are a nonzero number of annotations\n    if len(annotated_datum.annotations) == 0:\n        raise ValueError(\"annotations cannot be empty.\")\n\n    # validate raster size\n    img_h = None\n    img_w = None\n    for annotation in annotated_datum.annotations:\n        raster = annotation.raster\n        if raster.get_value() is None:\n            raise ValueError(\"No raster exists.\")\n        if img_h is None:\n            img_h = raster.height\n        if img_w is None:\n            img_w = raster.width\n        if (img_h != raster.height) or (img_w != raster.width):\n            raise ValueError(\n                f\"Size mismatch between rasters. {(img_h, img_w)} != {(raster.height, raster.width)}\"\n            )\n    if img_h is None or img_w is None:\n        raise ValueError(\n            f\"Segmentation bounds not properly defined. {(img_h, img_w)}\"\n        )\n\n    # unpack raster annotations\n    annotations: List[Annotation] = []\n    for annotation in annotated_datum.annotations:\n        if (\n            annotation.is_instance or False\n        ) == filter_on_instance_segmentations:\n            annotations.append(annotation)\n\n    # unpack label values\n    label_values = []\n    for annotation in annotations:\n        for label in annotation.labels:\n            if label.key == label_key:\n                label_values.append(label.value)\n    if not label_values:\n        raise RuntimeError(\n            f\"Annotation doesn't have a label with key `{label_key}`\"\n        )\n\n    # assign label coloring\n    unique_label_values = list(set(label_values))\n    label_value_to_color = {\n        v: COLOR_MAP[i] for i, v in enumerate(unique_label_values)\n    }\n    seg_colors = [label_value_to_color[v] for v in label_values]\n\n    # create mask\n    combined_mask = np.zeros((img_h, img_w, 3), dtype=np.uint8)\n    for annotation, color in zip(annotations, seg_colors):\n        raster = annotation.raster\n        if raster.get_value() is None:\n            raise ValueError(\"No raster exists.\")\n        if raster.array is not None:\n            if raster.geometry is None:\n                mask = raster.array\n            elif isinstance(raster.geometry, schemas.MultiPolygon):\n                mask = _polygons_to_binary_mask(\n                    raster.geometry.to_polygons(),\n                    img_w=img_w,\n                    img_h=img_h,\n                )\n            elif isinstance(raster.geometry, (schemas.Box, schemas.Polygon)):\n                mask = _polygons_to_binary_mask(\n                    [raster.geometry],\n                    img_w=img_w,\n                    img_h=img_h,\n                )\n            else:\n                continue\n            combined_mask[np.where(mask)] = color\n        else:\n            continue\n\n    legend = {\n        v: Image.new(\"RGB\", (20, 20), color)\n        for v, color in label_value_to_color.items()\n    }\n\n    return Image.fromarray(combined_mask), legend\n</code></pre>"},{"location":"client_api/Viz/#valor.viz.draw_bounding_box_on_image","title":"<code>valor.viz.draw_bounding_box_on_image(bounding_box, img, color=(255, 0, 0))</code>","text":"<p>Draws a bounding polygon on an image. This operation is not done in place.</p> <p>Parameters:</p> Name Type Description Default <code>bounding_box</code> <code>Box</code> <p>Bounding box to draw on the image.</p> required <code>img</code> <code>Image</code> <p>Pillow image to draw on.</p> required <code>color</code> <code>Tuple[int, int, int]</code> <p>RGB tuple of the color to use.</p> <code>(255, 0, 0)</code> <p>Returns:</p> Type Description <code>img</code> <p>Pillow image with bounding box drawn on it.</p> Source code in <code>valor/viz.py</code> <pre><code>def draw_bounding_box_on_image(\n    bounding_box: schemas.Box,\n    img: Image.Image,\n    color: Tuple[int, int, int] = (255, 0, 0),\n) -&gt; Image.Image:\n    \"\"\"Draws a bounding polygon on an image. This operation is not done in place.\n\n    Parameters\n    ----------\n    bounding_box\n        Bounding box to draw on the image.\n    img\n        Pillow image to draw on.\n    color\n        RGB tuple of the color to use.\n\n    Returns\n    -------\n    img\n        Pillow image with bounding box drawn on it.\n    \"\"\"\n    coords = bounding_box.get_value()\n    return _draw_bounding_polygon_on_image(\n        schemas.Polygon(coords), img, color=color, inplace=False\n    )\n</code></pre>"},{"location":"client_api/Viz/#valor.viz.draw_detections_on_image","title":"<code>valor.viz.draw_detections_on_image(detections, img)</code>","text":"<p>Draws detections (bounding boxes and labels) on an image.</p> <p>Parameters:</p> Name Type Description Default <code>detections</code> <code>List[Union[GroundTruth, Prediction]]</code> <p>A list of <code>GroundTruths</code> or <code>Predictions</code> to draw on the image.</p> required <code>img</code> <code>Image</code> <p>The image to draw the detections on.</p> required <p>Returns:</p> Name Type Description <code>img</code> <code>Image</code> <p>An image with the detections drawn on.</p> Source code in <code>valor/viz.py</code> <pre><code>def draw_detections_on_image(\n    detections: Sequence[Union[GroundTruth, Prediction]],\n    img: Image.Image,\n) -&gt; Image.Image:\n    \"\"\"\n    Draws detections (bounding boxes and labels) on an image.\n    Parameters\n    -------\n    detections : List[Union[GroundTruth, Prediction]]\n        A list of `GroundTruths` or `Predictions` to draw on the image.\n    img : Image.Image\n        The image to draw the detections on.\n    Returns\n    -------\n    img : Image.Image\n        An image with the detections drawn on.\n    \"\"\"\n\n    annotations = []\n    for datum in detections:\n        annotations.extend(datum.annotations)\n\n    for i, detection in enumerate(annotations):\n        if detection.raster and detection.is_instance is True:\n            img = _draw_detection_on_image(detection, img, inplace=i != 0)\n    return img\n</code></pre>"},{"location":"client_api/Viz/#valor.viz.draw_raster_on_image","title":"<code>valor.viz.draw_raster_on_image(raster, img, color=(255, 0, 0), alpha=0.4)</code>","text":"<p>Draws the raster on top of an image. This operation is not done in place.</p> <p>Parameters:</p> Name Type Description Default <code>img</code> <code>Image</code> <p>pillow image to draw on.</p> required <code>color</code> <code>Tuple[int, int, int]</code> <p>RGB tuple of the color to use</p> <code>(255, 0, 0)</code> <code>alpha</code> <code>float</code> <p>alpha (transparency) value of the mask. 0 is fully transparent, 1 is fully opaque</p> <code>0.4</code> Source code in <code>valor/viz.py</code> <pre><code>def draw_raster_on_image(\n    raster: schemas.Raster,\n    img: Image.Image,\n    color: Tuple[int, int, int] = (255, 0, 0),\n    alpha: float = 0.4,\n) -&gt; Image.Image:\n    \"\"\"Draws the raster on top of an image. This operation is not done in place.\n\n    Parameters\n    ----------\n    img\n        pillow image to draw on.\n    color\n        RGB tuple of the color to use\n    alpha\n        alpha (transparency) value of the mask. 0 is fully transparent, 1 is fully opaque\n    \"\"\"\n    img = img.copy()\n    binary_mask = raster.array\n    mask_arr = np.zeros(\n        (binary_mask.shape[0], binary_mask.shape[1], 3), dtype=np.uint8\n    )\n    mask_arr[binary_mask] = color\n    mask_img = Image.fromarray(mask_arr)\n\n    if mask_img.size != img.size:\n        raise ValueError(\"Input image and raster must be the same size.\")\n    blend = Image.blend(img, mask_img, alpha=alpha)\n    img.paste(blend, (0, 0), mask=Image.fromarray(binary_mask))\n\n    return img\n</code></pre>"},{"location":"client_api/Schemas/Filters/","title":"Filters","text":""},{"location":"client_api/Schemas/Filters/#valor.schemas.filters-classes","title":"Classes","text":""},{"location":"client_api/Schemas/Evaluation/EvaluationParameters/","title":"EvaluationParameters","text":""},{"location":"client_api/Schemas/Evaluation/EvaluationParameters/#valor.schemas.evaluation-classes","title":"Classes","text":""},{"location":"client_api/Schemas/Evaluation/EvaluationParameters/#valor.schemas.evaluation.EvaluationParameters","title":"<code>valor.schemas.evaluation.EvaluationParameters</code>  <code>dataclass</code>","text":"<pre><code>Defines parameters for evaluation methods.\n</code></pre> <pre><code>Attributes\n</code></pre> <pre><code>task_type: TaskType\n    The task type of a given evaluation.\nlabel_map: Optional[List[List[List[str]]]]\n    Optional mapping of individual labels to a grouper label. Useful when you need to evaluate performance using labels that differ across datasets and models.\nmetrics_to_return: List[MetricType], optional\n    The list of metrics to compute, store, and return to the user.\nllm_api_params: Dict[str, str | dict], optional\n    A dictionary of parameters for the LLM API.\nconvert_annotations_to_type: AnnotationType | None = None\n    The type to convert all annotations to.\niou_thresholds_to_compute: List[float], optional\n    A list of floats describing which Intersection over Unions (IoUs) to use when calculating metrics (i.e., mAP).\niou_thresholds_to_return: List[float], optional\n    A list of floats describing which Intersection over Union (IoUs) thresholds to calculate a metric for. Must be a subset of `iou_thresholds_to_compute`.\nrecall_score_threshold: float, default=0\n    The confidence score threshold for use when determining whether to count a prediction as a true positive or not while calculating Average Recall.\npr_curve_iou_threshold: float, optional\n    The IOU threshold to use when calculating precision-recall curves for object detection tasks. Defaults to 0.5.\npr_curve_max_examples: int\n    The maximum number of datum examples to store when calculating PR curves.\nbleu_weights: list[float], optional\n    The weights to use when calculating BLEU scores.\nrouge_types: list[ROUGEType]\n    A list of rouge types to calculate. Options are ['rouge1', 'rouge2', 'rougeL', 'rougeLsum'], where `rouge1` is unigram-based scoring, `rouge2` is bigram-based scoring, `rougeL` is scoring based on sentences (i.e., splitting on \".\" and ignoring \"\n</code></pre> <p>\"), and <code>rougeLsum</code> is scoring based on splitting the text using \" \".     rouge_use_stemmer: bool         If True, uses Porter stemmer to strip word suffixes.</p> Source code in <code>valor/schemas/evaluation.py</code> <pre><code>@dataclass\nclass EvaluationParameters:\n    \"\"\"\n    Defines parameters for evaluation methods.\n\n    Attributes\n    ----------\n    task_type: TaskType\n        The task type of a given evaluation.\n    label_map: Optional[List[List[List[str]]]]\n        Optional mapping of individual labels to a grouper label. Useful when you need to evaluate performance using labels that differ across datasets and models.\n    metrics_to_return: List[MetricType], optional\n        The list of metrics to compute, store, and return to the user.\n    llm_api_params: Dict[str, str | dict], optional\n        A dictionary of parameters for the LLM API.\n    convert_annotations_to_type: AnnotationType | None = None\n        The type to convert all annotations to.\n    iou_thresholds_to_compute: List[float], optional\n        A list of floats describing which Intersection over Unions (IoUs) to use when calculating metrics (i.e., mAP).\n    iou_thresholds_to_return: List[float], optional\n        A list of floats describing which Intersection over Union (IoUs) thresholds to calculate a metric for. Must be a subset of `iou_thresholds_to_compute`.\n    recall_score_threshold: float, default=0\n        The confidence score threshold for use when determining whether to count a prediction as a true positive or not while calculating Average Recall.\n    pr_curve_iou_threshold: float, optional\n        The IOU threshold to use when calculating precision-recall curves for object detection tasks. Defaults to 0.5.\n    pr_curve_max_examples: int\n        The maximum number of datum examples to store when calculating PR curves.\n    bleu_weights: list[float], optional\n        The weights to use when calculating BLEU scores.\n    rouge_types: list[ROUGEType]\n        A list of rouge types to calculate. Options are ['rouge1', 'rouge2', 'rougeL', 'rougeLsum'], where `rouge1` is unigram-based scoring, `rouge2` is bigram-based scoring, `rougeL` is scoring based on sentences (i.e., splitting on \".\" and ignoring \"\\n\"), and `rougeLsum` is scoring based on splitting the text using \"\\n\".\n    rouge_use_stemmer: bool\n        If True, uses Porter stemmer to strip word suffixes.\n    \"\"\"\n\n    task_type: TaskType\n    label_map: Optional[List[List[List[str]]]] = None\n    metrics_to_return: Optional[List[MetricType]] = None\n    llm_api_params: Optional[Dict[str, Union[str, dict]]] = None\n\n    convert_annotations_to_type: Optional[AnnotationType] = None\n    iou_thresholds_to_compute: Optional[List[float]] = None\n    iou_thresholds_to_return: Optional[List[float]] = None\n    recall_score_threshold: float = 0\n    pr_curve_iou_threshold: float = 0.5\n    pr_curve_max_examples: int = 1\n    bleu_weights: Optional[List[float]] = None\n    rouge_types: Optional[List[ROUGEType]] = None\n    rouge_use_stemmer: Optional[bool] = None\n</code></pre>"},{"location":"client_api/Schemas/Evaluation/EvaluationParameters/#valor.schemas.evaluation.EvaluationRequest","title":"<code>valor.schemas.evaluation.EvaluationRequest</code>  <code>dataclass</code>","text":"<p>An evaluation request.</p> <p>Defines important attributes of the API's <code>EvaluationRequest</code>.</p> <p>Attributes:</p> Name Type Description <code>dataset_names</code> <code>List[str]</code> <p>The list of datasets we want to evaluate by name.</p> <code>model_names</code> <code>List[str]</code> <p>The list of models we want to evaluate by name.</p> <code>filters</code> <code>dict</code> <p>The filter object used to define what the model(s) is evaluating against.</p> <code>parameters</code> <code>EvaluationParameters</code> <p>Any parameters that are used to modify an evaluation method.</p> Source code in <code>valor/schemas/evaluation.py</code> <pre><code>@dataclass\nclass EvaluationRequest:\n    \"\"\"\n    An evaluation request.\n\n    Defines important attributes of the API's `EvaluationRequest`.\n\n    Attributes\n    ----------\n    dataset_names : List[str]\n        The list of datasets we want to evaluate by name.\n    model_names : List[str]\n        The list of models we want to evaluate by name.\n    filters : dict\n        The filter object used to define what the model(s) is evaluating against.\n    parameters : EvaluationParameters\n        Any parameters that are used to modify an evaluation method.\n    \"\"\"\n\n    dataset_names: Union[str, List[str]]\n    model_names: Union[str, List[str]]\n    parameters: EvaluationParameters\n    filters: Filter = field(default_factory=Filter)\n\n    def __post_init__(self):\n        if isinstance(self.filters, dict):\n            self.filters = Filter(**self.filters)\n        elif self.filters is None:\n            self.filters = Filter()\n\n        if isinstance(self.parameters, dict):\n            self.parameters = EvaluationParameters(**self.parameters)\n\n    def to_dict(self) -&gt; dict:\n        \"\"\"\n        Converts the request into a JSON-compatible dictionary.\n        \"\"\"\n        return {\n            \"dataset_names\": self.dataset_names,\n            \"model_names\": self.model_names,\n            \"parameters\": asdict(self.parameters),\n            \"filters\": self.filters.to_dict(),\n        }\n</code></pre>"},{"location":"client_api/Schemas/Evaluation/EvaluationParameters/#valor.schemas.evaluation.EvaluationRequest-functions","title":"Functions","text":""},{"location":"client_api/Schemas/Evaluation/EvaluationParameters/#valor.schemas.evaluation.EvaluationRequest.to_dict","title":"<code>valor.schemas.evaluation.EvaluationRequest.to_dict()</code>","text":"<p>Converts the request into a JSON-compatible dictionary.</p> Source code in <code>valor/schemas/evaluation.py</code> <pre><code>def to_dict(self) -&gt; dict:\n    \"\"\"\n    Converts the request into a JSON-compatible dictionary.\n    \"\"\"\n    return {\n        \"dataset_names\": self.dataset_names,\n        \"model_names\": self.model_names,\n        \"parameters\": asdict(self.parameters),\n        \"filters\": self.filters.to_dict(),\n    }\n</code></pre>"},{"location":"client_api/Schemas/Spatial/Box/","title":"Box","text":"<p>               Bases: <code>Polygon</code></p> <p>A Box is a polygon that is constrained to 4 unique points.</p> <p>Note that this does not need to be axis-aligned.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>List[List[Tuple[float, float]]]</code> <p>An polygon value representing a box.</p> required <p>Attributes:</p> Name Type Description <code>area</code> <code>polygon</code> <code>boundary</code> <code>holes</code> <code>xmin</code> <code>xmax</code> <code>ymin</code> <code>ymax</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Box([[(0,0), (0,1), (1,1), (1,0), (0,0)]])\n</code></pre> <p>Create a Box using extrema.</p> <pre><code>&gt;&gt;&gt; Box.from_extrema(\n...     xmin=0, xmax=1,\n...     ymin=0, ymax=1,\n... )\n</code></pre> Source code in <code>valor/schemas/symbolic/types.py</code> <pre><code>class Box(Polygon):\n    \"\"\"\n    A Box is a polygon that is constrained to 4 unique points.\n\n    Note that this does not need to be axis-aligned.\n\n    Parameters\n    ----------\n    value : List[List[Tuple[float, float]]], optional\n        An polygon value representing a box.\n\n    Attributes\n    ----------\n    area\n    polygon\n    boundary\n    holes\n    xmin\n    xmax\n    ymin\n    ymax\n\n    Examples\n    --------\n    &gt;&gt;&gt; Box([[(0,0), (0,1), (1,1), (1,0), (0,0)]])\n\n    Create a Box using extrema.\n    &gt;&gt;&gt; Box.from_extrema(\n    ...     xmin=0, xmax=1,\n    ...     ymin=0, ymax=1,\n    ... )\n    \"\"\"\n\n    def __init__(\n        self, value: typing.List[typing.List[typing.Tuple[float, float]]]\n    ):\n        super().__init__(value=value)\n\n    @classmethod\n    def __validate__(cls, value: typing.Any):\n        \"\"\"\n        Validates typing.\n\n        Parameters\n        ----------\n        value : typing.Any\n            The value to validate.\n\n        Raises\n        ------\n        TypeError\n            If the value type is not supported.\n        \"\"\"\n        Polygon.__validate__(value)\n        if len(value) != 1:\n            raise ValueError(\"Box should not contain holes.\")\n        elif len(value[0]) != 5:\n            raise ValueError(\"Box should consist of four unique points.\")\n\n    @classmethod\n    def decode_value(\n        cls,\n        value: typing.Optional[typing.List[typing.List[typing.List[float]]]],\n    ):\n        \"\"\"Decode object from JSON compatible dictionary.\"\"\"\n        if value is None:\n            return None\n        return super().decode_value(value)\n\n    @classmethod\n    def from_extrema(\n        cls,\n        xmin: float,\n        xmax: float,\n        ymin: float,\n        ymax: float,\n    ):\n        \"\"\"\n        Create a Box from extrema values.\n\n        Parameters\n        ----------\n        xmin : float\n            Minimum x-coordinate of the bounding box.\n        xmax : float\n            Maximum x-coordinate of the bounding box.\n        ymin : float\n            Minimum y-coordinate of the bounding box.\n        ymax : float\n            Maximum y-coordinate of the bounding box.\n\n        Returns\n        -------\n        Box\n            A Box created from the provided extrema values.\n        \"\"\"\n        points = [\n            [\n                (xmin, ymin),\n                (xmax, ymin),\n                (xmax, ymax),\n                (xmin, ymax),\n                (xmin, ymin),\n            ]\n        ]\n        return cls(value=points)\n\n    def to_polygon(self) -&gt; Polygon:\n        \"\"\"\n        Converts box to a generic polygon.\n\n        Returns\n        -------\n        Polygon\n            The box as a Polygon.\n        \"\"\"\n        return Polygon(self.get_value())\n</code></pre>"},{"location":"client_api/Schemas/Spatial/Box/#valor.schemas.Box-functions","title":"Functions","text":""},{"location":"client_api/Schemas/Spatial/Box/#valor.schemas.Box.__validate__","title":"<code>valor.schemas.Box.__validate__(value)</code>  <code>classmethod</code>","text":"<p>Validates typing.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>The value to validate.</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>If the value type is not supported.</p> Source code in <code>valor/schemas/symbolic/types.py</code> <pre><code>@classmethod\ndef __validate__(cls, value: typing.Any):\n    \"\"\"\n    Validates typing.\n\n    Parameters\n    ----------\n    value : typing.Any\n        The value to validate.\n\n    Raises\n    ------\n    TypeError\n        If the value type is not supported.\n    \"\"\"\n    Polygon.__validate__(value)\n    if len(value) != 1:\n        raise ValueError(\"Box should not contain holes.\")\n    elif len(value[0]) != 5:\n        raise ValueError(\"Box should consist of four unique points.\")\n</code></pre>"},{"location":"client_api/Schemas/Spatial/Box/#valor.schemas.Box.decode_value","title":"<code>valor.schemas.Box.decode_value(value)</code>  <code>classmethod</code>","text":"<p>Decode object from JSON compatible dictionary.</p> Source code in <code>valor/schemas/symbolic/types.py</code> <pre><code>@classmethod\ndef decode_value(\n    cls,\n    value: typing.Optional[typing.List[typing.List[typing.List[float]]]],\n):\n    \"\"\"Decode object from JSON compatible dictionary.\"\"\"\n    if value is None:\n        return None\n    return super().decode_value(value)\n</code></pre>"},{"location":"client_api/Schemas/Spatial/Box/#valor.schemas.Box.from_extrema","title":"<code>valor.schemas.Box.from_extrema(xmin, xmax, ymin, ymax)</code>  <code>classmethod</code>","text":"<p>Create a Box from extrema values.</p> <p>Parameters:</p> Name Type Description Default <code>xmin</code> <code>float</code> <p>Minimum x-coordinate of the bounding box.</p> required <code>xmax</code> <code>float</code> <p>Maximum x-coordinate of the bounding box.</p> required <code>ymin</code> <code>float</code> <p>Minimum y-coordinate of the bounding box.</p> required <code>ymax</code> <code>float</code> <p>Maximum y-coordinate of the bounding box.</p> required <p>Returns:</p> Type Description <code>Box</code> <p>A Box created from the provided extrema values.</p> Source code in <code>valor/schemas/symbolic/types.py</code> <pre><code>@classmethod\ndef from_extrema(\n    cls,\n    xmin: float,\n    xmax: float,\n    ymin: float,\n    ymax: float,\n):\n    \"\"\"\n    Create a Box from extrema values.\n\n    Parameters\n    ----------\n    xmin : float\n        Minimum x-coordinate of the bounding box.\n    xmax : float\n        Maximum x-coordinate of the bounding box.\n    ymin : float\n        Minimum y-coordinate of the bounding box.\n    ymax : float\n        Maximum y-coordinate of the bounding box.\n\n    Returns\n    -------\n    Box\n        A Box created from the provided extrema values.\n    \"\"\"\n    points = [\n        [\n            (xmin, ymin),\n            (xmax, ymin),\n            (xmax, ymax),\n            (xmin, ymax),\n            (xmin, ymin),\n        ]\n    ]\n    return cls(value=points)\n</code></pre>"},{"location":"client_api/Schemas/Spatial/Box/#valor.schemas.Box.to_polygon","title":"<code>valor.schemas.Box.to_polygon()</code>","text":"<p>Converts box to a generic polygon.</p> <p>Returns:</p> Type Description <code>Polygon</code> <p>The box as a Polygon.</p> Source code in <code>valor/schemas/symbolic/types.py</code> <pre><code>def to_polygon(self) -&gt; Polygon:\n    \"\"\"\n    Converts box to a generic polygon.\n\n    Returns\n    -------\n    Polygon\n        The box as a Polygon.\n    \"\"\"\n    return Polygon(self.get_value())\n</code></pre>"},{"location":"client_api/Schemas/Spatial/LineString/","title":"LineString","text":"<p>               Bases: <code>Spatial</code></p> <p>Represents a line.</p> <p>Follows the GeoJSON specification (RFC 7946).</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>List[Tuple[float, float]]</code> <p>A linestring.</p> required <p>Methods:</p> Name Description <code>colorspace</code> <p>Represent the photo in the given colorspace.</p> <code>gamma</code> <p>Change the photo's gamma exposure.</p> <p>Examples:</p> <p>Create a line.</p> <pre><code>&gt;&gt;&gt; LineString([(0,0), (0,1), (1,1)])\n</code></pre> Source code in <code>valor/schemas/symbolic/types.py</code> <pre><code>class LineString(Spatial):\n    \"\"\"\n    Represents a line.\n\n    Follows the GeoJSON specification (RFC 7946).\n\n    Parameters\n    ----------\n    value : List[Tuple[float, float]], optional\n        A linestring.\n\n    Methods\n    -------\n    colorspace(c='rgb')\n        Represent the photo in the given colorspace.\n    gamma(n=1.0)\n        Change the photo's gamma exposure.\n\n    Examples\n    --------\n    Create a line.\n    &gt;&gt;&gt; LineString([(0,0), (0,1), (1,1)])\n    \"\"\"\n\n    def __init__(self, value: typing.List[typing.Tuple[float, float]]):\n        super().__init__(value=value)\n\n    @classmethod\n    def __validate__(cls, value: typing.Any):\n        MultiPoint.__validate__(value)\n        if len(value) &lt; 2:\n            raise ValueError(\n                \"At least two points are required to make a line.\"\n            )\n\n    @classmethod\n    def decode_value(\n        cls, value: typing.Optional[typing.List[typing.List[float]]]\n    ):\n        \"\"\"Decode object from JSON compatible dictionary.\"\"\"\n        if value is None:\n            return None\n        return cls([(point[0], point[1]) for point in value])\n</code></pre>"},{"location":"client_api/Schemas/Spatial/LineString/#valor.schemas.LineString-functions","title":"Functions","text":""},{"location":"client_api/Schemas/Spatial/LineString/#valor.schemas.LineString.decode_value","title":"<code>valor.schemas.LineString.decode_value(value)</code>  <code>classmethod</code>","text":"<p>Decode object from JSON compatible dictionary.</p> Source code in <code>valor/schemas/symbolic/types.py</code> <pre><code>@classmethod\ndef decode_value(\n    cls, value: typing.Optional[typing.List[typing.List[float]]]\n):\n    \"\"\"Decode object from JSON compatible dictionary.\"\"\"\n    if value is None:\n        return None\n    return cls([(point[0], point[1]) for point in value])\n</code></pre>"},{"location":"client_api/Schemas/Spatial/MultiLineString/","title":"MultiLineString","text":"<p>               Bases: <code>Spatial</code></p> <p>Represents a list of lines.</p> <p>Follows the GeoJSON specification (RFC 7946).</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>List[List[Tuple[float, float]]]</code> <p>A multilinestring.</p> required <p>Examples:</p> <p>Create a single line.</p> <pre><code>&gt;&gt;&gt; MultiLineString([[(0,0), (0,1), (1,1), (0,0)]])\n</code></pre> <p>Create 3 lines.</p> <pre><code>&gt;&gt;&gt; MultiLineString(\n...     [\n...         [(0,0), (0,1), (1,1)],\n...         [(0.1, 0.1), (0.1, 0.2), (0.2, 0.2)],\n...         [(0.6, 0.6), (0.6, 0.7), (0.7, 0.7)],\n...     ]\n... )\n</code></pre> Source code in <code>valor/schemas/symbolic/types.py</code> <pre><code>class MultiLineString(Spatial):\n    \"\"\"\n    Represents a list of lines.\n\n    Follows the GeoJSON specification (RFC 7946).\n\n    Parameters\n    ----------\n    value : List[List[Tuple[float, float]]], optional\n        A multilinestring.\n\n    Examples\n    --------\n    Create a single line.\n    &gt;&gt;&gt; MultiLineString([[(0,0), (0,1), (1,1), (0,0)]])\n\n    Create 3 lines.\n    &gt;&gt;&gt; MultiLineString(\n    ...     [\n    ...         [(0,0), (0,1), (1,1)],\n    ...         [(0.1, 0.1), (0.1, 0.2), (0.2, 0.2)],\n    ...         [(0.6, 0.6), (0.6, 0.7), (0.7, 0.7)],\n    ...     ]\n    ... )\n    \"\"\"\n\n    def __init__(\n        self,\n        value: typing.List[typing.List[typing.Tuple[float, float]]],\n    ):\n        super().__init__(value=value)\n\n    @classmethod\n    def __validate__(cls, value: typing.Any):\n        if not isinstance(value, list):\n            raise TypeError(\n                f\"Expected type 'List[List[Tuple[float, float]]]' received type '{type(value).__name__}'\"\n            )\n        for line in value:\n            LineString.__validate__(line)\n\n    @classmethod\n    def decode_value(\n        cls,\n        value: typing.Optional[typing.List[typing.List[typing.List[float]]]],\n    ):\n        \"\"\"Decode object from JSON compatible dictionary.\"\"\"\n        if value is None:\n            return None\n        return cls(\n            [[(point[0], point[1]) for point in line] for line in value]\n        )\n</code></pre>"},{"location":"client_api/Schemas/Spatial/MultiLineString/#valor.schemas.MultiLineString-functions","title":"Functions","text":""},{"location":"client_api/Schemas/Spatial/MultiLineString/#valor.schemas.MultiLineString.decode_value","title":"<code>valor.schemas.MultiLineString.decode_value(value)</code>  <code>classmethod</code>","text":"<p>Decode object from JSON compatible dictionary.</p> Source code in <code>valor/schemas/symbolic/types.py</code> <pre><code>@classmethod\ndef decode_value(\n    cls,\n    value: typing.Optional[typing.List[typing.List[typing.List[float]]]],\n):\n    \"\"\"Decode object from JSON compatible dictionary.\"\"\"\n    if value is None:\n        return None\n    return cls(\n        [[(point[0], point[1]) for point in line] for line in value]\n    )\n</code></pre>"},{"location":"client_api/Schemas/Spatial/MultiPoint/","title":"MultiPoint","text":"<p>               Bases: <code>Spatial</code></p> <p>Represents a list of points.</p> <p>Follows the GeoJSON specification (RFC 7946).</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>List[Tuple[float, float]]</code> <p>A multipoint.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; MultiPoint([(0,0), (0,1), (1,1)])\n</code></pre> Source code in <code>valor/schemas/symbolic/types.py</code> <pre><code>class MultiPoint(Spatial):\n    \"\"\"\n    Represents a list of points.\n\n    Follows the GeoJSON specification (RFC 7946).\n\n    Parameters\n    ----------\n    value : List[Tuple[float, float]], optional\n        A multipoint.\n\n    Examples\n    --------\n    &gt;&gt;&gt; MultiPoint([(0,0), (0,1), (1,1)])\n    \"\"\"\n\n    def __init__(\n        self,\n        value: typing.List[typing.Tuple[float, float]],\n    ):\n        super().__init__(value=value)\n\n    @classmethod\n    def __validate__(cls, value: typing.Any):\n        if not isinstance(value, list):\n            raise TypeError(\n                f\"Expected 'typing.List[typing.Tuple[float, float]]' received type '{type(value).__name__}'\"\n            )\n        for point in value:\n            Point.__validate__(point)\n\n    @classmethod\n    def decode_value(\n        cls, value: typing.Optional[typing.List[typing.List[float]]]\n    ):\n        \"\"\"Decode object from JSON compatible dictionary.\"\"\"\n        if value is None:\n            return None\n        return cls([(point[0], point[1]) for point in value])\n</code></pre>"},{"location":"client_api/Schemas/Spatial/MultiPoint/#valor.schemas.MultiPoint-functions","title":"Functions","text":""},{"location":"client_api/Schemas/Spatial/MultiPoint/#valor.schemas.MultiPoint.decode_value","title":"<code>valor.schemas.MultiPoint.decode_value(value)</code>  <code>classmethod</code>","text":"<p>Decode object from JSON compatible dictionary.</p> Source code in <code>valor/schemas/symbolic/types.py</code> <pre><code>@classmethod\ndef decode_value(\n    cls, value: typing.Optional[typing.List[typing.List[float]]]\n):\n    \"\"\"Decode object from JSON compatible dictionary.\"\"\"\n    if value is None:\n        return None\n    return cls([(point[0], point[1]) for point in value])\n</code></pre>"},{"location":"client_api/Schemas/Spatial/MultiPolygon/","title":"MultiPolygon","text":"<p>               Bases: <code>Spatial</code></p> <p>Represents a collection of polygons.</p> <p>Follows the GeoJSON specification (RFC 7946).</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>List[List[List[Tuple[float, float]]]]</code> <p>A list of polygons.</p> required <p>Attributes:</p> Name Type Description <code>area</code> <code>polygons</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; MultiPolygon(\n...     [\n...         [\n...             [(0,0), (0,1), (1,1), (0,0)]\n...         ],\n...         [\n...             [(0,0), (0,1), (1,1), (0,0)],\n...             [(0.1, 0.1), (0.1, 0.2), (0.2, 0.2), (0.1, 0.1)],\n...             [(0.6, 0.6), (0.6, 0.7), (0.7, 0.7), (0.6, 0.6)],\n...         ],\n...     ]\n... )\n</code></pre> Source code in <code>valor/schemas/symbolic/types.py</code> <pre><code>class MultiPolygon(Spatial):\n    \"\"\"\n    Represents a collection of polygons.\n\n    Follows the GeoJSON specification (RFC 7946).\n\n    Parameters\n    ----------\n    value : List[List[List[Tuple[float, float]]]], optional\n        A list of polygons.\n\n    Attributes\n    ----------\n    area\n    polygons\n\n    Examples\n    --------\n    &gt;&gt;&gt; MultiPolygon(\n    ...     [\n    ...         [\n    ...             [(0,0), (0,1), (1,1), (0,0)]\n    ...         ],\n    ...         [\n    ...             [(0,0), (0,1), (1,1), (0,0)],\n    ...             [(0.1, 0.1), (0.1, 0.2), (0.2, 0.2), (0.1, 0.1)],\n    ...             [(0.6, 0.6), (0.6, 0.7), (0.7, 0.7), (0.6, 0.6)],\n    ...         ],\n    ...     ]\n    ... )\n    \"\"\"\n\n    def __init__(\n        self,\n        value: typing.List[\n            typing.List[typing.List[typing.Tuple[float, float]]]\n        ],\n    ):\n        super().__init__(value=value)\n\n    @classmethod\n    def __validate__(cls, value: typing.Any):\n        if not isinstance(value, list):\n            raise TypeError(\n                f\"Expected type 'List[List[List[Tuple[float, float]]]]' received type '{type(value).__name__}'\"\n            )\n        for poly in value:\n            Polygon.__validate__(poly)\n\n    @classmethod\n    def decode_value(\n        cls,\n        value: typing.Optional[\n            typing.List[typing.List[typing.List[typing.List[float]]]]\n        ],\n    ):\n        \"\"\"Decode object from JSON compatible dictionary.\"\"\"\n        if value is None:\n            return None\n        return cls(\n            [\n                [\n                    [(point[0], point[1]) for point in subpolygon]\n                    for subpolygon in polygon\n                ]\n                for polygon in value\n            ]\n        )\n\n    @property\n    def area(self):\n        \"\"\"\n        Symbolic representation of area.\n        \"\"\"\n        if not isinstance(self._value, Symbol):\n            raise ValueError(\n                \"attribute 'area' is reserved for symbolic variables.\"\n            )\n        return Float.symbolic(\n            name=self._value._name,\n            key=self._value._key,\n            attribute=\"area\",\n        )\n\n    def to_polygons(self) -&gt; typing.List[Polygon]:\n        \"\"\"\n        Converts multipolygon to a list of Polygon instances.\n\n        Returns\n        -------\n        List[Polygon]\n        \"\"\"\n        return [Polygon(poly) for poly in self.get_value()]\n\n    @classmethod\n    def from_polygons(self, polygons: typing.List[Polygon]) -&gt; \"MultiPolygon\":\n        \"\"\"\n        Converts a list of Polygon instances to a MultiPolygon.\n\n        Parameters\n        ----------\n        polygons : List[Polygon]\n            A list of Polygon instances.\n\n        Returns\n        -------\n        MultiPolygon\n            A MultiPolygon instance.\n        \"\"\"\n        return MultiPolygon([poly.get_value() for poly in polygons])\n</code></pre>"},{"location":"client_api/Schemas/Spatial/MultiPolygon/#valor.schemas.MultiPolygon-attributes","title":"Attributes","text":""},{"location":"client_api/Schemas/Spatial/MultiPolygon/#valor.schemas.MultiPolygon.area","title":"<code>valor.schemas.MultiPolygon.area</code>  <code>property</code>","text":"<p>Symbolic representation of area.</p>"},{"location":"client_api/Schemas/Spatial/MultiPolygon/#valor.schemas.MultiPolygon-functions","title":"Functions","text":""},{"location":"client_api/Schemas/Spatial/MultiPolygon/#valor.schemas.MultiPolygon.decode_value","title":"<code>valor.schemas.MultiPolygon.decode_value(value)</code>  <code>classmethod</code>","text":"<p>Decode object from JSON compatible dictionary.</p> Source code in <code>valor/schemas/symbolic/types.py</code> <pre><code>@classmethod\ndef decode_value(\n    cls,\n    value: typing.Optional[\n        typing.List[typing.List[typing.List[typing.List[float]]]]\n    ],\n):\n    \"\"\"Decode object from JSON compatible dictionary.\"\"\"\n    if value is None:\n        return None\n    return cls(\n        [\n            [\n                [(point[0], point[1]) for point in subpolygon]\n                for subpolygon in polygon\n            ]\n            for polygon in value\n        ]\n    )\n</code></pre>"},{"location":"client_api/Schemas/Spatial/MultiPolygon/#valor.schemas.MultiPolygon.from_polygons","title":"<code>valor.schemas.MultiPolygon.from_polygons(polygons)</code>  <code>classmethod</code>","text":"<p>Converts a list of Polygon instances to a MultiPolygon.</p> <p>Parameters:</p> Name Type Description Default <code>polygons</code> <code>List[Polygon]</code> <p>A list of Polygon instances.</p> required <p>Returns:</p> Type Description <code>MultiPolygon</code> <p>A MultiPolygon instance.</p> Source code in <code>valor/schemas/symbolic/types.py</code> <pre><code>@classmethod\ndef from_polygons(self, polygons: typing.List[Polygon]) -&gt; \"MultiPolygon\":\n    \"\"\"\n    Converts a list of Polygon instances to a MultiPolygon.\n\n    Parameters\n    ----------\n    polygons : List[Polygon]\n        A list of Polygon instances.\n\n    Returns\n    -------\n    MultiPolygon\n        A MultiPolygon instance.\n    \"\"\"\n    return MultiPolygon([poly.get_value() for poly in polygons])\n</code></pre>"},{"location":"client_api/Schemas/Spatial/MultiPolygon/#valor.schemas.MultiPolygon.to_polygons","title":"<code>valor.schemas.MultiPolygon.to_polygons()</code>","text":"<p>Converts multipolygon to a list of Polygon instances.</p> <p>Returns:</p> Type Description <code>List[Polygon]</code> Source code in <code>valor/schemas/symbolic/types.py</code> <pre><code>def to_polygons(self) -&gt; typing.List[Polygon]:\n    \"\"\"\n    Converts multipolygon to a list of Polygon instances.\n\n    Returns\n    -------\n    List[Polygon]\n    \"\"\"\n    return [Polygon(poly) for poly in self.get_value()]\n</code></pre>"},{"location":"client_api/Schemas/Spatial/Point/","title":"Point","text":"<p>               Bases: <code>Spatial</code>, <code>Equatable</code></p> <p>Represents a point in 2D space.</p> <p>Follows the GeoJSON specification (RFC 7946).</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Tuple[float, float]</code> <p>A point.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; Point((1,2))\n</code></pre> Source code in <code>valor/schemas/symbolic/types.py</code> <pre><code>class Point(Spatial, Equatable):\n    \"\"\"\n    Represents a point in 2D space.\n\n    Follows the GeoJSON specification (RFC 7946).\n\n    Parameters\n    ----------\n    value : Tuple[float, float], optional\n        A point.\n\n    Examples\n    --------\n    &gt;&gt;&gt; Point((1,2))\n    \"\"\"\n\n    def __init__(\n        self,\n        value: typing.Tuple[float, float],\n    ):\n        super().__init__(value=value)\n\n    @classmethod\n    def __validate__(cls, value: typing.Any):\n        if not isinstance(value, tuple):\n            raise TypeError(\n                f\"Expected type 'typing.Tuple[float, float]' received type '{type(value).__name__}'\"\n            )\n        elif len(value) != 2:\n            raise ValueError(\"\")\n        for item in value:\n            if not isinstance(item, (int, float, np.floating)):\n                raise TypeError(\n                    f\"Expected type '{float.__name__}' received type '{type(item).__name__}'\"\n                )\n\n    @classmethod\n    def decode_value(cls, value: typing.Optional[typing.List[float]]):\n        \"\"\"Decode object from JSON compatible dictionary.\"\"\"\n        if value is None:\n            return None\n        return cls((value[0], value[1]))\n\n    def encode_value(self) -&gt; typing.Any:\n        \"\"\"Encode object to JSON compatible dictionary.\"\"\"\n        value = self.get_value()\n        if value is None:\n            return None\n        return (float(value[0]), float(value[1]))\n\n    def tuple(self):\n        return self.get_value()\n\n    def resize(\n        self,\n        og_img_h=10,\n        og_img_w=10,\n        new_img_h=100,\n        new_img_w=100,\n    ):\n        value = self.get_value()\n        h_ratio = new_img_h / og_img_h\n        w_ratio = new_img_w / og_img_w\n        return Point((value[0] * h_ratio, value[1] * w_ratio))\n\n    @property\n    def x(self):\n        return self.get_value()[0]\n\n    @property\n    def y(self):\n        return self.get_value()[1]\n</code></pre>"},{"location":"client_api/Schemas/Spatial/Point/#valor.schemas.Point-functions","title":"Functions","text":""},{"location":"client_api/Schemas/Spatial/Point/#valor.schemas.Point.decode_value","title":"<code>valor.schemas.Point.decode_value(value)</code>  <code>classmethod</code>","text":"<p>Decode object from JSON compatible dictionary.</p> Source code in <code>valor/schemas/symbolic/types.py</code> <pre><code>@classmethod\ndef decode_value(cls, value: typing.Optional[typing.List[float]]):\n    \"\"\"Decode object from JSON compatible dictionary.\"\"\"\n    if value is None:\n        return None\n    return cls((value[0], value[1]))\n</code></pre>"},{"location":"client_api/Schemas/Spatial/Point/#valor.schemas.Point.encode_value","title":"<code>valor.schemas.Point.encode_value()</code>","text":"<p>Encode object to JSON compatible dictionary.</p> Source code in <code>valor/schemas/symbolic/types.py</code> <pre><code>def encode_value(self) -&gt; typing.Any:\n    \"\"\"Encode object to JSON compatible dictionary.\"\"\"\n    value = self.get_value()\n    if value is None:\n        return None\n    return (float(value[0]), float(value[1]))\n</code></pre>"},{"location":"client_api/Schemas/Spatial/Polygon/","title":"Polygon","text":"<p>               Bases: <code>Spatial</code></p> <p>Represents a polygon with a boundary and optional holes.</p> <p>Follows the GeoJSON specification (RFC 7946).</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>List[List[Tuple[float, float]]]</code> <p>A polygon.</p> required <p>Attributes:</p> Name Type Description <code>area</code> <code>Float</code> <code>boundary</code> <code>List[Tuple[float, float]]</code> <code>holes</code> <code>List[List[Tuple[float, float]]]</code> <code>xmin</code> <code>float</code> <code>xmax</code> <code>float</code> <code>ymin</code> <code>float</code> <code>ymax</code> <code>float</code> <p>Examples:</p> <p>Create a polygon without any holes.</p> <pre><code>&gt;&gt;&gt; Polygon([[(0,0), (0,1), (1,1), (0,0)]])\n</code></pre> <p>Create a polygon with 2 holes.</p> <pre><code>&gt;&gt;&gt; Polygon(\n...     [\n...         [(0,0), (0,1), (1,1), (0,0)],\n...         [(0.1, 0.1), (0.1, 0.2), (0.2, 0.2), (0.1, 0.1)],\n...         [(0.6, 0.6), (0.6, 0.7), (0.7, 0.7), (0.6, 0.6)],\n...     ]\n... )\n</code></pre> Source code in <code>valor/schemas/symbolic/types.py</code> <pre><code>class Polygon(Spatial):\n    \"\"\"\n    Represents a polygon with a boundary and optional holes.\n\n    Follows the GeoJSON specification (RFC 7946).\n\n    Parameters\n    ----------\n    value : List[List[Tuple[float, float]]], optional\n        A polygon.\n\n    Attributes\n    ----------\n    area\n    boundary\n    holes\n    xmin\n    xmax\n    ymin\n    ymax\n\n    Examples\n    --------\n    Create a polygon without any holes.\n    &gt;&gt;&gt; Polygon([[(0,0), (0,1), (1,1), (0,0)]])\n\n    Create a polygon with 2 holes.\n    &gt;&gt;&gt; Polygon(\n    ...     [\n    ...         [(0,0), (0,1), (1,1), (0,0)],\n    ...         [(0.1, 0.1), (0.1, 0.2), (0.2, 0.2), (0.1, 0.1)],\n    ...         [(0.6, 0.6), (0.6, 0.7), (0.7, 0.7), (0.6, 0.6)],\n    ...     ]\n    ... )\n    \"\"\"\n\n    def __init__(\n        self, value: typing.List[typing.List[typing.Tuple[float, float]]]\n    ):\n        super().__init__(value=value)\n\n    @classmethod\n    def __validate__(cls, value: typing.Any):\n        MultiLineString.__validate__(value)\n        for line in value:\n            if not (len(line) &gt;= 4 and line[0] == line[-1]):\n                raise ValueError(\n                    \"Polygons are defined by at least 4 points with the first point being repeated at the end.\"\n                )\n\n    @classmethod\n    def decode_value(\n        cls,\n        value: typing.Optional[typing.List[typing.List[typing.List[float]]]],\n    ):\n        \"\"\"Decode object from JSON compatible dictionary.\"\"\"\n        if value is None:\n            return None\n        return cls(\n            [\n                [(point[0], point[1]) for point in subpolygon]\n                for subpolygon in value\n            ]\n        )\n\n    @property\n    def area(self) -&gt; Float:\n        \"\"\"\n        Symbolic representation of area.\n        \"\"\"\n        if not isinstance(self._value, Symbol):\n            raise ValueError\n        return Float.symbolic(\n            name=self._value._name,\n            key=self._value._key,\n            attribute=\"area\",\n        )\n\n    @property\n    def boundary(self) -&gt; typing.List[typing.Tuple[float, float]]:\n        \"\"\"\n        The boundary of the polygon.\n\n        Returns\n        -------\n        List[Tuple(float, float)]\n            A list of points.\n        \"\"\"\n        value = self.get_value()\n        if value is None:\n            raise ValueError(\"Polygon is 'None'\")\n        return value[0]\n\n    @property\n    def holes(self) -&gt; typing.List[typing.List[typing.Tuple[float, float]]]:\n        \"\"\"\n        typing.Any holes in the polygon.\n\n        Returns\n        -------\n        List[List[Tuple(float, float)]]\n            A list of holes.\n        \"\"\"\n        value = self.get_value()\n        if value is None:\n            raise ValueError(\"Polygon is 'None'\")\n        return value[1:]\n\n    @property\n    def xmin(self) -&gt; float:\n        \"\"\"\n        Minimum x-value.\n\n        Returns\n        -------\n        float\n        \"\"\"\n        return min([p[0] for p in self.boundary])\n\n    @property\n    def xmax(self) -&gt; float:\n        \"\"\"\n        Maximum x-value.\n\n        Returns\n        -------\n        float\n        \"\"\"\n        return max([p[0] for p in self.boundary])\n\n    @property\n    def ymin(self) -&gt; float:\n        \"\"\"\n        Minimum y-value.\n\n        Returns\n        -------\n        float\n        \"\"\"\n        return min([p[1] for p in self.boundary])\n\n    @property\n    def ymax(self) -&gt; float:\n        \"\"\"\n        Maximum y-value.\n\n        Returns\n        -------\n        float\n        \"\"\"\n        return max([p[1] for p in self.boundary])\n</code></pre>"},{"location":"client_api/Schemas/Spatial/Polygon/#valor.schemas.Polygon-attributes","title":"Attributes","text":""},{"location":"client_api/Schemas/Spatial/Polygon/#valor.schemas.Polygon.area","title":"<code>valor.schemas.Polygon.area: Float</code>  <code>property</code>","text":"<p>Symbolic representation of area.</p>"},{"location":"client_api/Schemas/Spatial/Polygon/#valor.schemas.Polygon.boundary","title":"<code>valor.schemas.Polygon.boundary: typing.List[typing.Tuple[float, float]]</code>  <code>property</code>","text":"<p>The boundary of the polygon.</p> <p>Returns:</p> Type Description <code>List[Tuple(float, float)]</code> <p>A list of points.</p>"},{"location":"client_api/Schemas/Spatial/Polygon/#valor.schemas.Polygon.holes","title":"<code>valor.schemas.Polygon.holes: typing.List[typing.List[typing.Tuple[float, float]]]</code>  <code>property</code>","text":"<p>typing.Any holes in the polygon.</p> <p>Returns:</p> Type Description <code>List[List[Tuple(float, float)]]</code> <p>A list of holes.</p>"},{"location":"client_api/Schemas/Spatial/Polygon/#valor.schemas.Polygon.xmax","title":"<code>valor.schemas.Polygon.xmax: float</code>  <code>property</code>","text":"<p>Maximum x-value.</p> <p>Returns:</p> Type Description <code>float</code>"},{"location":"client_api/Schemas/Spatial/Polygon/#valor.schemas.Polygon.xmin","title":"<code>valor.schemas.Polygon.xmin: float</code>  <code>property</code>","text":"<p>Minimum x-value.</p> <p>Returns:</p> Type Description <code>float</code>"},{"location":"client_api/Schemas/Spatial/Polygon/#valor.schemas.Polygon.ymax","title":"<code>valor.schemas.Polygon.ymax: float</code>  <code>property</code>","text":"<p>Maximum y-value.</p> <p>Returns:</p> Type Description <code>float</code>"},{"location":"client_api/Schemas/Spatial/Polygon/#valor.schemas.Polygon.ymin","title":"<code>valor.schemas.Polygon.ymin: float</code>  <code>property</code>","text":"<p>Minimum y-value.</p> <p>Returns:</p> Type Description <code>float</code>"},{"location":"client_api/Schemas/Spatial/Polygon/#valor.schemas.Polygon-functions","title":"Functions","text":""},{"location":"client_api/Schemas/Spatial/Polygon/#valor.schemas.Polygon.decode_value","title":"<code>valor.schemas.Polygon.decode_value(value)</code>  <code>classmethod</code>","text":"<p>Decode object from JSON compatible dictionary.</p> Source code in <code>valor/schemas/symbolic/types.py</code> <pre><code>@classmethod\ndef decode_value(\n    cls,\n    value: typing.Optional[typing.List[typing.List[typing.List[float]]]],\n):\n    \"\"\"Decode object from JSON compatible dictionary.\"\"\"\n    if value is None:\n        return None\n    return cls(\n        [\n            [(point[0], point[1]) for point in subpolygon]\n            for subpolygon in value\n        ]\n    )\n</code></pre>"},{"location":"client_api/Schemas/Spatial/Raster/","title":"Raster","text":"<p>               Bases: <code>Spatial</code></p> <p>Represents a binary mask.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Dict[str, Union[ndarray, str, None]]</code> <p>An raster value.</p> required <p>Attributes:</p> Name Type Description <code>area</code> <code>Float</code> <code>array</code> <code>ndarray</code> <code>geometry</code> <code>Union[Box, Polygon, MultiPolygon]</code> <code>height</code> <code>int</code> <code>width</code> <code>int</code> <p>Raises:</p> Type Description <code>TypeError</code> <p>If <code>encoding</code> is not a string.</p> <p>Examples:</p> <p>Generate a random mask.</p> <pre><code>&gt;&gt;&gt; import numpy.random\n&gt;&gt;&gt; height = 640\n&gt;&gt;&gt; width = 480\n&gt;&gt;&gt; array = numpy.random.rand(height, width)\n</code></pre> <p>Convert to binary mask.</p> <pre><code>&gt;&gt;&gt; mask = (array &gt; 0.5)\n</code></pre> <p>Create Raster.</p> <pre><code>&gt;&gt;&gt; Raster.from_numpy(mask)\n</code></pre> Source code in <code>valor/schemas/symbolic/types.py</code> <pre><code>class Raster(Spatial):\n    \"\"\"\n    Represents a binary mask.\n\n    Parameters\n    ----------\n    value : Dict[str, typing.Union[np.ndarray, str, None]], optional\n        An raster value.\n\n    Attributes\n    ----------\n    area\n    array\n    geometry\n    height\n    width\n\n    Raises\n    ------\n    TypeError\n        If `encoding` is not a string.\n\n    Examples\n    --------\n    Generate a random mask.\n    &gt;&gt;&gt; import numpy.random\n    &gt;&gt;&gt; height = 640\n    &gt;&gt;&gt; width = 480\n    &gt;&gt;&gt; array = numpy.random.rand(height, width)\n\n    Convert to binary mask.\n    &gt;&gt;&gt; mask = (array &gt; 0.5)\n\n    Create Raster.\n    &gt;&gt;&gt; Raster.from_numpy(mask)\n    \"\"\"\n\n    def __init__(\n        self,\n        value: typing.Dict[\n            str, typing.Union[np.ndarray, Box, Polygon, MultiPolygon, None]\n        ],\n    ):\n        \"\"\"\n        Initialize and instance of a raster.\n\n        Parameters\n        ----------\n        value : Dict[str, Union[np.ndarray, Box, Polygon, MultiPolygon, None]]\n            The raster in dictionary format {\"mask\": &lt;np.ndarray&gt;, \"geometry\": &lt;geometry | None&gt;}.\n        \"\"\"\n        super().__init__(value)\n\n    @classmethod\n    def __validate__(cls, value: typing.Any):\n        \"\"\"\n        Validates typing.\n\n        Parameters\n        ----------\n        value : Any\n            The value to validate.\n\n        Raises\n        ------\n        TypeError\n            If the value type is not supported.\n        \"\"\"\n        if not isinstance(value, dict):\n            raise TypeError(\n                \"Raster should contain a dictionary describing a mask and optionally a geometry.\"\n            )\n        elif set(value.keys()) != {\"mask\", \"geometry\"}:\n            raise ValueError(\n                \"Raster should be described by a dictionary with keys 'mask' and 'geometry'\"\n            )\n        elif not isinstance(value[\"mask\"], np.ndarray):\n            raise TypeError(\n                f\"Expected mask to have type '{np.ndarray}' receieved type '{value['mask']}'\"\n            )\n        elif len(value[\"mask\"].shape) != 2:\n            raise ValueError(\"raster only supports 2d arrays\")\n        elif value[\"mask\"].dtype != bool:\n            raise ValueError(\n                f\"Expecting a binary mask (i.e. of dtype bool) but got dtype {value['mask'].dtype}\"\n            )\n        elif (\n            value[\"geometry\"] is not None\n            and not Polygon.supports(value[\"geometry\"])\n            and not MultiPolygon.supports(value[\"geometry\"])\n        ):\n            raise TypeError(\n                \"Expected geometry to conform to either Polygon or MultiPolygon or be 'None'\"\n            )\n\n    def encode_value(self) -&gt; typing.Any:\n        \"\"\"Encode object to JSON compatible dictionary.\"\"\"\n        value = self.get_value()\n        if value is None:\n            return None\n        f = io.BytesIO()\n        PIL.Image.fromarray(value[\"mask\"]).save(f, format=\"PNG\")\n        f.seek(0)\n        mask_bytes = f.read()\n        f.close()\n        return {\n            \"mask\": b64encode(mask_bytes).decode(),\n            \"geometry\": value[\"geometry\"],\n        }\n\n    @classmethod\n    def decode_value(cls, value: typing.Any):\n        \"\"\"Decode object from JSON compatible dictionary.\"\"\"\n        if value is None:\n            return None\n        if not (\n            isinstance(value, dict)\n            and set(value.keys()) == {\"mask\", \"geometry\"}\n        ):\n            raise ValueError(\n                f\"Improperly formatted raster encoding. Received '{value}'\"\n            )\n        mask_bytes = b64decode(value[\"mask\"])\n        with io.BytesIO(mask_bytes) as f:\n            img = PIL.Image.open(f)\n            value = {\n                \"mask\": np.array(img),\n                \"geometry\": value[\"geometry\"],\n            }\n        return cls(value=value)\n\n    @classmethod\n    def from_numpy(cls, mask: np.ndarray):\n        \"\"\"\n        Create a Raster object from a NumPy array.\n\n        Parameters\n        ----------\n        mask : np.ndarray\n            The 2D binary array representing the mask.\n\n        Returns\n        -------\n        Raster\n\n        Raises\n        ------\n        ValueError\n            If the input array is not 2D or not of dtype bool.\n        \"\"\"\n        return cls(value={\"mask\": mask, \"geometry\": None})\n\n    @classmethod\n    def from_geometry(\n        cls,\n        geometry: typing.Union[Box, Polygon, MultiPolygon],\n        height: int,\n        width: int,\n    ):\n        \"\"\"\n        Create a Raster object from a geometric mask.\n\n        Parameters\n        ----------\n        geometry : Union[Box, Polygon, MultiPolygon]\n            Defines the bitmask as a geometry. Overrides any existing mask.\n        height : int\n            The intended height of the binary mask.\n        width : int\n            The intended width of the binary mask.\n\n        Returns\n        -------\n        Raster\n        \"\"\"\n        bitmask = np.full((int(height), int(width)), False)\n        return cls(value={\"mask\": bitmask, \"geometry\": geometry.get_value()})\n\n    @property\n    def area(self) -&gt; Float:\n        \"\"\"\n        Symbolic representation of area.\n        \"\"\"\n        if not isinstance(self._value, Symbol):\n            raise ValueError\n        return Float.symbolic(\n            name=self._value._name,\n            key=self._value._key,\n            attribute=\"area\",\n        )\n\n    @property\n    def array(self) -&gt; np.ndarray:\n        \"\"\"\n        The bitmask as a numpy array.\n\n        Returns\n        -------\n        Optional[np.ndarray]\n            A 2D binary array representing the mask if it exists.\n        \"\"\"\n        value = self.get_value()\n        if value[\"geometry\"] is not None:\n            warnings.warn(\n                \"Raster array does not contain bitmask as this is a geometry-defined raster.\",\n                RuntimeWarning,\n            )\n        return value[\"mask\"]\n\n    @property\n    def geometry(self) -&gt; typing.Union[Box, Polygon, MultiPolygon]:\n        \"\"\"\n        The geometric mask if it exists.\n\n        Returns\n        -------\n        Box | Polygon | MultiPolygon | None\n            The geometry if it exists.\n        \"\"\"\n        return self.get_value()[\"geometry\"]\n\n    @property\n    def height(self) -&gt; int:\n        \"\"\"Returns the height of the raster if it exists.\"\"\"\n        return self.array.shape[0]\n\n    @property\n    def width(self) -&gt; int:\n        \"\"\"Returns the width of the raster if it exists.\"\"\"\n        return self.array.shape[1]\n</code></pre>"},{"location":"client_api/Schemas/Spatial/Raster/#valor.schemas.Raster-attributes","title":"Attributes","text":""},{"location":"client_api/Schemas/Spatial/Raster/#valor.schemas.Raster.area","title":"<code>valor.schemas.Raster.area: Float</code>  <code>property</code>","text":"<p>Symbolic representation of area.</p>"},{"location":"client_api/Schemas/Spatial/Raster/#valor.schemas.Raster.array","title":"<code>valor.schemas.Raster.array: np.ndarray</code>  <code>property</code>","text":"<p>The bitmask as a numpy array.</p> <p>Returns:</p> Type Description <code>Optional[ndarray]</code> <p>A 2D binary array representing the mask if it exists.</p>"},{"location":"client_api/Schemas/Spatial/Raster/#valor.schemas.Raster.geometry","title":"<code>valor.schemas.Raster.geometry: typing.Union[Box, Polygon, MultiPolygon]</code>  <code>property</code>","text":"<p>The geometric mask if it exists.</p> <p>Returns:</p> Type Description <code>Box | Polygon | MultiPolygon | None</code> <p>The geometry if it exists.</p>"},{"location":"client_api/Schemas/Spatial/Raster/#valor.schemas.Raster.height","title":"<code>valor.schemas.Raster.height: int</code>  <code>property</code>","text":"<p>Returns the height of the raster if it exists.</p>"},{"location":"client_api/Schemas/Spatial/Raster/#valor.schemas.Raster.width","title":"<code>valor.schemas.Raster.width: int</code>  <code>property</code>","text":"<p>Returns the width of the raster if it exists.</p>"},{"location":"client_api/Schemas/Spatial/Raster/#valor.schemas.Raster-functions","title":"Functions","text":""},{"location":"client_api/Schemas/Spatial/Raster/#valor.schemas.Raster.__init__","title":"<code>valor.schemas.Raster.__init__(value)</code>","text":"<p>Initialize and instance of a raster.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Dict[str, Union[ndarray, Box, Polygon, MultiPolygon, None]]</code> <p>The raster in dictionary format {\"mask\": , \"geometry\": }. required Source code in <code>valor/schemas/symbolic/types.py</code> <pre><code>def __init__(\n    self,\n    value: typing.Dict[\n        str, typing.Union[np.ndarray, Box, Polygon, MultiPolygon, None]\n    ],\n):\n    \"\"\"\n    Initialize and instance of a raster.\n\n    Parameters\n    ----------\n    value : Dict[str, Union[np.ndarray, Box, Polygon, MultiPolygon, None]]\n        The raster in dictionary format {\"mask\": &lt;np.ndarray&gt;, \"geometry\": &lt;geometry | None&gt;}.\n    \"\"\"\n    super().__init__(value)\n</code></pre>"},{"location":"client_api/Schemas/Spatial/Raster/#valor.schemas.Raster.__validate__","title":"<code>valor.schemas.Raster.__validate__(value)</code>  <code>classmethod</code>","text":"<p>Validates typing.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>The value to validate.</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>If the value type is not supported.</p> Source code in <code>valor/schemas/symbolic/types.py</code> <pre><code>@classmethod\ndef __validate__(cls, value: typing.Any):\n    \"\"\"\n    Validates typing.\n\n    Parameters\n    ----------\n    value : Any\n        The value to validate.\n\n    Raises\n    ------\n    TypeError\n        If the value type is not supported.\n    \"\"\"\n    if not isinstance(value, dict):\n        raise TypeError(\n            \"Raster should contain a dictionary describing a mask and optionally a geometry.\"\n        )\n    elif set(value.keys()) != {\"mask\", \"geometry\"}:\n        raise ValueError(\n            \"Raster should be described by a dictionary with keys 'mask' and 'geometry'\"\n        )\n    elif not isinstance(value[\"mask\"], np.ndarray):\n        raise TypeError(\n            f\"Expected mask to have type '{np.ndarray}' receieved type '{value['mask']}'\"\n        )\n    elif len(value[\"mask\"].shape) != 2:\n        raise ValueError(\"raster only supports 2d arrays\")\n    elif value[\"mask\"].dtype != bool:\n        raise ValueError(\n            f\"Expecting a binary mask (i.e. of dtype bool) but got dtype {value['mask'].dtype}\"\n        )\n    elif (\n        value[\"geometry\"] is not None\n        and not Polygon.supports(value[\"geometry\"])\n        and not MultiPolygon.supports(value[\"geometry\"])\n    ):\n        raise TypeError(\n            \"Expected geometry to conform to either Polygon or MultiPolygon or be 'None'\"\n        )\n</code></pre>"},{"location":"client_api/Schemas/Spatial/Raster/#valor.schemas.Raster.decode_value","title":"<code>valor.schemas.Raster.decode_value(value)</code>  <code>classmethod</code>","text":"<p>Decode object from JSON compatible dictionary.</p> Source code in <code>valor/schemas/symbolic/types.py</code> <pre><code>@classmethod\ndef decode_value(cls, value: typing.Any):\n    \"\"\"Decode object from JSON compatible dictionary.\"\"\"\n    if value is None:\n        return None\n    if not (\n        isinstance(value, dict)\n        and set(value.keys()) == {\"mask\", \"geometry\"}\n    ):\n        raise ValueError(\n            f\"Improperly formatted raster encoding. Received '{value}'\"\n        )\n    mask_bytes = b64decode(value[\"mask\"])\n    with io.BytesIO(mask_bytes) as f:\n        img = PIL.Image.open(f)\n        value = {\n            \"mask\": np.array(img),\n            \"geometry\": value[\"geometry\"],\n        }\n    return cls(value=value)\n</code></pre>"},{"location":"client_api/Schemas/Spatial/Raster/#valor.schemas.Raster.encode_value","title":"<code>valor.schemas.Raster.encode_value()</code>","text":"<p>Encode object to JSON compatible dictionary.</p> Source code in <code>valor/schemas/symbolic/types.py</code> <pre><code>def encode_value(self) -&gt; typing.Any:\n    \"\"\"Encode object to JSON compatible dictionary.\"\"\"\n    value = self.get_value()\n    if value is None:\n        return None\n    f = io.BytesIO()\n    PIL.Image.fromarray(value[\"mask\"]).save(f, format=\"PNG\")\n    f.seek(0)\n    mask_bytes = f.read()\n    f.close()\n    return {\n        \"mask\": b64encode(mask_bytes).decode(),\n        \"geometry\": value[\"geometry\"],\n    }\n</code></pre>"},{"location":"client_api/Schemas/Spatial/Raster/#valor.schemas.Raster.from_geometry","title":"<code>valor.schemas.Raster.from_geometry(geometry, height, width)</code>  <code>classmethod</code>","text":"<p>Create a Raster object from a geometric mask.</p> <p>Parameters:</p> Name Type Description Default <code>geometry</code> <code>Union[Box, Polygon, MultiPolygon]</code> <p>Defines the bitmask as a geometry. Overrides any existing mask.</p> required <code>height</code> <code>int</code> <p>The intended height of the binary mask.</p> required <code>width</code> <code>int</code> <p>The intended width of the binary mask.</p> required <p>Returns:</p> Type Description <code>Raster</code> Source code in <code>valor/schemas/symbolic/types.py</code> <pre><code>@classmethod\ndef from_geometry(\n    cls,\n    geometry: typing.Union[Box, Polygon, MultiPolygon],\n    height: int,\n    width: int,\n):\n    \"\"\"\n    Create a Raster object from a geometric mask.\n\n    Parameters\n    ----------\n    geometry : Union[Box, Polygon, MultiPolygon]\n        Defines the bitmask as a geometry. Overrides any existing mask.\n    height : int\n        The intended height of the binary mask.\n    width : int\n        The intended width of the binary mask.\n\n    Returns\n    -------\n    Raster\n    \"\"\"\n    bitmask = np.full((int(height), int(width)), False)\n    return cls(value={\"mask\": bitmask, \"geometry\": geometry.get_value()})\n</code></pre>"},{"location":"client_api/Schemas/Spatial/Raster/#valor.schemas.Raster.from_numpy","title":"<code>valor.schemas.Raster.from_numpy(mask)</code>  <code>classmethod</code>","text":"<p>Create a Raster object from a NumPy array.</p> <p>Parameters:</p> Name Type Description Default <code>mask</code> <code>ndarray</code> <p>The 2D binary array representing the mask.</p> required <p>Returns:</p> Type Description <code>Raster</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the input array is not 2D or not of dtype bool.</p> Source code in <code>valor/schemas/symbolic/types.py</code> <pre><code>@classmethod\ndef from_numpy(cls, mask: np.ndarray):\n    \"\"\"\n    Create a Raster object from a NumPy array.\n\n    Parameters\n    ----------\n    mask : np.ndarray\n        The 2D binary array representing the mask.\n\n    Returns\n    -------\n    Raster\n\n    Raises\n    ------\n    ValueError\n        If the input array is not 2D or not of dtype bool.\n    \"\"\"\n    return cls(value={\"mask\": mask, \"geometry\": None})\n</code></pre>"}]}